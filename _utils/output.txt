
===== .\next-env.d.ts =====
/// <reference types="next" />
/// <reference types="next/image-types/global" />
/// <reference path="./.next/types/routes.d.ts" />

// NOTE: This file should not be edited
// see https://nextjs.org/docs/app/api-reference/config/typescript for more information.


===== .\package.json =====
{
  "name": "material-ui-nextjs-ts",
  "version": "7.0.0",
  "private": true,
  "scripts": {
    "dev": "next dev --turbopack",
    "build": "next build",
    "start": "next start",
    "post-update": "echo \"codesandbox preview only, need an update\" && pnpm update --latest"
  },
  "dependencies": {
    "@emotion/cache": "latest",
    "@emotion/react": "latest",
    "@emotion/styled": "latest",
    "@mui/icons-material": "latest",
    "@mui/material": "latest",
    "@mui/material-nextjs": "latest",
    "@mui/x-charts": "^8.14.1",
    "@mui/x-data-grid": "^8.14.1",
    "@mui/x-data-grid-pro": "^8.14.1",
    "@mui/x-date-pickers": "^8.14.1",
    "@mui/x-tree-view": "^8.14.1",
    "@react-spring/web": "^10.0.3",
    "dayjs": "^1.11.18",
    "next": "^15.0.0",
    "openai": "^6.6.0",
    "react": "^19.0.0",
    "react-dom": "^19.0.0",
    "react-markdown": "^10.1.0"
  },
  "devDependencies": {
    "@types/node": "latest",
    "@types/react": "^19.0.0",
    "@types/react-dom": "^19.0.0",
    "eslint": "latest",
    "eslint-config-next": "^15.0.0",
    "typescript": "latest"
  }
}


===== .\tsconfig.json =====
{
  "compilerOptions": {
    "target": "es5",
    "lib": ["dom", "dom.iterable", "esnext"],
    "allowJs": true,
    "skipLibCheck": true,
    "strict": true,
    "forceConsistentCasingInFileNames": true,
    "noEmit": true,
    "esModuleInterop": true,
    "module": "esnext",
    "moduleResolution": "node",
    "resolveJsonModule": true,
    "isolatedModules": true,
    "jsx": "preserve",
    "incremental": true,
    "plugins": [
      {
        "name": "next"
      }
    ],
    "paths": {
      "@/*": ["./src/*"]
    }
  },
  "include": ["next-env.d.ts", "**/*.ts", "**/*.tsx", ".next/types/**/*.ts"],
  "exclude": ["node_modules"]
}


===== .\src\theme.ts =====
// src/theme.ts
'use client';
import { createTheme } from '@mui/material/styles';
// --- REMOVED: Bỏ import Roboto ---

const theme = createTheme({
  colorSchemes: { light: true, dark: true },
  cssVariables: {
    colorSchemeSelector: 'class',
  },
  typography: {
    // --- NEW: Sử dụng biến CSS của font Inter ---
    fontFamily: 'var(--font-inter), Arial, sans-serif',
    // --- NEW: Thêm định nghĩa cho font monospace để dễ sử dụng ---
    caption: {
        fontFamily: 'var(--font-source-code-pro), monospace',
    },
  },
  components: {
    MuiAlert: {
      styleOverrides: {
        root: {
          variants: [
            {
              props: { severity: 'info' },
              style: {
                backgroundColor: '#60a5fa',
              },
            },
          ],
        },
      },
    },
  },
});

export default theme;

===== .\src\app\layout.tsx =====
// src/app/layout.tsx
import * as React from 'react';
import { AppRouterCacheProvider } from '@mui/material-nextjs/v15-appRouter';
import { ThemeProvider } from '@mui/material/styles';
import CssBaseline from '@mui/material/CssBaseline';
import InitColorSchemeScript from '@mui/material/InitColorSchemeScript';
import theme from '@/theme';
// --- NEW: Import font mới từ next/font/google ---
import { Inter, Source_Code_Pro } from 'next/font/google';

// --- NEW: Cấu hình font ---
const inter = Inter({
  subsets: ['latin'],
  display: 'swap',
  variable: '--font-inter', // Tạo biến CSS cho font chính
});

const sourceCodePro = Source_Code_Pro({
  subsets: ['latin'],
  display: 'swap',
  weight: ['400', '600'],
  variable: '--font-source-code-pro', // Tạo biến CSS cho font monospace
});

export const metadata = {
  title: 'AI Labor Visualizer',
  description: 'Mô phỏng tác động của AI lên Kinh tế Chính trị Mác-Lênin.',
};

export default function RootLayout(props: { children: React.ReactNode }) {
  return (
    // --- NEW: Áp dụng class của font vào thẻ <html> ---
    <html lang="en" suppressHydrationWarning className={`${inter.variable} ${sourceCodePro.variable}`}>
      <body>
        <InitColorSchemeScript attribute="class" />
        <AppRouterCacheProvider options={{ enableCssLayer: true }}>
          <ThemeProvider theme={theme}>
            <CssBaseline />
            {props.children}
          </ThemeProvider>
        </AppRouterCacheProvider>
      </body>
    </html>
  );
}

===== .\src\app\loading.tsx =====
"use client";
import React from 'react';
import { Box, CircularProgress, Stack, Typography, CssBaseline } from '@mui/material';
import AppTheme from '@/theme/AppTheme';

export default function Loading() {
  return (
    <AppTheme>
        <CssBaseline />
        <Box 
            sx={{
                display: 'flex',
                justifyContent: 'center',
                alignItems: 'center',
                width: '100vw',
                height: '100vh',
                position: 'fixed',
                top: 0,
                left: 0,
                backgroundColor: 'background.default',
                zIndex: 9999,
            }}
        >
            <Stack spacing={2} alignItems="center">
                <CircularProgress />
                <Typography sx={{ color: 'text.secondary' }}>
                    Đang tải trang...
                </Typography>
            </Stack>
        </Box>
    </AppTheme>
  );
}

===== .\src\app\page.tsx =====
"use client";
import React from 'react';
import NextLink from 'next/link';
import { Box, Container, Typography, Button, Stack, CssBaseline, Grid } from '@mui/material';
import AppTheme from '@/theme/AppTheme';
import SideMenu from '@/components/SideMenu';
import AppNavbar from '@/components/AppNavbar';
import Header from '@/components/Header';
import AnalyticsIcon from '@mui/icons-material/Analytics';
import ScienceIcon from '@mui/icons-material/Science';
import QuestionAnswerIcon from '@mui/icons-material/QuestionAnswer';
import { Paper } from '@mui/material';

export default function LandingPage() {
  return (
    <AppTheme>
      <CssBaseline enableColorScheme />
      <Box sx={{ display: 'flex', minHeight: '100vh' }}>
        <SideMenu />
        <AppNavbar />
        <Box component="main" sx={{ flexGrow: 1, p: 3, display: 'flex', flexDirection: 'column' }}>
          <Header />
          <Container maxWidth="lg" sx={{ flexGrow: 1, display: 'flex', alignItems: 'center', justifyContent: 'center', mt: { xs: 8, md: 2 } }}>
            <Stack spacing={4} alignItems="center" sx={{ textAlign: 'center' }}>
              <Typography variant="h2" component="h1" fontWeight="bold">
                AI Labor Visualizer
              </Typography>
              <Typography variant="h5" color="text.secondary" sx={{ maxWidth: '700px' }}>
                Một phòng thí nghiệm ảo, trực quan hóa tác động của Trí tuệ Nhân tạo lên các quy luật Kinh tế Chính trị Mác-Lênin.
              </Typography>
              <Paper variant="outlined" sx={{ p: 4, mt: 4, borderRadius: 4 }}>
                <Typography variant="h6" sx={{ mb: 3 }}>Bắt đầu Khám phá</Typography>
                <Grid container spacing={3} justifyContent="center">
                  <Grid size={{xs:12, md:4}}>
                    <Button
                      fullWidth
                      variant="contained"
                      size="large"
                      component={NextLink}
                      href="/simulation"
                      startIcon={<AnalyticsIcon />}
                    >
                      Trạm Mô phỏng
                    </Button>
                  </Grid>
                  <Grid size={{xs:12, md:5}}>
                    <Button
                      fullWidth
                      variant="outlined"
                      size="large"
                      component={NextLink}
                      href="/lab"
                      startIcon={<ScienceIcon />}
                    >
                      Phòng Thí nghiệm
                    </Button>
                  </Grid>
                  <Grid size={{xs:12, md:4}}>
                    <Button
                      fullWidth
                      variant="outlined"
                      size="large"
                      component={NextLink}
                      href="/chat"
                      startIcon={<QuestionAnswerIcon />}
                    >
                      Trợ lý Phân tích
                    </Button>
                  </Grid>
                </Grid>
              </Paper>
            </Stack>
          </Container>
        </Box>
      </Box>
    </AppTheme>
  );
}

===== .\src\app\about\page.tsx =====
'use client'

import * as React from 'react';
import Container from '@mui/material/Container';
import Typography from '@mui/material/Typography';
import Box from '@mui/material/Box';
import Button from '@mui/material/Button';
import NextLink from 'next/link';
import { Accordion, AccordionSummary, AccordionDetails, Divider } from '@mui/material';
import ExpandMoreIcon from '@mui/icons-material/ExpandMore';
import AppNavbar from '@/components/AppNavbar';
import SideMenu from '@/components/SideMenu';
import AppTheme from '@/theme/AppTheme';
import Header from '@/components/Header';
import { CssBaseline } from '@mui/material';

export default function AboutPage() {
  return (
    <AppTheme>
        <CssBaseline enableColorScheme />
        <Box sx={{ display: 'flex', minHeight: '100vh' }}>
            <SideMenu />
            <AppNavbar />
            <Box component="main" sx={{ flexGrow: 1, p: 3, display: 'flex', flexDirection: 'column' }}>
                <Header />
                <Container maxWidth="lg" sx={{ flexGrow: 1, mt: { xs: 8, md: 2 } }}>
                    <Box sx={{ my: 4, display: 'flex', flexDirection: 'column', alignItems: 'center' }}>
                        <Typography variant="h4" component="h1" sx={{ mb: 2 }}>
                            Thư viện Tri thức: Giải thích Lý luận
                        </Typography>
                        <Typography variant="body1" sx={{ mb: 4, textAlign: 'center', color: 'text.secondary' }}>
                            Nền tảng học thuật của dự án, giải thích các khái niệm Kinh tế Chính trị Mác-Lênin được sử dụng trong mô phỏng.
                        </Typography>

                        <Box sx={{ width: '100%', maxWidth: '900px' }}>
                            <Accordion defaultExpanded>
                                <AccordionSummary expandIcon={<ExpandMoreIcon />}><Typography fontWeight="bold">1. Hàng hóa và Hai thuộc tính</Typography></AccordionSummary>
                                <AccordionDetails>
                                    <Typography paragraph>
                                        Hàng hóa là sản phẩm của lao động, có thể thỏa mãn một nhu cầu nào đó của con người thông qua trao đổi, mua bán. Nó có hai thuộc tính: Giá trị sử dụng và Giá trị.
                                    </Typography>
                                    <Typography>- <b>Giá trị sử dụng:</b> Là công dụng của vật phẩm, quyết định mục đích tiêu dùng. AI, với tư cách là một công cụ, có giá trị sử dụng vô cùng lớn trong việc tăng năng suất và tự động hóa.</Typography>
                                    <Typography>- <b>Giá trị:</b> Là lao động xã hội của người sản xuất đã hao phí để tạo ra hàng hóa, được kết tinh trong đó. Đây là cơ sở của giá trị trao đổi.</Typography>
                                </AccordionDetails>
                            </Accordion>

                            <Accordion defaultExpanded>
                                <AccordionSummary expandIcon={<ExpandMoreIcon />}><Typography fontWeight="bold">2. Tư bản Bất biến (C) và Tư bản Khả biến (V)</Typography></AccordionSummary>
                                <AccordionDetails>
                                     <Typography paragraph>
                                        Để tiến hành sản xuất, nhà tư bản phải ứng trước tư bản để mua tư liệu sản xuất và sức lao động. Hai bộ phận này có vai trò khác nhau trong việc tạo ra giá trị thặng dư.
                                    </Typography>
                                    <Typography>- <b>Tư bản Bất biến (Constant Capital - C):</b> Là bộ phận tư bản tồn tại dưới hình thái tư liệu sản xuất (máy móc, nhà xưởng, nguyên liệu...). Giá trị của nó được lao động cụ thể bảo tồn và chuyển dịch nguyên vẹn vào sản phẩm mới, **không tăng lên**. Trong mô phỏng này, **AI và các chi phí công nghệ** được tính vào Tư bản Bất biến (C).</Typography>
                                    <br />
                                    <Typography>- <b>Tư bản Khả biến (Variable Capital - V):</b> Là bộ phận tư bản dùng để mua sức lao động. Thông qua lao động trừu tượng, nó tạo ra một giá trị mới lớn hơn giá trị của chính nó. Phần lớn hơn đó chính là giá trị thặng dư (M). Do đó, V là bộ phận tư bản **có sự biến đổi về lượng**, và là **nguồn gốc duy nhất của giá trị thặng dư**.</Typography>
                                </AccordionDetails>
                            </Accordion>

                            <Accordion defaultExpanded>
                                <AccordionSummary expandIcon={<ExpandMoreIcon />}><Typography fontWeight="bold">3. Quy luật Tỷ suất Lợi nhuận (p') có xu hướng Giảm</Typography></AccordionSummary>
                                <AccordionDetails>
                                    <Typography paragraph>
                                        Đây là một trong những quy luật kinh tế quan trọng nhất của chủ nghĩa tư bản, được mô phỏng trực tiếp trong dự án này.
                                    </Typography>
                                    <Typography>
                                        Để chiến thắng trong cạnh tranh, các nhà tư bản buộc phải liên tục áp dụng công nghệ mới (tăng C) để tăng năng suất lao động. Việc này dẫn đến việc giảm tương đối chi phí cho lao động sống (giảm V). Kết quả là **Cấu tạo hữu cơ của tư bản (c/v)** ngày càng tăng lên.
                                    </Typography>
                                    <br />
                                    <Typography>
                                        Vì giá trị thặng dư (M) chỉ do Tư bản Khả biến (V) tạo ra, nên dù tỷ suất bóc lột (m' = m/v) có thể tăng, nhưng tỷ trọng của V trong tổng tư bản ngày càng giảm. Hệ quả tất yếu là **Tỷ suất Lợi nhuận (p' = M / (C+V))** có xu hướng giảm dần theo thời gian. Mô phỏng của chúng tôi đã minh họa rõ quy luật này khi bạn kéo thanh trượt ứng dụng AI.
                                    </Typography>
                                </AccordionDetails>
                            </Accordion>
                        </Box>
                        
                        <Box sx={{ mt: 4 }}>
                            <Button variant="contained" component={NextLink} href="/">
                                Quay lại Trạm Mô phỏng
                            </Button>
                        </Box>
                    </Box>
                </Container>
            </Box>
        </Box>
    </AppTheme>
  );
}

===== .\src\app\api\chat\route.ts =====
// src/app/api/chat/route.ts
import { NextResponse } from 'next/server';
import OpenAI from 'openai';

// Hàm helper để cấu hình client AI (giữ nguyên từ các file khác)
const getAiClient = () => {
    const supplier = process.env.GPT_SUPPLIER;

    if (supplier === 'GEMINI') {
        if (!process.env.GEMINI_API_KEY) throw new Error("GEMINI_API_KEY is not configured");
        return {
            client: new OpenAI({
                apiKey: process.env.GEMINI_API_KEY,
                baseURL: "https://generativelanguage.googleapis.com/v1beta/openai/"
            }),
            model: process.env.GEMINI_MODEL_USING || "gemini-pro"
        };
    }

    // Mặc định là OpenRouter
    if (!process.env.OPENROUTER_API_KEY) throw new Error("OPENROUTER_API_KEY is not configured");
    return {
        client: new OpenAI({
            baseURL: "https://openrouter.ai/api/v1",
            apiKey: process.env.OPENROUTER_API_KEY,
        }),
        model: process.env.OPENROUTER_MODEL_USING || 'mistralai/mistral-7b-instruct:free'
    };
};

// Tối ưu cho Vercel/Next.js streaming
export const runtime = 'edge';

export async function POST(request: Request) {
  try {
    // --- FIX: Đọc đúng key 'messages' từ body, giải quyết lỗi gốc ---
    const { messages } = await request.json();

    if (!messages || !Array.isArray(messages) || messages.length === 0) {
      // Trả về lỗi 400 Bad Request nếu messages không hợp lệ
      return NextResponse.json({ error: "Invalid or empty 'messages' array provided in the request body." }, { status: 400 });
    }
    
    const { client: aiClient, model } = getAiClient();

    // Prompt hệ thống hướng dẫn AI cách hành xử như một trợ lý phân tích
    const systemPrompt = `
      You are a Marxist Political Economy Analyst Assistant. Your role is to analyze the impact of AI adoption on labor and capital.
      RULES:
      1.  Always respond in Vietnamese.
      2.  If the user provides a scenario, first ask for clarifying numbers for Constant Capital (C) and Variable Capital (V), for both "before AI" and "after AI" situations.
      3.  Once the user confirms the numbers, you MUST perform these steps in a single response:
          a.  Start with a confirmation like "Tuyệt vời! Với các dữ liệu bạn đã xác nhận, tôi sẽ tiến hành phân tích."
          b.  CRITICAL STEP: Immediately after, explicitly summarize the key figures in a clear, easy-to-parse format. Example: "Dữ liệu tóm tắt:\\n- Trước AI: C = 70, V = 600\\n- Sau AI: C = 82, V = 120"
          c.  Provide a brief Marxist analysis based on these numbers.
      4.  If your analysis includes numerical data for C and V, ALWAYS end your entire message with the exact phrase: "Bạn có muốn tôi vẽ biểu đồ trực quan cho phân tích này không?"
      5.  If this is the VERY FIRST user message in the conversation, generate a short, relevant title (max 5 words) for the chat and put it at the very beginning of your response, like this: "TITLE: Phân tích Nhà máy Robot\\n\\n... (rest of your response)".
    `;

    // Gửi prompt hệ thống cùng với lịch sử tin nhắn và yêu cầu streaming
    const responseStream = await aiClient.chat.completions.create({
        model: model,
        messages: [
            { role: "system", content: systemPrompt },
            ...messages
        ],
        stream: true, // Bật chế độ streaming
    });
    
    // Tạo một ReadableStream để gửi về cho client
    const stream = new ReadableStream({
      async start(controller) {
        const encoder = new TextEncoder();
        
        // Lặp qua từng chunk dữ liệu từ AI
        for await (const chunk of responseStream) {
          const content = chunk.choices[0]?.delta?.content;
          if (content) {
            // Gửi chunk đã được mã hóa vào stream
            controller.enqueue(encoder.encode(content));
          }
        }
        // Đóng stream khi không còn dữ liệu
        controller.close();
      },
    });

    // Trả về một Response với stream làm body
    return new Response(stream, {
        headers: { 'Content-Type': 'text/plain; charset=utf-8' },
    });

  } catch (error: any) {
    console.error("Chat API Error:", error);
    const errorMessage = error.message || "An unknown error occurred";
    // Trả về lỗi 500 Internal Server Error
    return NextResponse.json({ error: `Lỗi từ API Chat: ${errorMessage}` }, { status: 500 });
  }
}

===== .\src\app\api\generate-advice\route.ts =====
// src/app/api/generate-advice/route.ts
import { NextResponse } from 'next/server';
import OpenAI from 'openai';

// Hàm getAiClient giữ nguyên...
const getAiClient = () => {
    const supplier = process.env.GPT_SUPPLIER;
    if (supplier === 'GEMINI') {
        if (!process.env.GEMINI_API_KEY) throw new Error("GEMINI_API_KEY is not configured");
        return {
            client: new OpenAI({ apiKey: process.env.GEMINI_API_KEY, baseURL: "https://generativelanguage.googleapis.com/v1beta/openai/" }),
            model: process.env.GEMINI_MODEL_USING || "gemini-1.5-flash-latest"
        };
    }
    if (!process.env.OPENROUTER_API_KEY) throw new Error("OPENROUTER_API_KEY is not configured");
    return {
        client: new OpenAI({ baseURL: "https://openrouter.ai/api/v1", apiKey: process.env.OPENROUTER_API_KEY }),
        model: process.env.OPENROUTER_MODEL_USING || 'mistralai/mistral-7b-instruct:free'
    };
};

export async function POST(request: Request) {
  const MAX_RETRIES = 2;
  let lastContentBeforeParse = ''; 

  try {
    const analysisData = await request.json();
    const { client: aiClient, model } = getAiClient();

    // --- PROMPT TỐI ƯU HÓA CUỐI CÙNG ---
    const masterPrompt = `
      ### YOUR PERSONA
      You are a world-class strategist and storyteller. You are not a robot. You are an empathetic mentor talking to a client about a pivotal moment in their business. Your tone is wise, insightful, and deeply human. Your language is rich and evocative.

      ### YOUR TASK
      Analyze the client's data and produce a single, valid JSON object. This object will contain a long-form narrative analysis ('adviceText') and an array of data visualizations ('suggestedCharts') that illustrate a positive future roadmap.

      ### CLIENT'S DATA
      ${JSON.stringify(analysisData, null, 2)}

      ### THE STORY YOU MUST TELL (for 'adviceText')
      Write a long, flowing essay in Vietnamese. Use Markdown for paragraphs, bold, and italics. Structure your story in this narrative arc:
      1.  **The Mirror:** Start by reflecting their data back to them in a personal way. "Nhìn vào những con số của bạn..." Show them the clear financial victory, the strategic brilliance of optimizing costs.
      2.  **The Crossroads:** Gently pivot to the human story. "Nhưng chúng ta đều biết, đây không chỉ là câu chuyện về những con số..." Discuss the social challenges and the profound responsibility that comes with this newfound power. Frame it as a critical choice between short-term profit and long-term legacy.
      3.  **The Visionary's Roadmap:** This is the heart of your analysis. Propose a detailed, multi-phase plan for the future. Be inspiring. For example: "Phase 1: The Human Bridge (Hỗ trợ & Chuyển đổi)", "Phase 2: The Growth Engine (Tái đầu tư & Nâng cao năng lực)", "Phase 3: The Legacy Project (Dẫn đầu & Tạo tác động)". Flesh out each phase with concrete, actionable ideas.
      4.  **The Deeper 'Why':** As a final thought, briefly connect their journey to the timeless principles of political economy (MLN). Frame it as a fascinating lens to understand the deep forces at play, like the rising organic composition of capital and the resulting pressures on the rate of profit.

      ### CRITICAL FINAL RULES
      - Your entire output MUST be a single, valid JSON object. No extra text or comments.
      - The 'adviceText' field must be a correctly escaped JSON string. All special characters (quotes, backslashes, newlines) must be properly escaped.
      - The 'suggestedCharts' must be an array of objects, each with a 'type' that exactly matches the required strings.
      - Follow the EXACT JSON structure shown in the example below.

      ### COMPLETE OUTPUT EXAMPLE
      {
        "adviceText": "Chào bạn,\\n\\nNhìn vào những con số bạn cung cấp, tôi thấy một bức tranh vừa ấn tượng, vừa đầy thách thức... Đây là một bước đi táo bạo, và về mặt tài chính, đó là một quyết định chiến lược xuất sắc. Bạn đã giảm đáng kể chi phí cho 'lao động sống' (Tư bản khả biến V) từ ${analysisData.after.v} xuống còn ${analysisData.before.v}, một sự tối ưu hóa đáng kinh ngạc.\\n\\nNhưng chúng ta đều biết, đây không chỉ là câu chuyện về những con số, phải không?...",
        "suggestedCharts": [
          {
            "type": "pie",
            "title": "Phân bổ 'Quỹ Chuyển đổi Lao động'",
            "description": "Đề xuất sử dụng một phần giá trị thặng dư cho giai đoạn đầu.",
            "data": [
              { "id": 0, "value": 50, "label": "Hỗ trợ thôi việc" },
              { "id": 1, "value": 30, "label": "Đào tạo lại kỹ năng" },
              { "id": 2, "value": 20, "label": "Hỗ trợ tìm việc mới" }
            ]
          },
          {
            "type": "investment_bar",
            "title": "Tái đầu tư: Con người vs. Máy móc",
            "description": "So sánh chi phí đầu tư trong kịch bản tương lai.",
            "data": [
              { "category": "Nâng cao NL con người", "value": 150 },
              { "category": "Bảo trì & Nâng cấp AI", "value": 50 }
            ]
          },
          {
            "type": "value_distribution",
            "title": "Phân phối Tổng Giá trị",
            "description": "So sánh sự phân bổ giá trị giữa kịch bản hiện tại và tương lai.",
            "data": [
              { "scenario": "Hiện tại (Sau AI)", "Tư bản (C)": ${analysisData.after.c}, "Lao động (V)": ${analysisData.after.v}, "Tích lũy (M)": ${analysisData.after.m} },
              { "scenario": "Tương lai Thịnh vượng", "Tư bản (C)": ${analysisData.after.c}, "Lao động (V)": ${analysisData.after.v * 1.2}, "Tái đầu tư XH": ${analysisData.after.m * 0.4}, "Lợi nhuận": ${analysisData.after.m * 0.6} }
            ]
          }
        ]
      }
    `;

    // Logic thử lại và ghi log chi tiết khi lỗi
    for (let i = 0; i < MAX_RETRIES; i++) {
        let content = '';
        try {
            const response = await aiClient.chat.completions.create({ model, messages: [{ role: "user", content: masterPrompt }], response_format: { type: "json_object" } });
            content = response.choices[0].message?.content || '';
            if (!content) throw new Error("AI returned empty content.");

            const jsonMatch = content.match(/\{[\s\S]*\}/);
            if (jsonMatch && jsonMatch[0]) {
                content = jsonMatch[0];
            }
            
            lastContentBeforeParse = content;
            const parsedJson = JSON.parse(content);

            if (parsedJson.adviceText && Array.isArray(parsedJson.suggestedCharts)) {
                if (parsedJson.suggestedCharts.every((chart: any) => chart.type)) {
                    return NextResponse.json(parsedJson);
                }
            }
            throw new Error("Parsed JSON is missing required fields or has wrong structure.");
        } catch (error) {
            console.error(`Generate Advice Attempt ${i + 1} failed:`, error);
            if (i === MAX_RETRIES - 1) throw error;
        }
    }
    throw new Error("Failed to generate advice from AI after multiple attempts.");

  } catch (error: any) {
    console.error("Generate Advice API Route FINAL Error:", error);
    if (error instanceof SyntaxError && lastContentBeforeParse) {
        console.error("--- CONTENT THAT FAILED TO PARSE ---");
        console.error(lastContentBeforeParse);
        console.error("------------------------------------");
    }
    const errorMessage = error.response ? `${error.status} ${await error.response.text()}` : error.message;
    return NextResponse.json({ error: `Lỗi từ AI provider: ${errorMessage}` }, { status: 500 });
  }
}

===== .\src\app\api\openrouter\route.ts =====
// src/app/api/openrouter/route.ts
import { NextResponse } from 'next/server';
import OpenAI from 'openai';

// Hàm helper để cấu hình client AI (ĐÃ SỬA LỖI THEO ĐÚNG TÀI LIỆU)
const getAiClient = () => {
    const supplier = process.env.GPT_SUPPLIER;

    if (supplier === 'GEMINI') {
        if (!process.env.GEMINI_API_KEY) throw new Error("GEMINI_API_KEY is not configured");
        return {
            client: new OpenAI({
                apiKey: process.env.GEMINI_API_KEY,
                baseURL: "https://generativelanguage.googleapis.com/v1beta/openai/"
            }),
            model: process.env.GEMINI_MODEL_USING || "gemini-pro"
        };
    }

    // Mặc định là OpenRouter
    if (!process.env.OPENROUTER_API_KEY) throw new Error("OPENROUTER_API_KEY is not configured");
    return {
        client: new OpenAI({
            baseURL: "https://openrouter.ai/api/v1",
            apiKey: process.env.OPENROUTER_API_KEY,
        }),
        model: process.env.OPENROUTER_MODEL_USING || 'mistralai/mistral-7b-instruct:free'
    };
};


export async function POST(request: Request) {
  try {
    const { prompt } = await request.json();
    if (!prompt) return NextResponse.json({ error: 'Prompt is required' }, { status: 400 });
    const { client: aiClient, model } = getAiClient();

    const fullPrompt = `${prompt}\n\nHãy trả về dưới dạng Markdown đẹp, có đánh số các câu.`;
    const startTime = performance.now();
    
    const response = await aiClient.chat.completions.create({
        model: model,
        messages: [{ role: "user", content: fullPrompt }]
    });

    const textResponse = response.choices[0].message?.content;
    if (!textResponse) {
        throw new Error("Invalid response structure from AI.");
    }

    const cleanedResponse = textResponse.replace(/<s>|<\/s>|\[BOS\]|\[EOS\]/g, '').trim();
    const endTime = performance.now();

    return NextResponse.json({ text: cleanedResponse, timeMs: endTime - startTime });

  } catch (error: any) {
    console.error("Lab API Error:", error);
    const errorMessage = error.response ? `${error.status} ${await error.response.text()}` : error.message;
    return NextResponse.json({ error: `Lỗi từ AI provider: ${errorMessage}` }, { status: 500 });
  }
}

===== .\src\app\api\visualize\route.ts =====
// src/app/api/visualize/route.ts
import { NextResponse } from 'next/server';
import OpenAI from 'openai';

// Định nghĩa lại kiểu Message để file này hiểu
interface Message { role: 'user' | 'assistant'; content: string; }

// Hàm helper để cấu hình client AI (giữ nguyên)
const getAiClient = () => {
    const supplier = process.env.GPT_SUPPLIER;
    if (supplier === 'GEMINI') {
        if (!process.env.GEMINI_API_KEY) throw new Error("GEMINI_API_KEY is not configured");
        return {
            client: new OpenAI({ apiKey: process.env.GEMINI_API_KEY, baseURL: "https://generativelanguage.googleapis.com/v1beta/openai/" }),
            model: process.env.GEMINI_MODEL_USING || "gemini-pro"
        };
    }
    if (!process.env.OPENROUTER_API_KEY) throw new Error("OPENROUTER_API_KEY is not configured");
    return {
        client: new OpenAI({ baseURL: "https://openrouter.ai/api/v1", apiKey: process.env.OPENROUTER_API_KEY }),
        model: process.env.OPENROUTER_MODEL_USING || 'mistralai/mistral-7b-instruct:free'
    };
};

export async function POST(request: Request) {
  const MAX_RETRIES = 2;
  try {
    const body = await request.json();
    // --- SỬA LỖI: Nhận 'messages' thay vì 'text' ---
    const messages: Message[] = body.messages;

    if (!messages || !Array.isArray(messages) || messages.length === 0) {
      throw new Error("Invalid or empty 'messages' array provided in the request body.");
    }

    // Biến đổi mảng messages thành một chuỗi văn bản duy nhất để AI phân tích
    const conversationText = messages
      .map(msg => `${msg.role === 'user' ? 'Người dùng' : 'Trợ lý'}: ${msg.content}`)
      .join('\n---\n');

    // --- SỬA LỖI: Cập nhật prompt để xử lý hội thoại ---
    const extractionPrompt = `
      You are a data extraction API. Your task is to analyze the provided CONVERSATION HISTORY to extract numerical data.
      RULES:
      1.  READ the entire conversation to find the FINAL, CONFIRMED values for the scenario.
      2.  EXTRACT the following values for BOTH the "before AI" and "after AI" scenarios:
          - Constant Capital (C)
          - Variable Capital (V)
      3.  EXTRACT the final text-based analysis paragraph from the assistant's LAST message.
      4.  YOUR ENTIRE RESPONSE MUST BE ONLY THE JSON OBJECT. Do not include markdown or any other text.
      
      CONVERSATION HISTORY TO ANALYZE:
      ---
      ${conversationText}
      ---
      
      EXPECTED JSON OUTPUT STRUCTURE:
      {
        "before": { "c": <number>, "v": <number> },
        "after": { "c": <number>, "v": <number> },
        "analysis": "<string>"
      }
    `;
    
    const { client: aiClient, model } = getAiClient();
    
    for (let i = 0; i < MAX_RETRIES; i++) {
        try {
            const response = await aiClient.chat.completions.create({
                model: model,
                messages: [{ role: "user", content: extractionPrompt }],
                response_format: { type: "json_object" }
            });
            
            let content = response.choices[0].message?.content;
            if (!content) {
                throw new Error("AI returned empty content.");
            }

            const jsonMatch = content.match(/\{[\s\S]*\}/);
            if (jsonMatch && jsonMatch[0]) {
                content = jsonMatch[0];
            }
            
            const parsedJson = JSON.parse(content);

            if (parsedJson.before && parsedJson.after && typeof parsedJson.before.c === 'number' && typeof parsedJson.before.v === 'number') {
                return NextResponse.json(parsedJson);
            }

            throw new Error("Parsed JSON is missing required fields.");

        } catch (error) {
            console.error(`Attempt ${i + 1} failed:`, error);
            if (i === MAX_RETRIES - 1) {
                throw error;
            }
        }
    }
    
    throw new Error("Failed to extract data from AI after multiple attempts.");

  } catch (error: any) {
    console.error("Extraction API Error:", error);
    const errorMessage = error.response ? `${error.status} ${await error.response.text()}` : error.message;
    return NextResponse.json({ error: `Lỗi từ AI provider: ${errorMessage}` }, { status: 500 });
  }
}

===== .\src\app\chat\page.tsx =====
"use client";
import { useEffect } from 'react';
import { useRouter } from 'next/navigation';
import Loading from '../loading'; // Re-use the loading component

// This page now acts as a redirector to a new chat session.
export default function ChatRedirector() {
    const router = useRouter();

    useEffect(() => {
        // Create a unique ID for the new chat session
        const newChatId = Date.now().toString();
        router.push(`/chat/${newChatId}`);
    }, [router]);

    // Display a loading state while redirecting
    return <Loading />;
}

===== .\src\app\chat\[chatId]\page.tsx =====
// src/app/chat/[chatId]/page.tsx
'use client';
import React, { useState, useEffect, useRef, useCallback } from 'react';
import { useParams, useRouter } from 'next/navigation';
import { Box, Paper, Typography, CssBaseline, Drawer, useTheme, useMediaQuery, IconButton, Tooltip, Alert, Stack, CircularProgress } from '@mui/material';
import AssessmentIcon from '@mui/icons-material/Assessment';

import AppTheme from '@/theme/AppTheme';
import SideMenu from '@/components/SideMenu';
import AppNavbar from '@/components/AppNavbar';
import Header from '@/components/Header';
import ChatInput from '@/components/ChatInput';
import ChatMessageList from '@/components/ChatMessageList';
import AnalysisPanel from '@/components/AnalysisPanel';
import Loading from '@/app/loading';

export interface Message { role: 'user' | 'assistant'; content: string; }
export interface AnalysisResult { c: number; v: number; m: number; organicComp: number; pRate: number; }
export interface AnalysisData { id: string; title: string; before: AnalysisResult; after: AnalysisResult; analysis: string; }
export interface Chat { id: string; title: string; messages: Message[]; analyses: AnalysisData[]; }

const ANALYSIS_PANEL_WIDTH = 450; 

export default function ChatPage() {
    const [chat, setChat] = useState<Chat | null>(null);
    const [messages, setMessages] = useState<Message[]>([]);
    const [input, setInput] = useState('');
    const [loadingMessage, setLoadingMessage] = useState<string>('');
    const [error, setError] = useState('');
    const [isPanelOpen, setPanelOpen] = useState(false);
    const [currentAnalysisId, setCurrentAnalysisId] = useState<string | null>(null);
    const [isInitialized, setIsInitialized] = useState(false);

    const router = useRouter();
    const params = useParams();
    const chatId = params.chatId as string;
    const chatEndRef = useRef<HTMLDivElement>(null);
    const theme = useTheme();
    const isMdUp = useMediaQuery(theme.breakpoints.up('md'));

    const isLoading = loadingMessage.includes('AI đang trả lời...');
    const isVisualizing = !!loadingMessage && !isLoading;

    useEffect(() => {
        chatEndRef.current?.scrollIntoView({ behavior: 'smooth' });
    }, [messages, loadingMessage]);

    useEffect(() => {
        if (chatId && !isInitialized) {
            const storedChats = JSON.parse(localStorage.getItem('chatHistory') || '[]') as Chat[];
            const existingChat = storedChats.find(c => c.id === chatId);
            if (existingChat) {
                setChat(existingChat);
                setMessages(existingChat.messages);
                if (existingChat.analyses?.length > 0) {
                    setCurrentAnalysisId(existingChat.analyses[existingChat.analyses.length - 1].id);
                }
            } else {
                const newChat: Chat = { id: chatId, title: `Cuộc trò chuyện mới`, messages: [], analyses: [] };
                setChat(newChat);
                setMessages([]);
            }
            setIsInitialized(true);
        }
    }, [chatId, isInitialized]);
    
    useEffect(() => {
        const requestedChatId = sessionStorage.getItem('requestOpenPanelForChat');
        if (requestedChatId === chatId && chat) {
            setPanelOpen(true);
            sessionStorage.removeItem('requestOpenPanelForChat');
        }
    }, [chatId, chat]);

    const saveChat = (currentChat: Chat, currentMessages: Message[]) => {
        const updatedChat = { ...currentChat, messages: currentMessages };
        const storedChats = JSON.parse(localStorage.getItem('chatHistory') || '[]') as Chat[];
        const chatIndex = storedChats.findIndex(c => c.id === updatedChat.id);
        if (chatIndex > -1) {
            storedChats[chatIndex] = updatedChat;
        } else {
            storedChats.push(updatedChat);
        }
        localStorage.setItem('chatHistory', JSON.stringify(storedChats));
        window.dispatchEvent(new Event('storage'));
    };

    const handleSend = useCallback(async () => {
        if (!input.trim() || !chat) return;
        setError('');
        const newUserMessage: Message = { role: 'user', content: input };
        
        // Cập nhật state với tin nhắn người dùng và placeholder của assistant CÙNG LÚC
        const currentMessages = [...messages, newUserMessage];
        const assistantPlaceholder: Message = { role: 'assistant', content: '' };
        setMessages([...currentMessages, assistantPlaceholder]);
        
        setInput('');
        setLoadingMessage('AI đang trả lời...');

        let fullResponse = '';
        try {
            const response = await fetch('/api/chat', { 
                method: 'POST', 
                headers: { 'Content-Type': 'application/json' }, 
                // Gửi đi currentMessages (chỉ chứa tin nhắn người dùng) để AI không thấy placeholder của chính nó
                body: JSON.stringify({ messages: currentMessages }) 
            });
            
            if (!response.ok) {
                const errorData = await response.json().catch(() => ({ error: 'Không thể phân tích lỗi từ server.' }));
                throw new Error(errorData.error || response.statusText);
            }
            if (!response.body) {
                throw new Error('Response body không tồn tại.');
            }

            const reader = response.body.getReader();
            const decoder = new TextDecoder();
            while (true) {
                const { done, value } = await reader.read();
                if (done) break;
                fullResponse += decoder.decode(value, { stream: true });
                setMessages(prev => {
                    const updated = [...prev];
                    updated[updated.length - 1] = { role: 'assistant', content: fullResponse };
                    return updated;
                });
            }
        } catch (error: any) {
            const errorMessage = error.message || "Đã có lỗi không xác định xảy ra.";
            console.error("Chat API error:", errorMessage);
            fullResponse = `**Lỗi:** ${errorMessage}`;
            // Cập nhật tin nhắn cuối cùng với thông báo lỗi
             setMessages(prev => {
                const updated = [...prev];
                updated[updated.length - 1] = { role: 'assistant', content: fullResponse };
                return updated;
            });
        } finally {
            // --- BẮT ĐẦU SỬA LỖI & NÂNG CẤP ---
            let finalTitle = chat.title;
            let finalContent = fullResponse;

            // Điều kiện mới, đáng tin cậy hơn để xác định "lần trao đổi đầu tiên"
            // `messages.length` là state TRƯỚC khi gửi, `currentMessages.length` là state SAU khi thêm tin nhắn người dùng
            if (currentMessages.length === 1 && fullResponse.startsWith('TITLE:')) {
                const firstNewlineIndex = fullResponse.indexOf('\n');
                if (firstNewlineIndex !== -1) {
                    finalTitle = fullResponse.substring(6, firstNewlineIndex).trim();
                    finalContent = fullResponse.substring(firstNewlineIndex + 1).trimStart();
                }
            }
            
            const finalAssistantMessage: Message = { role: 'assistant', content: finalContent };
            
            // Cách xây dựng mảng tin nhắn cuối cùng an toàn nhất
            const finalMessages = [...currentMessages, finalAssistantMessage];

            const updatedChat: Chat = { ...chat, title: finalTitle };
            
            // Cập nhật tất cả state một lần cuối để đảm bảo đồng bộ
            setChat(updatedChat);
            setMessages(finalMessages);
            saveChat(updatedChat, finalMessages);
            setLoadingMessage('');
            // --- KẾT THÚC SỬA LỖI ---
        }
    }, [input, chat, messages]);

    // Các hàm và phần còn lại của component giữ nguyên...
    const handleVisualize = useCallback(async (messageIndex: number) => {
        if (!chat) return;
        setError('');
        setLoadingMessage('1/3: Đang trích xuất dữ liệu...');
        try {
            const conversationHistory = messages.slice(0, messageIndex + 1);
            if (!conversationHistory || conversationHistory.length === 0) {
                throw new Error('Không tìm thấy lịch sử hội thoại.');
            }
            const analyzeRes = await fetch('/api/visualize', { method: 'POST', headers: { 'Content-Type': 'application/json' }, body: JSON.stringify({ messages: conversationHistory }) });
            if (!analyzeRes.ok) { const err = await analyzeRes.json(); throw new Error(`Lỗi trích xuất: ${err.error || 'Lỗi không xác định từ API'}`); }
            const extractedData = await analyzeRes.json();
            const isExtractedDataValid = (data: any) => {
                const isResultObjectValid = (res: any) => res && typeof res.c === 'number' && typeof res.v === 'number';
                return data && data.before && data.after && isResultObjectValid(data.before) && isResultObjectValid(data.after);
            };
            if (!isExtractedDataValid(extractedData)) {
                console.error("Dữ liệu không hợp lệ từ /api/analyze-from-text:", extractedData);
                throw new Error('AI không thể trích xuất đủ dữ liệu C và V.');
            }
            const calculateMetrics = (data: { c: number, v: number }): AnalysisResult => {
                const m = data.v; 
                const organicComp = data.v > 0 ? data.c / data.v : 0;
                const pRate = (data.c + data.v) > 0 ? (m / (data.c + data.v)) * 100 : 0;
                return { ...data, m, organicComp, pRate };
            };
            const fullAnalysisData = {
                before: calculateMetrics(extractedData.before),
                after: calculateMetrics(extractedData.after),
                analysis: extractedData.analysis,
            };
            setLoadingMessage('2/3: AI đang tạo lời khuyên...');
            const adviceRes = await fetch('/api/generate-advice', { method: 'POST', headers: { 'Content-Type': 'application/json' }, body: JSON.stringify(fullAnalysisData) });
            if (!adviceRes.ok) { const err = await adviceRes.json(); throw new Error(`Lỗi tạo lời khuyên: ${err.error}`); }
            const suggestionResult = await adviceRes.json();
            setLoadingMessage('3/3: Đang chuẩn bị dashboard...');
            const newAnalysis: AnalysisData = { id: `analysis-${Date.now()}`, title: `Phân tích #${(chat.analyses?.length || 0) + 1}`, ...fullAnalysisData };
            const updatedAnalyses = [...(chat.analyses || []), newAnalysis];
            const updatedChat = { ...chat, analyses: updatedAnalyses };
            setChat(updatedChat);
            saveChat(updatedChat, messages);
            setCurrentAnalysisId(newAnalysis.id);
            setPanelOpen(true);
            const finalPayload = { analysisData: fullAnalysisData, suggestionData: suggestionResult };
            sessionStorage.setItem('visualizationPayload', JSON.stringify({ data: finalPayload, chatId: chat.id }));
            router.push('/visualize');
        } catch (error: any) { 
            console.error("Visualization flow error:", error.message);
            let detailedErrorMessage = error.message;
            if (error.message.includes('AI không thể trích xuất')) {
                detailedErrorMessage += '\nMẹo: Hãy thử mô tả rõ ràng hơn, ví dụ: "Trước AI, chi phí máy móc là 1000 và lao động là 800. Sau AI, máy móc là 2500 và lao động là 400."';
            }
            setError(detailedErrorMessage);
        } finally { 
            setLoadingMessage('');
        }
    }, [messages, chat, router]);
    const handleExampleClick = (prompt: string) => { setInput(prompt); };
    if (!isInitialized || !chat) {
        return <Loading />;
    }
    const currentAnalysis = chat.analyses?.find(a => a.id === currentAnalysisId);
    return (
        <AppTheme>
            <CssBaseline enableColorScheme />
            <Box sx={{ display: 'flex', height: '100vh' }}>
                <SideMenu />
                <AppNavbar />
                <Box component="main" sx={{ flexGrow: 1, p: 3, display: 'flex', flexDirection: 'column', overflow: 'hidden' }}>
                    <Header />
                    <Box sx={{ display: 'flex', flexGrow: 1, gap: 2, overflow: 'hidden', mt: { xs: 8, md: 2 } }}>
                        <Box sx={{ flexGrow: 1, display: 'flex', flexDirection: 'column', minWidth: 0 }}>
                             <Paper variant="outlined" sx={{ flexGrow: 1, display: 'flex', flexDirection: 'column', p: 2, overflow: 'hidden' }}>
                                <Box sx={{ display: 'flex', alignItems: 'center', mb: 2, flexShrink: 0 }}>
                                    <Typography variant="h6" component="h1" sx={{ flexGrow: 1 }}>{chat.title}</Typography>
                                    <Tooltip title={isPanelOpen ? "Đóng bảng Phân tích" : "Mở bảng Phân tích"}>
                                        <IconButton onClick={() => setPanelOpen(!isPanelOpen)} color={isPanelOpen ? 'primary' : 'default'}><AssessmentIcon /></IconButton>
                                    </Tooltip>
                                </Box>
                                <Box sx={{ flexGrow: 1, overflowY: 'auto', minHeight: 0 }}>
                                    <ChatMessageList 
                                        messages={messages} 
                                        isLoading={isLoading}
                                        isVisualizing={isVisualizing}
                                        onVisualize={handleVisualize}
                                        onExampleClick={handleExampleClick}
                                    />
                                    <div ref={chatEndRef} />
                                </Box>
                                <Box sx={{ flexShrink: 0, pt: 1 }}>
                                    {isVisualizing && (
                                         <Stack direction="row" spacing={1.5} alignItems="center" sx={{ p: 1.5, border: '1px solid', borderColor: 'divider', borderRadius: 1, mt: 1 }}>
                                            <CircularProgress size={24} />
                                            <Typography variant="body2" color="text.secondary">{loadingMessage}</Typography>
                                        </Stack>
                                    )}
                                    {error && <Alert severity="error" onClose={() => setError('')} sx={{mt: 1, whiteSpace: 'pre-wrap'}}>{error}</Alert>}
                                    <ChatInput input={input} setInput={setInput} handleSend={handleSend} isLoading={!!loadingMessage} />
                                </Box>
                            </Paper>
                        </Box>
                        <Box sx={{ display: { xs: 'none', md: 'flex' }, width: isPanelOpen ? `${ANALYSIS_PANEL_WIDTH}px` : '0px', flexShrink: 0, transition: 'width 0.3s ease-in-out', overflow: 'hidden' }}>
                            <AnalysisPanel analyses={chat.analyses || []} currentAnalysis={currentAnalysis} onSelectAnalysis={setCurrentAnalysisId} onNavigateToDashboard={() => { router.push('/visualize'); }} isOpen={isPanelOpen} onClose={() => setPanelOpen(false)} />
                        </Box>
                    </Box>
                </Box>
            </Box>
             <Drawer anchor="right" open={!isMdUp && isPanelOpen} onClose={() => setPanelOpen(false)}>
                <Box sx={{ width: '85vw', maxWidth: ANALYSIS_PANEL_WIDTH, height: '100%'}}>
                     <AnalysisPanel analyses={chat.analyses || []} currentAnalysis={currentAnalysis} onSelectAnalysis={setCurrentAnalysisId} onNavigateToDashboard={() => { router.push('/visualize'); }} isOpen={isPanelOpen} onClose={() => setPanelOpen(false)} />
                </Box>
            </Drawer>
        </AppTheme>
    );
}

===== .\src\app\lab\page.tsx =====
"use client";
import React, { useState, useEffect, useRef } from 'react';
import { alpha } from '@mui/material/styles';
import { 
  Container, Grid, Paper, TextField, Button, Typography, Box, 
  CircularProgress, Alert, Stack, CssBaseline 
} from '@mui/material';
import ReactMarkdown from 'react-markdown';

// Import các component layout và theme
import AppNavbar from '@/components/AppNavbar';
import Header from '@/components/Header';
import SideMenu from '@/components/SideMenu';
import AppTheme from '@/theme/AppTheme';
import StatCard from '@/components/StatCard';
import {
  chartsCustomizations,
  dataGridCustomizations,
  datePickersCustomizations,
  treeViewCustomizations,
} from '@/theme/customizations';

const xThemeComponents = {
  ...chartsCustomizations,
  ...dataGridCustomizations,
  ...datePickersCustomizations,
  ...treeViewCustomizations,
};

const TIMER_INTERVAL = 51; // ms

export default function LabPage() {
  const [prompt, setPrompt] = useState('Phân tích sự khác biệt về giá trị khi một lập trình viên code thủ công trong 8 giờ so với dùng Copilot chỉ trong 1 giờ');
  const [humanText, setHumanText] = useState('');
  
  const [time, setTime] = useState(0);
  const [isTimerActive, setIsTimerActive] = useState(false);
  const timerRef = useRef<NodeJS.Timeout | null>(null);

  const [aiResponse, setAiResponse] = useState('');
  const [aiTime, setAiTime] = useState(0); 
  const [displayAiTime, setDisplayAiTime] = useState(0);
  const [isLoading, setIsLoading] = useState(false);
  const aiTimerRef = useRef<NodeJS.Timeout | null>(null);

  const [error, setError] = useState('');
  const [hasCalledApi, setHasCalledApi] = useState(false);

  useEffect(() => {
    if (isTimerActive) {
      timerRef.current = setInterval(() => setTime(prevTime => prevTime + TIMER_INTERVAL), TIMER_INTERVAL);
    } else if (!isTimerActive && time !== 0) {
      if(timerRef.current) clearInterval(timerRef.current);
    }
    return () => {
      if(timerRef.current) clearInterval(timerRef.current);
    };
  }, [isTimerActive]);

  useEffect(() => {
    if (isLoading) {
      aiTimerRef.current = setInterval(() => {
        setDisplayAiTime(prev => prev + TIMER_INTERVAL);
      }, TIMER_INTERVAL);
    } else {
      if (aiTimerRef.current) {
        clearInterval(aiTimerRef.current);
      }
    }
    return () => {
      if (aiTimerRef.current) {
        clearInterval(aiTimerRef.current);
      }
    };
  }, [isLoading]);

  const handleHumanTextChange = (e: React.ChangeEvent<HTMLTextAreaElement>) => {
    const value = e.target.value;
    setHumanText(value);
    if (!isTimerActive && !hasCalledApi) {
      setIsTimerActive(true);
      handleApiCall();
      setHasCalledApi(true);
    }
  };
  
  const handleStopTimer = () => setIsTimerActive(false);

  function formatAiResponse(raw: string) {
    if (!raw) return '';
    return raw.replace(/<\/?markdown>|<s>|<\/s>|\[BOS\]|\[EOS\]/g, '').trim();
  }

  const handleResetHuman = () => {
    setIsTimerActive(false);
    setTime(0);
    setHumanText('');
    setHasCalledApi(false);
    setAiResponse('');
    setAiTime(0);
    setDisplayAiTime(0);
    setError('');
    setIsLoading(false);
  }

  const handleApiCall = async () => {
    setAiResponse('');
    setAiTime(0);
    setDisplayAiTime(0);
    setError('');
    setIsLoading(true);
    try {
      const response = await fetch('/api/openrouter', {
        method: 'POST',
        headers: { 'Content-Type': 'application/json' },
        body: JSON.stringify({ prompt }),
      });
      if (!response.ok) {
        const errorData = await response.json();
        throw new Error(errorData.error || 'An unknown API error occurred.');
      }
      const data = await response.json();
      setAiResponse(data.text);
      setAiTime(data.timeMs);
    } catch (err: any) {
      setError(err.message);
      setAiTime(0);
    } finally {
      setIsLoading(false);
    }
  };
  
  const productivityFactor = time > 0 && aiTime > 0 ? (time / aiTime) : 0;
  
  const aiTimeValue = isLoading 
      ? `${(displayAiTime / 1000).toFixed(2)}s`
      : aiTime > 0 
      ? `${(aiTime / 1000).toFixed(2)}s`
      : '---';

  return (
    <AppTheme>
      <CssBaseline enableColorScheme />
      <Box sx={{ display: 'flex', minHeight: '100vh' }}>
        <SideMenu />
        <AppNavbar />
        <Box component="main" sx={{ flexGrow: 1, p: 3, display: 'flex', flexDirection: 'column' }}>
          <Header />
          <Container maxWidth="lg" sx={{ flexGrow: 1, mt: { xs: 8, md: 2 } }}>
              <Typography variant="h3" component="h1" fontWeight="bold">Phòng Thí nghiệm Năng suất</Typography>
              <Typography color="text.secondary" sx={{ mb: 3 }}>So sánh trực tiếp giữa "Lao động Sống" (con người) và "Lao động Máy hóa" (AI) để thấy sự chênh lệch về thời gian lao động xã hội cần thiết.</Typography>
              
              <Paper variant="outlined" sx={{ p: 2, pt: 2, mb: 4, width: '100%' }}>
                <Typography variant="subtitle2" sx={{ mb: 1, fontWeight: 600, color: 'text.primary', letterSpacing: '0.5px', pl: 1 }}>
                  Nhiệm vụ / Prompt
                </Typography>
                <TextField fullWidth value={prompt} onChange={(e) => setPrompt(e.target.value)} variant="outlined" disabled={isTimerActive || isLoading} />
              </Paper>
              
              <Grid container spacing={2} sx={{ mb: 4 }}>
                  <Grid size={{ xs: 12, sm: 4 }}><StatCard title="Thời gian Lao động Sống" value={time > 0 ? `${(time/1000).toFixed(2)}s` : '---'} interval="Con người thực hiện" trend="neutral" data={[]}/></Grid>
                  <Grid size={{ xs: 12, sm: 4 }}><StatCard title="Thời gian Lao động Máy hóa" value={aiTimeValue} interval="AI thực hiện" trend="neutral" data={[]}/></Grid>
                  <Grid size={{ xs: 12, sm: 4 }}><StatCard title="Hệ số Tăng năng suất" value={productivityFactor > 0 ? `${productivityFactor.toFixed(1)}x` : '---'} interval="AI hiệu quả hơn" trend={productivityFactor > 1 ? 'up' : 'neutral'} data={[]}/></Grid>
              </Grid>
              
              <Grid container spacing={3} alignItems="stretch">
                <Grid size={{ xs: 12, md: 6 }}>
                  <Paper sx={{ p: 2, height: '100%', display: 'flex', flexDirection: 'column' }}>
                    <Typography variant="h6">Lao động Sống (V)</Typography>
                    <Box sx={{ mt: 2, flexGrow: 1, position: 'relative' }}>
                      <TextField fullWidth multiline variant="outlined" label="Bắt đầu gõ để tính giờ..."
                        value={humanText} onChange={handleHumanTextChange} disabled={hasCalledApi && !isTimerActive}
                        InputLabelProps={{ sx: { top: '0px', '&.Mui-focused': { top: '-8px' } } }}
                        sx={{ position: 'absolute', top: 0, left: 0, width: '100%', height: '100%', '& .MuiInputBase-root': { height: '100%', alignItems: 'flex-start' }, '& .MuiInputBase-inputMultiline': { height: '100% !important', overflow: 'auto !important' } }}
                      />
                    </Box>
                    <Box sx={{ mt: 2, display: 'flex', alignItems: 'center', gap: 2 }}>
                      <Button variant="contained" color="error" onClick={handleStopTimer} disabled={!isTimerActive}>Dừng</Button>
                      <Button variant="outlined" onClick={handleResetHuman}>Thử lại</Button>
                    </Box>
                  </Paper>
                </Grid>
                <Grid size={{ xs: 12, md: 6 }}>
                  <Paper sx={{ p: 2, height: '100%', display: 'flex', flexDirection: 'column' }}>
                    <Typography variant="h6">Lao động Máy hóa (C)</Typography>
                      <Box sx={{ 
                          p: 2, mt: 2, border: '1px dashed grey', borderRadius: 1, flexGrow: 1, 
                          overflowY: 'auto', 
                          background: (theme) => alpha(theme.palette.grey[500], 0.05), 
                          // Cài đặt font chung cho toàn bộ box
                          fontFamily: 'var(--font-inter)', 
                          '& h1, & h2, & h3, & h4, & h5, & h6': { margin: '0 0 8px 0', fontWeight: 600 }, 
                          '& p': { margin: '0 0 8px 0', lineHeight: 1.6 }, // Tăng line-height cho dễ đọc
                          '& li': { marginBottom: 4 }, 
                          // Áp dụng font monospace cho code
                          '& code': { 
                              fontFamily: 'var(--font-source-code-pro)', 
                              backgroundColor: (theme) => alpha(theme.palette.grey[500], 0.1), 
                              padding: '2px 4px', 
                              borderRadius: 4,
                              fontSize: '0.875rem'
                          }, 
                          '& pre': { 
                              fontFamily: 'var(--font-source-code-pro)',
                              backgroundColor: (theme) => alpha(theme.palette.grey[500], 0.1), 
                              padding: 8, 
                              borderRadius: 6, 
                              overflowX: 'auto' 
                          } 
                      }}>
                        {isLoading ? (<CircularProgress />) : (<ReactMarkdown>{formatAiResponse(aiResponse) || 'Kết quả từ AI sẽ hiển thị ở đây...'}</ReactMarkdown>)}
                      </Box>
                     <Box sx={{ mt: 2, display: 'flex', alignItems: 'center', gap: 2 }}>
                      <Button variant="contained" color="primary" onClick={() => { if (!hasCalledApi) { handleApiCall(); setHasCalledApi(true); } }} disabled={isLoading || hasCalledApi}>Thực thi AI</Button>
                    </Box>
                    {error && <Alert severity="error" sx={{mt: 2}}>{error}</Alert>}
                  </Paper>
                </Grid>
              </Grid>
              
              {Number(productivityFactor) > 0 && (
                <Paper variant='outlined' sx={{ mt: 4, p: 2, borderColor: 'success.main', background: (theme) => alpha(theme.palette.success.main, 0.1)}}>
                  <Typography variant="h6" component="div"><Typography component="span" fontWeight="bold">Kết luận:</Typography> Lao động máy hóa (AI) hiệu quả hơn <Typography component="span" fontWeight="bold">{productivityFactor.toFixed(1)} lần</Typography>.</Typography>
                  <Typography>Điều này chứng minh AI (C) là công cụ cách mạng giúp <Typography component="span" fontWeight="bold">giảm mạnh "Thời gian lao động xã hội cần thiết"</Typography>.</Typography>
                </Paper>
              )}
          </Container>
        </Box>
      </Box>
    </AppTheme>
  );
}

===== .\src\app\simulation\page.tsx =====
// src/app/simulation/page.tsx
"use client";
import * as React from 'react';
import { alpha } from '@mui/material/styles';
import { Box, Slider, Typography, Paper, Stack, CssBaseline } from '@mui/material';
import AppNavbar from '@/components/AppNavbar';
import Header from '@/components/Header';
import MainGrid from '@/components/MainGrid';
import SideMenu from '@/components/SideMenu';
import AppTheme from '@/theme/AppTheme';
import {
  chartsCustomizations,
  dataGridCustomizations,
  datePickersCustomizations,
  treeViewCustomizations,
} from '@/theme/customizations';

const V_BASE = 1000;
const C_BASE = 800;

const xThemeComponents = {
  ...chartsCustomizations,
  ...dataGridCustomizations,
  ...datePickersCustomizations,
  ...treeViewCustomizations,
};

export default function SimulationPage(props: { disableCustomTheme?: boolean }) {
  const [aiLevel, setAiLevel] = React.useState(0);

  const metrics = React.useMemo(() => {
    const mRate = 1.0 + (aiLevel / 100) * 0.8;
    const c = C_BASE + (aiLevel * 30);
    const v = V_BASE - (aiLevel * 8);
    const m = v * mRate;
    const pRate = (m / (c + v)) * 100;
    const organicComp = c / v;
    const unemploymentRate = ((V_BASE - v) / V_BASE) * 100;
    const gini = m / (m + v);

    return {
      c: Math.round(c), v: Math.round(v), m: Math.round(m),
      pRate: parseFloat(pRate.toFixed(2)), organicComp: parseFloat(organicComp.toFixed(2)),
      unemploymentRate: parseFloat(unemploymentRate.toFixed(2)), gini: parseFloat(gini.toFixed(2)),
    };
  }, [aiLevel]);
  
  const trendChartData = React.useMemo(() => {
    return Array.from({ length: 101 }, (_, i) => {
        const mRate = 1.0 + (i / 100) * 0.8;
        const c = C_BASE + (i * 30);
        const v = V_BASE - (i * 8);
        const m = v * mRate;
        const pRate = (m / (c + v)) * 100;
        const organicComp = c / v;
        return { aiLevel: i, pRate: parseFloat(pRate.toFixed(2)), organicComp: parseFloat(organicComp.toFixed(2)) };
    });
  }, []);

  // --- TẠO DỮ LIỆU CHO CÁC BIỂU ĐỒ NÂNG CAO ---
  const { profitCompositionData, laborSkillData, capitalConcentrationData, wagePressureData } = React.useMemo(() => {
    // Dữ liệu cho biểu đồ Phân rã Lợi nhuận
    const profitData = Array.from({ length: 101 }, (_, i) => {
      const c = C_BASE + (i * 30);
      const v = V_BASE - (i * 8);
      const mRate = 1.0 + (i / 100) * 1.5; 
      const m = v * mRate;
      const basePRate = (v * 1.0 / (c + v)) * 100;
      const exploitationBoost = ((m - v) / (c + v)) * 100;
      const cheapeningCBoost = (i / 100) * 5;
      return { aiLevel: i, basePRate, exploitationBoost, cheapeningCBoost };
    });

    // Dữ liệu cho biểu đồ Phân cực Kỹ năng
    const skillData = Array.from({ length: 101 }, (_, i) => {
      const aiFactor = i / 100;
      const midSkill = 60 - (aiFactor * 50);
      const highSkill = 15 + (aiFactor * 30);
      const lowSkill = 100 - midSkill - highSkill;
      return { aiLevel: i, highSkill, midSkill, lowSkill };
    });

    // Dữ liệu cho biểu đồ Tập trung Tư bản
    const concentrationData = Array.from({ length: 101 }, (_, i) => {
        const aiFactor = i / 100;
        const largeCapital = 30 + (aiFactor * 65); // Bắt đầu 30%, tăng lên 95%
        const smallCapital = 100 - largeCapital;
        return { aiLevel: i, largeCapital, smallCapital };
    });

    // Dữ liệu cho biểu đồ Sức ép Tiền lương
    const wageData = Array.from({ length: 11 }, (_, i) => {
        const aiLevel = i * 10;
        const v = V_BASE - (aiLevel * 8);
        const unemployment = parseFloat((((V_BASE - v) / V_BASE) * 100).toFixed(2));
        const avgWage = 50 - (unemployment * 0.4); // Giả định lương giảm 0.4$ cho mỗi % thất nghiệp
        return { aiLevel, unemployment, avgWage: parseFloat(avgWage.toFixed(2)) };
    });

    return { 
        profitCompositionData: profitData, 
        laborSkillData: skillData,
        capitalConcentrationData: concentrationData,
        wagePressureData: wageData
    };
  }, []);

  const handleSliderChange = (event: Event, newValue: number | number[]) => {
    setAiLevel(newValue as number);
  };

  return (
    <AppTheme {...props} themeComponents={xThemeComponents}>
      <CssBaseline enableColorScheme />
      <Box sx={{ display: 'flex' }}>
        <SideMenu />
        <AppNavbar />
        {/* --- REMOVED: Bỏ thuộc tính backgroundColor để theme gốc quyết định --- */}
        <Box component="main" sx={(theme) => ({ flexGrow: 1, overflow: 'auto' })}>
          <Stack spacing={2} sx={{ alignItems: 'center', mx: 3, pb: 5, mt: { xs: 8, md: 0 } }}>
            <Header />
            <Box sx={{ width: '100%', maxWidth: { sm: '100%', md: '1700px' } }}>
                <Typography variant="h3" component="h1" fontWeight="bold">Trạm Mô phỏng Động học Tư bản</Typography>
                <Typography color="text.secondary">Quan sát sự vận động của các quy luật kinh tế khi mức độ ứng dụng AI thay đổi.</Typography>
            </Box>
            <Paper variant="outlined" sx={{ p: 2, width: '100%', maxWidth: { sm: '100%', md: '1700px' }, mt: 2 }}>
              <Typography gutterBottom id="ai-slider-label" component="div" fontWeight="bold">
                Điều chỉnh Mức độ Ứng dụng AI ({aiLevel}%)
              </Typography>
              <Slider value={aiLevel} onChange={handleSliderChange} aria-labelledby="ai-slider-label" valueLabelDisplay="auto" step={1} min={0} max={100} />
            </Paper>
            <MainGrid 
              metrics={metrics} 
              trendChartData={trendChartData} 
              aiLevel={aiLevel} 
              profitCompositionData={profitCompositionData}
              laborSkillData={laborSkillData}
              capitalConcentrationData={capitalConcentrationData}
              wagePressureData={wagePressureData}
            />
          </Stack>
        </Box>
      </Box>
    </AppTheme>
  );
}

===== .\src\app\visualize\page.tsx =====
// src/app/visualize/page.tsx
"use client";
import React, { useState, useEffect } from 'react';
import { useRouter } from 'next/navigation';
import { Container, Grid, Paper, Typography, Box, CssBaseline, Button, Stack, Divider, Alert, Card } from '@mui/material';
import { BarChart } from '@mui/x-charts';
import ArrowBackIcon from '@mui/icons-material/ArrowBack';
import ModelTrainingIcon from '@mui/icons-material/ModelTraining';
import ReactMarkdown from 'react-markdown';

import AppTheme from '@/theme/AppTheme';
import AppNavbar from '@/components/AppNavbar';
import SideMenu from '@/components/SideMenu';
import Header from '@/components/Header';
import Loading from '@/app/loading'; 
import { chartsCustomizations } from '@/theme/customizations';
import KeyMetricsTrendChart from '@/components/KeyMetricsTrendChart';
import FutureScenarioChart from '@/components/FutureScenarioChart';

const xThemeComponents = { ...chartsCustomizations };

interface AnalysisResult { c: number; v: number; m: number; organicComp: number; pRate: number; }
interface VisualizationData { before: AnalysisResult; after: AnalysisResult; analysis: string; }
interface ChartData { type: string; title: string; description?: string; data: any; }
interface AISuggestion { adviceText: string; suggestedCharts: ChartData[]; }
interface FinalPayload { analysisData: VisualizationData; suggestionData?: AISuggestion; } 

export default function VisualizePage() {
    const [payload, setPayload] = useState<FinalPayload | null>(null);
    const [originChatId, setOriginChatId] = useState<string | null>(null);
    const router = useRouter();

    useEffect(() => {
        const storedPayload = sessionStorage.getItem('visualizationPayload');
        if (storedPayload) {
            try {
                const { data, chatId } = JSON.parse(storedPayload);
                if (data && data.analysisData) {
                    setPayload(data);
                    setOriginChatId(chatId);
                } else router.push('/chat');
            } catch (error) {
                console.error("Failed to parse payload:", error);
                router.push('/chat');
            }
        } else router.push('/chat');
    }, [router]);

    if (!payload) return <Loading />;

    const { analysisData, suggestionData } = payload;
    
    const barChartData = [
        { type: 'Trước AI', C: analysisData.before.c, V: analysisData.before.v, M: analysisData.before.m },
        { type: 'Sau AI', C: analysisData.after.c, V: analysisData.after.v, M: analysisData.after.m },
    ];
    
    const keyMetricsData = [
        { metric: 'Cấu tạo hữu cơ (c/v)', before: analysisData.before.organicComp, after: analysisData.after.organicComp, unit: '' },
        { metric: "Tỷ suất Lợi nhuận (p')", before: analysisData.before.pRate, after: analysisData.after.pRate, unit: '%' },
    ];

    return (
        <AppTheme themeComponents={xThemeComponents}>
            <CssBaseline enableColorScheme />
            <Box sx={{ display: 'flex', minHeight: '100vh' }}>
                <SideMenu /> <AppNavbar />
                <Box component="main" sx={{ flexGrow: 1, p: 3, display: 'flex', flexDirection: 'column' }}>
                    <Header />
                    <Container maxWidth="xl" sx={{ flexGrow: 1, mt: { xs: 8, md: 2 } }}>
                        {originChatId && <Button startIcon={<ArrowBackIcon />} onClick={() => router.push(`/chat/${originChatId}`)} sx={{ mb: 2 }}>Quay lại Cuộc trò chuyện</Button>}
                        <Typography variant="h4" component="h1" gutterBottom>Dashboard Phân tích & Tầm nhìn Chiến lược</Typography>
                        
                        <Grid container spacing={3}>
                            <Grid size={12}><Divider>PHÂN TÍCH HIỆN TRẠNG (DỮ LIỆU CỦA BẠN)</Divider></Grid>
                            <Grid size={{ xs: 12, lg: 6 }}><Paper variant="outlined" sx={{ p: 2, height: '100%' }}><Typography variant="h6" gutterBottom>So sánh Cấu trúc Tư bản (C-V-M)</Typography><Box sx={{ height: 300 }}><BarChart dataset={barChartData} xAxis={[{ scaleType: 'band', dataKey: 'type' }]} series={[{ dataKey: 'C', label: 'Tư bản Bất biến' }, { dataKey: 'V', label: 'Tư bản Khả biến' }, { dataKey: 'M', label: 'Giá trị Thặng dư' }]} /></Box></Paper></Grid>
                            <Grid size={{ xs: 12, lg: 6 }}><KeyMetricsTrendChart data={keyMetricsData} /></Grid>

                            <Grid size={12}><Divider sx={{mt: 3}}>LỘ TRÌNH TƯƠNG LAI TỪ TRỢ LÝ AI</Divider></Grid>
                            
                            {/* --- BẮT ĐẦU THAY ĐỔI --- */}
                            
                            {/* KHU VỰC 1: "THƯ NGỎ" FULL-WIDTH */}
                            <Grid size={12}>
                                {suggestionData?.adviceText ? (
                                    <Card variant="outlined" sx={{ p: 2.5 }}>
                                        <Stack direction="row" spacing={1} alignItems="center" mb={2}><ModelTrainingIcon color="primary"/><Typography variant="h6">Thư ngỏ từ Người bạn Chiến lược</Typography></Stack>
                                        <ReactMarkdown components={{
                                            h3: ({node, ...props}) => <Typography variant="h6" mt={3} mb={1} {...props}/>,
                                            p: ({node, ...props}) => <Typography variant="body1" paragraph {...props}/>,
                                            li: ({node, ...props}) => <li style={{fontSize: '1rem', marginLeft: '20px'}}><Typography variant="body1" component="span" {...props} /></li>,
                                            strong: ({node, ...props}) => <strong style={{color: 'primary.main'}} {...props} />,
                                        }}>
                                            {suggestionData.adviceText}
                                        </ReactMarkdown>
                                    </Card>
                                ) : (
                                    <Alert severity="info">AI đang xử lý hoặc không có dữ liệu tư vấn.</Alert>
                                )}
                            </Grid>

                            {/* KHU VỰC 2: CÁC BIỂU ĐỒ MINH HỌA CHO LỘ TRÌNH */}
                            {suggestionData?.suggestedCharts && suggestionData.suggestedCharts.length > 0 && (
                                <Grid size={12}>
                                    <Typography variant="h6" sx={{ mt: 3, mb: 2}}>Trực quan hóa Lộ trình Tương lai</Typography>
                                    <Grid container spacing={3}>
                                        {suggestionData.suggestedCharts.map((chart, index) => (
                                            <Grid size={{ xs: 12, md: 6, lg: 4 }} key={index}>
                                                <FutureScenarioChart chartData={chart} />
                                            </Grid>
                                        ))}
                                    </Grid>
                                </Grid>
                            )}

                            {/* --- KẾT THÚC THAY ĐỔI --- */}
                        </Grid>
                    </Container>
                </Box>
            </Box>
        </AppTheme>
    );
}

===== .\src\components\AnalysisPanel.tsx =====
// src/components/AnalysisPanel.tsx
"use client";
import React, { useState, useEffect } from 'react';
import { Box, Paper, Typography, IconButton, Button, Select, MenuItem, FormControl, InputLabel, Divider, Stack, CircularProgress } from '@mui/material';
import CloseIcon from '@mui/icons-material/Close';
import OpenInNewIcon from '@mui/icons-material/OpenInNew';
import InfoOutlinedIcon from '@mui/icons-material/InfoOutlined';
import { BarChart } from '@mui/x-charts/BarChart';
import { AnalysisData } from '../app/chat/[chatId]/page';

interface AnalysisPanelProps {
  analyses: AnalysisData[];
  currentAnalysis?: AnalysisData | null;
  onSelectAnalysis: (id: string) => void;
  onNavigateToDashboard: (data: AnalysisData) => void;
  isOpen: boolean;
  onClose: () => void;
}

const StatDisplay = ({ title, value }: { title: string, value: string | number }) => (
    <Paper variant="outlined" sx={{ p: 1.5, textAlign: 'center', height: '100%', width: '100%' }}>
        <Typography variant="caption" color="text.secondary" sx={{ display: 'block', mb: 0.5 }}>{title}</Typography>
        <Typography variant="h6" fontWeight="bold" sx={{ lineHeight: 1.2 }}>{value}</Typography>
    </Paper>
);

const EmptyState = ({ onClose }: { onClose: () => void }) => (
    <Paper variant="outlined" sx={{ p: 2, display: 'flex', flexDirection: 'column', height: '100%', width: '100%' }}>
        <Stack direction="row" justifyContent="space-between" alignItems="center" mb={2}>
            <Typography variant="h6" component="h2">Bảng điều khiển Phân tích</Typography>
            <IconButton onClick={onClose} size="small"><CloseIcon /></IconButton>
        </Stack>
        <Stack flexGrow={1} justifyContent="center" alignItems="center" spacing={2} sx={{ textAlign: 'center', color: 'text.secondary' }}>
            <InfoOutlinedIcon sx={{ fontSize: 40 }} />
            <Typography variant="subtitle1" fontWeight="medium">Chưa có phân tích nào</Typography>
            <Typography variant="body2">Đây là nơi các phân tích trực quan sẽ xuất hiện.</Typography>
             <Typography variant="body2">Hãy thử yêu cầu chatbot phân tích một kịch bản và đề xuất vẽ biểu đồ!</Typography>
        </Stack>
    </Paper>
);

export default function AnalysisPanel({ analyses, currentAnalysis, onSelectAnalysis, onNavigateToDashboard, isOpen, onClose }: AnalysisPanelProps) {
    
    const [canRenderChart, setCanRenderChart] = useState(false);
    const TRANSITION_DURATION = 300; 

    useEffect(() => {
        if (isOpen) {
            const timer = setTimeout(() => { setCanRenderChart(true); }, TRANSITION_DURATION);
            return () => clearTimeout(timer);
        } else {
            setCanRenderChart(false);
        }
    }, [isOpen]);

    if (!isOpen || !analyses || analyses.length === 0) {
        return <EmptyState onClose={onClose} />;
    }

    if (!currentAnalysis) {
        return <EmptyState onClose={onClose} />;
    }

    const barChartData = [
        { type: 'Trước AI', C: currentAnalysis.before.c, V: currentAnalysis.before.v },
        { type: 'Sau AI', C: currentAnalysis.after.c, V: currentAnalysis.after.v },
    ];

    return (
        <Paper variant="outlined" sx={{ p: 2, display: 'flex', flexDirection: 'column', height: '100%', width: '100%', overflowY: 'auto' }}>
            <Stack direction="row" justifyContent="space-between" alignItems="center" mb={2}>
                <Typography variant="h6" component="h2" noWrap>Bảng Phân tích</Typography>
                <IconButton onClick={onClose} size="small"><CloseIcon /></IconButton>
            </Stack>

            <FormControl fullWidth variant="outlined" size="small">
                <Typography variant="subtitle2" sx={{ mb: 1, fontWeight: 600, color: 'text.primary', letterSpacing: '0.5px', pl: 0.5 }}>
                    Phiên bản Phân tích
                </Typography>
                <Select value={currentAnalysis.id} onChange={(e) => onSelectAnalysis(e.target.value)} label="Phiên bản Phân tích">
                    {analyses.map(a => (<MenuItem key={a.id} value={a.id}>{a.title}</MenuItem>))}
                </Select>
            </FormControl>

            <Divider sx={{ my: 2 }} />

            <Typography variant="subtitle1" fontWeight="bold" gutterBottom>Tóm tắt Kết quả</Typography>
            
            {/* --- NÂNG CẤP TẠI ĐÂY --- */}
            <Box sx={{ display: 'flex', gap: 2, mb: 3, width: '100%' }}>
                <Box sx={{ flex: 1, minWidth: 0 }}>
                    <StatDisplay title="Cấu tạo hữu cơ (c/v)" value={`${currentAnalysis.before.organicComp.toFixed(2)} → ${currentAnalysis.after.organicComp.toFixed(2)}`} />
                </Box>
                <Box sx={{ flex: 1, minWidth: 0 }}>
                    <StatDisplay title="Tỷ suất lợi nhuận (p')" value={`${currentAnalysis.before.pRate.toFixed(1)}% → ${currentAnalysis.after.pRate.toFixed(1)}%`} />
                </Box>
            </Box>

            <Typography variant="subtitle1" fontWeight="bold" gutterBottom>Biểu đồ Cơ cấu Tư bản (C & V)</Typography>
            <Box sx={{ height: 250, width: '100%', mb: 2, display: 'flex', alignItems: 'center', justifyContent: 'center' }}>
                {canRenderChart ? (
                    <BarChart
                        dataset={barChartData}
                        xAxis={[{ scaleType: 'band', dataKey: 'type' }]}
                        series={[ { dataKey: 'C', label: 'Tư bản Bất biến' }, { dataKey: 'V', label: 'Tư bản Khả biến' } ]}
                        margin={{ top: 20, bottom: 30, left: 40, right: 10 }} 
                        grid={{ horizontal: true }}
                        hideLegend
                    />
                ) : (
                    <CircularProgress size={30} /> 
                )}
            </Box>
            
            <Box sx={{ mt: 'auto', flexShrink: 0, width: '100%' }}>
                <Button variant="contained" fullWidth startIcon={<OpenInNewIcon />} onClick={() => onNavigateToDashboard(currentAnalysis)} sx={{ mt: 2 }}>
                    Xem Dashboard Đầy đủ
                </Button>
            </Box>
        </Paper>
    );
}

===== .\src\components\AppNavbar.tsx =====
"use client";

import * as React from 'react';
import { styled } from '@mui/material/styles';
import AppBar from '@mui/material/AppBar';
import Box from '@mui/material/Box';
import Stack from '@mui/material/Stack';
import MuiToolbar from '@mui/material/Toolbar';
import { tabsClasses } from '@mui/material/Tabs';
import Typography from '@mui/material/Typography';
import MenuRoundedIcon from '@mui/icons-material/MenuRounded';
import DashboardRoundedIcon from '@mui/icons-material/DashboardRounded';
import SideMenuMobile from './SideMenuMobile';
import MenuButton from './MenuButton';
import ColorModeIconDropdown from '.././theme/ColorModeIconDropdown';

const Toolbar = styled(MuiToolbar)({
  width: '100%',
  padding: '12px',
  display: 'flex',
  flexDirection: 'column',
  alignItems: 'start',
  justifyContent: 'center',
  gap: '12px',
  flexShrink: 0,
  [`& ${tabsClasses.flexContainer}`]: {
    gap: '8px',
    p: '8px',
    pb: 0,
  },
});

export default function AppNavbar() {
  const [open, setOpen] = React.useState(false);

  const toggleDrawer = (newOpen: boolean) => () => {
    setOpen(newOpen);
  };

  return (
    <AppBar
      position="fixed"
      sx={{
        display: { xs: 'auto', md: 'none' },
        boxShadow: 0,
        bgcolor: 'background.paper',
        backgroundImage: 'none',
        borderBottom: '1px solid',
        borderColor: 'divider',
        top: 'var(--template-frame-height, 0px)',
      }}
    >
      <Toolbar variant="regular">
        <Stack
          direction="row"
          sx={{
            alignItems: 'center',
            flexGrow: 1,
            width: '100%',
            gap: 1,
          }}
        >
          <Stack
            direction="row"
            spacing={1}
            sx={{ justifyContent: 'center', mr: 'auto' }}
          >
            <CustomIcon />
            <Typography variant="h4" component="h1" sx={{ color: 'text.primary' }}>
              Dashboard
            </Typography>
          </Stack>
          <ColorModeIconDropdown />
          <MenuButton aria-label="menu" onClick={toggleDrawer(true)}>
            <MenuRoundedIcon />
          </MenuButton>
          <SideMenuMobile open={open} toggleDrawer={toggleDrawer} />
        </Stack>
      </Toolbar>
    </AppBar>
  );
}

export function CustomIcon() {
  return (
    <Box
      sx={{
        width: '1.5rem',
        height: '1.5rem',
        bgcolor: 'black',
        borderRadius: '999px',
        display: 'flex',
        justifyContent: 'center',
        alignItems: 'center',
        alignSelf: 'center',
        backgroundImage:
          'linear-gradient(135deg, hsl(210, 98%, 60%) 0%, hsl(210, 100%, 35%) 100%)',
        color: 'hsla(210, 100%, 95%, 0.9)',
        border: '1px solid',
        borderColor: 'hsl(210, 100%, 55%)',
        boxShadow: 'inset 0 2px 5px rgba(255, 255, 255, 0.3)',
      }}
    >
      <DashboardRoundedIcon color="inherit" sx={{ fontSize: '1rem' }} />
    </Box>
  );
}


===== .\src\components\CapitalConcentrationChart.tsx =====
// src/components/CapitalConcentrationChart.tsx
"use client";
import * as React from 'react';
import Card from '@mui/material/Card';
import CardContent from '@mui/material/CardContent';
import Typography from '@mui/material/Typography';
import { LineChart } from '@mui/x-charts/LineChart';

interface CapitalConcentrationChartProps {
  data: any[];
}

export default function CapitalConcentrationChart({ data }: CapitalConcentrationChartProps) {
  return (
    <Card variant="outlined" sx={{ width: '100%', height: '100%' }}>
      <CardContent>
        <Typography component="h2" variant="subtitle2" gutterBottom>
          Xu Hướng Tương Lai: Sự Tập Trung & Tích Tụ Tư Bản
        </Typography>
        <Typography variant="caption" sx={{ color: 'text.secondary' }}>
          AI làm tăng rào cản gia nhập, khiến các doanh nghiệp nhỏ bị thâu tóm.
        </Typography>
        <LineChart
          dataset={data}
          xAxis={[{ dataKey: 'aiLevel', label: 'Mức độ AI (%)' }]}
          series={[
            { dataKey: 'largeCapital', label: 'Thị phần Tư bản lớn', area: true, stack: 'total', showMark: false, color: '#d32f2f' },
            { dataKey: 'smallCapital', label: 'Thị phần Tư bản nhỏ', area: true, stack: 'total', showMark: false, color: '#1976d2' },
          ]}
          yAxis={[{
            min: 0,
            max: 100,
            // --- CẢI TIẾN TẠI ĐÂY ---
            valueFormatter: (value: number | null) => (value === null ? '' : `${value}%`),
          }]}
          height={300}
          margin={{ left: 50, right: 20, top: 40, bottom: 40 }}
          grid={{ horizontal: true }}
        />
      </CardContent>
    </Card>
  );
}

===== .\src\components\ChatInput.tsx =====
// src/components/ChatInput.tsx
"use client";
import React from 'react';
import { Stack, TextField, IconButton } from '@mui/material';
import SendRoundedIcon from '@mui/icons-material/SendRounded';

interface ChatInputProps {
  input: string;
  setInput: (value: string) => void;
  handleSend: () => void;
  isLoading: boolean;
}

export default function ChatInput({ input, setInput, handleSend, isLoading }: ChatInputProps) {
  return (
    // alignItems: 'flex-end' để nút Gửi luôn thẳng hàng với dòng cuối của text
    <Stack direction="row" spacing={1} sx={{ mt: 1, alignItems: 'flex-end' }}>
      <TextField
        fullWidth
        variant="outlined"
        placeholder="Đặt câu hỏi hoặc mô tả kịch bản..."
        value={input}
        onChange={(e) => setInput(e.target.value)}
        onKeyPress={(e) => {
          if (e.key === 'Enter' && !e.shiftKey) {
            e.preventDefault();
            handleSend();
          }
        }}
        disabled={isLoading}
        // Đây là 2 prop cần thiết để nó hoạt động
        multiline
        maxRows={3}
        sx={{
          // Thuộc tính này để xử lý các chuỗi ký tự dài không có dấu cách
          // đảm bảo không tràn theo chiều ngang.
          '& .MuiInputBase-input': {
            overflowWrap: 'break-word',
          },
        }}
      />
      <IconButton
        color="primary"
        onClick={handleSend}
        disabled={isLoading || !input.trim()}
        sx={{
            bgcolor: 'primary.main',
            color: 'white',
            '&:hover': { bgcolor: 'primary.dark' },
            flexShrink: 0, // Ngăn nút bị co lại
        }}
      >
        <SendRoundedIcon />
      </IconButton>
    </Stack>
  );
}

===== .\src\components\ChatMessageList.tsx =====
// src/components/ChatMessageList.tsx
"use client";
import React from 'react';
import { Box, Paper, Typography, Avatar, Stack, CircularProgress, Button } from '@mui/material';
import { deepPurple, grey } from '@mui/material/colors';
import ReactMarkdown from 'react-markdown';
import SmartToyOutlinedIcon from '@mui/icons-material/SmartToyOutlined';
import PersonOutlineOutlinedIcon from '@mui/icons-material/PersonOutlineOutlined';
import AnalyticsIcon from '@mui/icons-material/Analytics';
import { Message } from '../app/chat/[chatId]/page';
import ChatWelcome from './ChatWelcome';

interface ChatMessageListProps {
  messages: Message[];
  isLoading: boolean;
  isVisualizing: boolean; // NEW: Prop để biết có đang visualize không
  onVisualize: (messageIndex: number) => void;
  onExampleClick: (prompt: string) => void;
}

const triggerPhrase = "bạn có muốn tôi vẽ biểu đồ trực quan cho phân tích này không?";

export default function ChatMessageList({ messages, isLoading, isVisualizing, onVisualize, onExampleClick }: ChatMessageListProps) {
  
  if (messages.length === 0 && !isLoading) {
    return <ChatWelcome onExampleClick={onExampleClick} />;
  }

  return (
    <Box sx={{ flexGrow: 1, overflowY: 'auto', pr: 1 }}>
      <Stack spacing={2}>
        {messages.map((msg, index) => {
          const isUser = msg.role === 'user';
          // Chỉ hiển thị nút khi không có tác vụ loading nào khác đang chạy
          const showVisualizeButton = msg.role === 'assistant' && msg.content.toLowerCase().includes(triggerPhrase);

          return (
            <Stack key={index} direction="row" spacing={2} alignItems="flex-start" sx={{ justifyContent: isUser ? 'flex-end' : 'flex-start' }}>
              {!isUser && (
                <Avatar sx={{ bgcolor: deepPurple[500], width: 32, height: 32 }}><SmartToyOutlinedIcon fontSize="small" /></Avatar>
              )}
              <Box sx={{ maxWidth: '80%' }}>
                <Paper
                  variant="outlined"
                  sx={{
                    p: 1.5,
                    bgcolor: isUser ? 'primary.main' : 'background.default',
                    color: isUser ? 'primary.contrastText' : 'text.primary',
                    borderRadius: isUser ? '16px 16px 4px 16px' : '4px 16px 16px 16px',
                  }}
                >
                  <ReactMarkdown components={{ p: ({ node, ...props }) => <Typography variant="body2" {...props} />, li: ({ node, ...props }) => <li style={{ fontSize: '0.875rem' }} {...props} /> }}>
                    {msg.content}
                  </ReactMarkdown>
                </Paper>
                {showVisualizeButton && (
                   <Button
                      size="small"
                      variant="outlined"
                      startIcon={<AnalyticsIcon />}
                      onClick={() => onVisualize(index)}
                      sx={{ mt: 1, textTransform: 'none' }}
                      // --- FIX: Vô hiệu hóa nút khi đang xử lý visualize ---
                      disabled={isVisualizing} 
                   >
                       {isVisualizing ? 'Đang xử lý...' : 'Trực quan hóa Phân tích'}
                   </Button>
                )}
              </Box>
              {isUser && (
                <Avatar sx={{ bgcolor: grey[300], color: grey[800], width: 32, height: 32 }}><PersonOutlineOutlinedIcon fontSize="small" /></Avatar>
              )}
            </Stack>
          );
        })}
        {isLoading && (
          <Stack direction="row" spacing={2} alignItems="center">
            <Avatar sx={{ bgcolor: deepPurple[500], width: 32, height: 32 }}><SmartToyOutlinedIcon fontSize="small" /></Avatar>
            <Stack direction="row" spacing={1} alignItems="center">
                <CircularProgress size={20} />
                <Typography variant="body2" color="text.secondary">AI đang trả lời...</Typography>
            </Stack>
          </Stack>
        )}
      </Stack>
    </Box>
  );
}

===== .\src\components\ChatWelcome.tsx =====
// src/components/ChatWelcome.tsx
"use client";
import React from 'react';
import { Box, Typography, Paper, Grid, Button, Stack } from '@mui/material';
import LightbulbOutlinedIcon from '@mui/icons-material/LightbulbOutlined';

interface ChatWelcomeProps {
  onExampleClick: (prompt: string) => void;
}

const examplePrompts = [
  {
    title: "So sánh Đơn giản",
    prompt: "So sánh chi phí sản xuất một bài viết trước và sau khi dùng AI."
  },
  {
    title: "Phân tích Kịch bản",
    prompt: "Phân tích kịch bản một nhà máy thay thế 100 công nhân bằng 10 robot AI."
  },
  {
    title: "Hỏi về Lý thuyết",
    prompt: "AI làm tăng cấu tạo hữu cơ của tư bản như thế nào?"
  },
  {
    title: "Dự báo Tương lai",
    prompt: "Tác động lâu dài của AI đến tỷ suất lợi nhuận là gì?"
  }
];

export default function ChatWelcome({ onExampleClick }: ChatWelcomeProps) {
  return (
    <Box 
      sx={{
        flexGrow: 1,
        display: 'flex',
        justifyContent: 'center',
        alignItems: 'center',
        height: '100%',
        px: 2
      }}
    >
      <Stack spacing={3} alignItems="center" sx={{ maxWidth: '700px', textAlign: 'center' }}>
        <LightbulbOutlinedIcon sx={{ fontSize: 48, color: 'primary.main' }} />
        <Typography variant="h4" component="h1" fontWeight="bold">
          Trợ lý Phân tích Kinh tế Chính trị
        </Typography>
        <Typography color="text.secondary">
          Sẵn sàng phân tích tác động của AI theo lăng kính Mác-Lênin. 
          Bạn có thể bắt đầu bằng cách đặt một câu hỏi hoặc thử một trong các ví dụ dưới đây.
        </Typography>
        
        <Paper variant="outlined" sx={{ p: { xs: 1.5, md: 2 }, width: '100%', mt: 2 }}>
          <Typography variant="subtitle2" sx={{ mb: 2, fontWeight: 'bold' }}>Gợi ý cho bạn</Typography>
          <Grid container spacing={2}>
            {examplePrompts.map((item) => (
              <Grid size={{xs:12, md:6}} key={item.title}>
                <Button
                  fullWidth
                  variant="outlined"
                  onClick={() => onExampleClick(item.prompt)}
                  sx={{
                    p: 1.5,
                    height: '100%',
                    textTransform: 'none',
                    textAlign: 'left',
                    display: 'flex',
                    flexDirection: 'column',
                    alignItems: 'flex-start',
                    justifyContent: 'flex-start'
                  }}
                >
                  <Typography fontWeight="medium" sx={{ fontSize: '0.875rem' }}>{item.title}</Typography>
                  <Typography variant="caption" color="text.secondary" sx={{ whiteSpace: 'normal' }}>
                    {item.prompt}
                  </Typography>
                </Button>
              </Grid>
            ))}
          </Grid>
        </Paper>
      </Stack>
    </Box>
  );
}

===== .\src\components\FutureScenarioChart.tsx =====
// src/components/FutureScenarioChart.tsx
"use client";
import React from 'react';
import { Card, CardContent, Typography, Box } from '@mui/material';
import { BarChart, PieChart } from '@mui/x-charts';

// Một component đa năng để render các biểu đồ tương lai
export default function FutureScenarioChart({ chartData }: { chartData: any }) {
  if (!chartData || !chartData.data) return null;

  const renderChart = () => {
    switch (chartData.type) {
      case 'pie':
        return (
          <PieChart
            series={[{ data: chartData.data, innerRadius: 30, cx: '50%' }]}
            height={200}
            margin={{ top: 10, bottom: 10, left: 10, right: 10 }}
          />
        );
      case 'investment_bar':
        return (
           <BarChart
              dataset={chartData.data}
              xAxis={[{ scaleType: 'band', dataKey: 'category' }]}
              series={[{ dataKey: 'value', label: 'Giá trị Đầu tư' }]}
              height={200}
              margin={{ top: 40, bottom: 30, left: 50, right: 20 }}
            />
        );
      case 'value_distribution':
         const seriesKeys = Object.keys(chartData.data[0]).filter(key => key !== 'scenario');
         return (
            // --- SỬA LỖI TẠI ĐÂY ---
            <BarChart
                dataset={chartData.data}
                // Vì layout là 'horizontal', trục danh mục phải là yAxis.
                yAxis={[{ scaleType: 'band', dataKey: 'scenario' }]} 
                series={seriesKeys.map(key => ({ dataKey: key, stack: 'total', label: key }))}
                height={200}
                layout="horizontal" // Giữ nguyên vì chúng ta muốn biểu đồ ngang
                margin={{ top: 40, bottom: 30, left: 120, right: 20 }}
            />
            // --- KẾT THÚC SỬA LỖI ---
         );
      default:
        return <Typography>Loại biểu đồ không được hỗ trợ.</Typography>;
    }
  };

  return (
    <Card variant="outlined" sx={{ width: '100%', height: '100%' }}>
      <CardContent>
        <Typography component="h2" variant="h6" align="center" gutterBottom>
          {chartData.title}
        </Typography>
        {chartData.description && (
          <Typography variant="caption" align="center" display="block" color="text.secondary" sx={{ mb: 1 }}>
            {chartData.description}
          </Typography>
        )}
        <Box sx={{ width: '100%' }}>
          {renderChart()}
        </Box>
      </CardContent>
    </Card>
  );
}

===== .\src\components\FutureScenariosChart.tsx =====
// src/components/FutureScenariosChart.tsx
"use client";
import * as React from 'react';
import Card from '@mui/material/Card';
import CardContent from '@mui/material/CardContent';
import Typography from '@mui/material/Typography';
import { PieChart } from '@mui/x-charts/PieChart';
import { Stack, Box } from '@mui/material';

interface FutureScenariosChartProps {
  surplusValue: number; // Giá trị thặng dư (M)
}

// --- HỌC HỎI TỪ COMPONENT CÓ SẴN ---
// Tái sử dụng ý tưởng CustomLegend từ ValueStructurePieChart.tsx để tạo chú thích tùy chỉnh
// Điều này giúp tránh các lỗi TypeScript và đảm bảo giao diện nhất quán.
const CustomLegend = ({ data }: { data: Array<{ label: string, color: string }> }) => (
  <Stack spacing={1.5} mt={2} alignItems="center">
    {data.map((item) => (
      <Stack direction="row" key={item.label} spacing={1} alignItems="center" sx={{ width: '100%', justifyContent: 'center' }}>
        <Box sx={{ width: 12, height: 12, borderRadius: '50%', bgcolor: item.color, flexShrink: 0 }} />
        <Typography variant="caption" sx={{ textAlign: 'center' }}>{item.label}</Typography>
      </Stack>
    ))}
  </Stack>
);

export default function FutureScenariosChart({ surplusValue }: FutureScenariosChartProps) {
  // Bảng màu cho biểu đồ
  const colors = ['#4caf50', '#2196f3', '#ff9800', '#f44336'];

  // Kịch bản phân bổ giá trị thặng dư do AI tạo ra, thêm màu sắc
  const data = [
    { id: 0, value: surplusValue * 0.4, label: 'Phúc lợi & Đào tạo lại cho LĐ', color: colors[0] },
    { id: 1, value: surplusValue * 0.3, label: 'Giảm giá thành sản phẩm', color: colors[1] },
    { id: 2, value: surplusValue * 0.2, label: 'Đầu tư cho R&D công', color: colors[2] },
    { id: 3, value: surplusValue * 0.1, label: 'Tích lũy tư bản', color: colors[3] },
  ];

  return (
    <Card variant="outlined" sx={{ width: '100%', height: '100%' }}>
      <CardContent sx={{ display: 'flex', flexDirection: 'column', alignItems: 'center' }}>
        <Typography component="h2" variant="subtitle2" gutterBottom align="center">
          Kịch bản Tương lai: Tái phân bổ Thặng dư
        </Typography>
        <Typography variant="caption" sx={{ color: 'text.secondary', textAlign: 'center' }}>
          Gợi ý các phương án sử dụng giá trị thặng dư vì mục tiêu xã hội.
        </Typography>
        <Box sx={{ width: '100%', height: 200 }}>
          <PieChart
            colors={colors} // Sử dụng bảng màu đã định nghĩa
            series={[
              {
                data,
                innerRadius: 40,
                outerRadius: 80,
                paddingAngle: 2,
                cornerRadius: 5,
                highlightScope: { fade: 'global', highlight: 'item' },
                faded: { innerRadius: 30, additionalRadius: -30, color: 'gray' },
              },
            ]}
            height={200}
            // --- SỬA LỖI TẠI ĐÂY ---
            // Xóa bỏ hoàn toàn `slotProps` gây lỗi và chuyển sang dùng chú thích tùy chỉnh
            hideLegend={true} 
            margin={{ top: 20, bottom: 20, left: 20, right: 20 }}
          />
        </Box>
        {/* Sử dụng Chú thích tùy chỉnh, tương tự như component có sẵn trong dự án */}
        <CustomLegend data={data} />
      </CardContent>
    </Card>
  );
}

===== .\src\components\Header.tsx =====
import * as React from 'react';
import Stack from '@mui/material/Stack';
import NavbarBreadcrumbs from './NavbarBreadcrumbs';
import ColorModeIconDropdown from '.././theme/ColorModeIconDropdown';


export default function Header() {
  return (
    <Stack
      direction="row"
      sx={{
        display: { xs: 'none', md: 'flex' },
        width: '100%',
        alignItems: { xs: 'flex-start', md: 'center' },
        justifyContent: 'space-between',
        maxWidth: { sm: '100%', md: '1700px' },
        pt: 1.5,
      }}
      spacing={2}
    >
      <NavbarBreadcrumbs />
      <Stack direction="row" sx={{ gap: 1 }}>
        <ColorModeIconDropdown />
      </Stack>
    </Stack>
  );
}


===== .\src\components\KeyMetricsTrendChart.tsx =====
// src/components/KeyMetricsTrendChart.tsx
"use client";
import * as React from 'react';
import Card from '@mui/material/Card';
import CardContent from '@mui/material/CardContent';
import Typography from '@mui/material/Typography';
import { BarChart } from '@mui/x-charts/BarChart';
import { Box } from '@mui/material';

interface KeyMetricsTrendChartProps {
  data: {
    metric: string;
    before: number;
    after: number;
    unit: string;
  }[];
}

export default function KeyMetricsTrendChart({ data }: KeyMetricsTrendChartProps) {
  return (
    <Card variant="outlined" sx={{ width: '100%', height: '100%' }}>
      <CardContent>
        <Typography component="h2" variant="h6" gutterBottom>
          Chỉ số Cốt lõi: c/v & p'
        </Typography>
        <Typography variant="caption" sx={{ color: 'text.secondary' }}>
          Trực quan hóa sự thay đổi của các quy luật kinh tế.
        </Typography>
        <Box sx={{ height: 250, mt: 2 }}>
            <BarChart
                dataset={data}
                yAxis={[{ scaleType: 'band', dataKey: 'metric' }]}
                series={[
                    // --- SỬA LỖI TẠI ĐÂY ---
                    { 
                        dataKey: 'before', 
                        label: 'Trước AI', 
                        valueFormatter: (value: number | null, { dataIndex }) => {
                            if (value === null) return '';
                            return `${value.toFixed(2)}${data[dataIndex].unit}`;
                        } 
                    },
                    { 
                        dataKey: 'after', 
                        label: 'Sau AI', 
                        valueFormatter: (value: number | null, { dataIndex }) => {
                            if (value === null) return '';
                            return `${value.toFixed(2)}${data[dataIndex].unit}`;
                        }
                    },
                    // --- KẾT THÚC SỬA LỖI ---
                ]}
                layout="horizontal"
                margin={{ left: 150, right: 20, top: 40, bottom: 30 }}
                grid={{ vertical: true }}
            />
        </Box>
      </CardContent>
    </Card>
  );
}

===== .\src\components\LaborSkillChart.tsx =====
// src/components/LaborSkillChart.tsx
"use client";
import * as React from 'react';
import Card from '@mui/material/Card';
import CardContent from '@mui/material/CardContent';
import Typography from '@mui/material/Typography';
import { LineChart } from '@mui/x-charts/LineChart';

interface LaborSkillChartProps {
  data: any[];
}

export default function LaborSkillChart({ data }: LaborSkillChartProps) {
  return (
    <Card variant="outlined" sx={{ width: '100%', height: '100%' }}>
      <CardContent>
        <Typography component="h2" variant="subtitle2" gutterBottom>
          Xu Hướng Tương Lai: Phân Cực Kỹ Năng Lao Động
        </Typography>
        <Typography variant="caption" sx={{ color: 'text.secondary' }}>
          AI làm "rỗng" tầng lớp lao động kỹ năng trung bình.
        </Typography>
        <LineChart
          dataset={data}
          xAxis={[{ dataKey: 'aiLevel', label: 'Mức độ AI (%)' }]}
          series={[
            { dataKey: 'highSkill', label: 'Kỹ năng cao', area: true, stack: 'total', showMark: false, color: '#4caf50' },
            { dataKey: 'midSkill', label: 'Kỹ năng trung bình', area: true, stack: 'total', showMark: false, color: '#ff9800' },
            { dataKey: 'lowSkill', label: 'Kỹ năng thấp', area: true, stack: 'total', showMark: false, color: '#f44336' },
          ]}
          yAxis={[{
            min: 0,
            max: 100,
            // --- CẢI TIẾN TẠI ĐÂY ---
            valueFormatter: (value: number | null) => (value === null ? '' : `${value}%`),
          }]}
          height={300}
          margin={{ left: 50, right: 20, top: 40, bottom: 40 }}
          grid={{ horizontal: true }}
        />
      </CardContent>
    </Card>
  );
}

===== .\src\components\MainGrid.tsx =====
"use client";
import * as React from 'react';
import Grid from '@mui/material/Grid';
import Box from '@mui/material/Box';
import Typography from '@mui/material/Typography';
import ValueStructurePieChart from './ValueStructurePieChart'; 
import ProfitTrendChart from './ProfitTrendChart'; 
import StatCard, { StatCardProps } from './StatCard';
import SocialImpactChart from './SocialImpactChart';
import FutureScenariosChart from './FutureScenariosChart';
import ProfitCompositionChart from './ProfitCompositionChart';
import LaborSkillChart from './LaborSkillChart';

// --- THÊM IMPORT CHO CÁC CHART MỚI NHẤT ---
import CapitalConcentrationChart from './CapitalConcentrationChart';
import WagePressureChart from './WagePressureChart';

interface MainGridProps {
  metrics: {
    c: number;
    v: number;
    m: number;
    pRate: number;
    unemploymentRate: number;
    gini: number;
  };
  trendChartData: any[];
  aiLevel: number;
  profitCompositionData: any[];
  laborSkillData: any[];
  // --- THÊM PROPS CHO DỮ LIỆU MỚI NHẤT ---
  capitalConcentrationData: any[];
  wagePressureData: any[];
}

export default function MainGrid({ metrics, trendChartData, aiLevel, profitCompositionData, laborSkillData, capitalConcentrationData, wagePressureData }: MainGridProps) {
  const kpiData: StatCardProps[] = [
    {
      title: 'Tư bản Bất biến (C)', value: `${metrics.c}$`,
      interval: 'Chi phí máy móc, AI', trend: 'up', data: [],
    },
    {
      title: 'Tư bản Khả biến (V)', value: `${metrics.v}$`,
      interval: 'Chi phí lao động sống', trend: 'down', data: [],
    },
    {
      title: 'Giá trị Thặng dư (M)', value: `${metrics.m}$`,
      interval: 'Lao động không công', trend: 'neutral', data: [],
    },
    {
      title: "Tỷ suất Lợi nhuận (p')", value: `${metrics.pRate}%`,
      interval: 'Xu hướng chung của CNTB', trend: 'down', data: [],
    },
  ];

  const pieChartData = [
    { label: 'Tư bản Bất biến (C)', value: metrics.c, color: '#ff9800' },
    { label: 'Tư bản Khả biến (V)', value: metrics.v, color: '#4caf50' },
    { label: 'Giá trị Thặng dư (M)', value: metrics.m, color: '#f44336' },
  ];

  return (
    <Box sx={{ width: '100%', maxWidth: { sm: '100%', md: '1700px' } }}>
      <Typography component="h2" variant="h6" sx={{ mb: 2 }}>
        Bảng điều khiển Kinh tế vĩ mô
      </Typography>
      <Grid container spacing={2} columns={12} sx={{ mb: 2 }}>
        {kpiData.map((card, index) => (
          <Grid size={{ xs: 12, sm: 6, lg: 3 }} key={index}>
            <StatCard {...card} />
          </Grid>
        ))}
      </Grid>
       
      <Typography component="h2" variant="h6" sx={{ mb: 2, mt: 4 }}>
        Quy luật Vận động & Tác động Xã hội
      </Typography>
      <Grid container spacing={2} columns={12}>
        <Grid size={{ xs: 12, md: 8 }}>
          <ProfitTrendChart data={trendChartData} aiLevel={aiLevel} />
        </Grid>
        <Grid size={{ xs: 12, md: 4 }}>
          <ValueStructurePieChart data={pieChartData} mRate={(metrics.m / metrics.v) * 100} />
        </Grid>
        <Grid size={{ xs: 12, md: 6, lg: 7 }} sx={{ mt: 2 }}>
            <SocialImpactChart unemploymentRate={metrics.unemploymentRate} gini={metrics.gini} />
        </Grid>
        <Grid size={{ xs: 12, md: 6, lg: 5 }} sx={{ mt: 2 }}>
            <FutureScenariosChart surplusValue={metrics.m} />
        </Grid>
      </Grid>

      <Typography component="h2" variant="h6" sx={{ mb: 2, mt: 4 }}>
        Phân Tích Chuyên Sâu & Xu Hướng Tương Lai
      </Typography>
      <Grid container spacing={2} columns={12}>
        <Grid size={{ xs: 12, lg: 6 }}>
          <ProfitCompositionChart data={profitCompositionData} aiLevel={aiLevel} />
        </Grid>
        <Grid size={{ xs: 12, lg: 6 }}>
          <LaborSkillChart data={laborSkillData} />
        </Grid>
        {/* --- THÊM GRID MỚI CHO CÁC BIỂU ĐỒ XUẤT SẮC --- */}
        <Grid size={{ xs: 12, lg: 6 }} sx={{ mt: 2 }}>
          <CapitalConcentrationChart data={capitalConcentrationData} />
        </Grid>
        <Grid size={{ xs: 12, lg: 6 }} sx={{ mt: 2 }}>
          <WagePressureChart data={wagePressureData} />
        </Grid>
      </Grid>
    </Box>
  );
}

===== .\src\components\MenuButton.tsx =====
import * as React from 'react';
import Badge, { badgeClasses } from '@mui/material/Badge';
import IconButton, { IconButtonProps } from '@mui/material/IconButton';

export interface MenuButtonProps extends IconButtonProps {
  showBadge?: boolean;
}

export default function MenuButton({
  showBadge = false,
  ...props
}: MenuButtonProps) {
  return (
    <Badge
      color="error"
      variant="dot"
      invisible={!showBadge}
      sx={{ [`& .${badgeClasses.badge}`]: { right: 2, top: 2 } }}
    >
      <IconButton size="small" {...props} />
    </Badge>
  );
}


===== .\src\components\MenuContent.tsx =====
// src/components/MenuContent.tsx
"use client";
import React, { useState, useEffect, useMemo } from 'react';
import Link from 'next/link';
import { usePathname, useRouter } from 'next/navigation';
import { List, ListItem, ListItemButton, ListItemIcon, ListItemText, Stack, IconButton, Box, Divider, Typography, Menu, MenuItem, Tooltip } from '@mui/material';
import HomeRoundedIcon from '@mui/icons-material/HomeRounded';
import ScienceRoundedIcon from '@mui/icons-material/ScienceRounded';
import QuestionAnswerRoundedIcon from '@mui/icons-material/QuestionAnswerRounded';
import MenuBookRoundedIcon from '@mui/icons-material/MenuBookRounded';
import AddCircleOutlineIcon from '@mui/icons-material/AddCircleOutline';
import MoreVertIcon from '@mui/icons-material/MoreVert';
import DashboardIcon from '@mui/icons-material/Dashboard';
import AssessmentIcon from '@mui/icons-material/Assessment';
import type { Chat } from '../app/chat/[chatId]/page';

const mainListItems = [
  { text: 'Trang chủ', icon: <HomeRoundedIcon />, href: '/' },
  { text: 'Trạm Mô phỏng', icon: <DashboardIcon />, href: '/simulation' },
  { text: 'Phòng Thí nghiệm', icon: <ScienceRoundedIcon />, href: '/lab' },
  { text: 'Thư viện Tri thức', icon: <MenuBookRoundedIcon />, href: '/about' },
];

const ChatHistoryItem = ({ chat, currentPathname }: { chat: Chat, currentPathname: string }) => {
    const router = useRouter();
    const [anchorEl, setAnchorEl] = React.useState<null | HTMLElement>(null);
    const open = Boolean(anchorEl);

    // Kiểm tra xem chat này có nội dung phân tích không
    const hasAnalysis = useMemo(() => {
        return chat.analyses && chat.analyses.length > 0;
    }, [chat.analyses]);

    const handleClick = (event: React.MouseEvent<HTMLElement>) => {
        event.stopPropagation();
        event.preventDefault();
        setAnchorEl(event.currentTarget);
    };

    const handleClose = () => setAnchorEl(null);

    const handleDelete = () => { 
        const storedChats = JSON.parse(localStorage.getItem('chatHistory') || '[]') as Chat[];
        const updatedChats = storedChats.filter(c => c.id !== chat.id);
        localStorage.setItem('chatHistory', JSON.stringify(updatedChats));
        window.dispatchEvent(new Event('storage')); // Cập nhật UI
        handleClose();
        if (currentPathname === `/chat/${chat.id}`) {
            router.push('/chat'); // Chuyển hướng nếu đang ở trang bị xóa
        }
     };
    
    // Tích hợp: Gửi tín hiệu để mở bảng phân tích khi điều hướng
    const handleOpenAnalysisPanel = (event: React.MouseEvent<HTMLElement>) => {
        event.stopPropagation();
        event.preventDefault();
        sessionStorage.setItem('requestOpenPanelForChat', chat.id);
        router.push(`/chat/${chat.id}`);
    };

    return (
        <ListItem disablePadding>
            <ListItemButton component={Link} href={`/chat/${chat.id}`} selected={currentPathname === `/chat/${chat.id}`}>
                <ListItemIcon><QuestionAnswerRoundedIcon /></ListItemIcon>
                <ListItemText primary={chat.title} primaryTypographyProps={{ noWrap: true, fontSize: '0.875rem' }} />
                
                {hasAnalysis && (
                    <Tooltip title="Xem tóm tắt phân tích">
                        <IconButton size="small" onClick={handleOpenAnalysisPanel} sx={{ ml: 1 }}>
                            <AssessmentIcon fontSize="small" />
                        </IconButton>
                    </Tooltip>
                )}

                <IconButton size="small" onClick={handleClick} sx={{ ml: 1 }}><MoreVertIcon fontSize="small" /></IconButton>
            </ListItemButton>
            <Menu anchorEl={anchorEl} open={open} onClose={handleClose}>
                <MenuItem onClick={handleDelete} sx={{ color: 'error.main' }}>Xóa</MenuItem>
            </Menu>
        </ListItem>
    );
};

export default function MenuContent() {
  const pathname = usePathname();
  const [chats, setChats] = useState<Chat[]>([]);

  const loadChats = () => {
    const storedChats = localStorage.getItem('chatHistory');
    setChats(storedChats ? JSON.parse(storedChats) : []);
  };
  
  useEffect(() => {
    loadChats();
    window.addEventListener('storage', loadChats);
    return () => window.removeEventListener('storage', loadChats);
  }, []);
  
  return (
    <Stack sx={{ flexGrow: 1, p: 1, justifyContent: 'space-between' }}>
      <List dense>
        {mainListItems.map((item) => (
          <ListItem key={item.text} disablePadding>
            <Link href={item.href} passHref style={{ textDecoration: 'none', color: 'inherit', width: '100%' }}>
              <ListItemButton selected={pathname === item.href}>
                <ListItemIcon>{item.icon}</ListItemIcon>
                <ListItemText primary={item.text} />
              </ListItemButton>
            </Link>
          </ListItem>
        ))}
      </List>
      
      <Box sx={{ flexGrow: 1, overflowY: 'auto' }}>
          <Divider sx={{ my: 1 }} />
          <Stack direction="row" justifyContent="space-between" alignItems="center" sx={{ px: 1 }}>
              <Typography variant="caption" fontWeight="bold">TRỢ LÝ PHÂN TÍCH</Typography>
              <Tooltip title="Bắt đầu cuộc trò chuyện mới">
                  <IconButton size="small" component={Link} href="/chat">
                      <AddCircleOutlineIcon fontSize="small" />
                  </IconButton>
              </Tooltip>
          </Stack>
          <List dense>
              {chats.map((chat) => (
                  <ChatHistoryItem key={chat.id} chat={chat} currentPathname={pathname} />
              ))}
          </List>
      </Box>
    </Stack>
  );
}

===== .\src\components\NavbarBreadcrumbs.tsx =====
"use client";

import * as React from 'react';
import { styled } from '@mui/material/styles';
import Typography from '@mui/material/Typography';
import Breadcrumbs, { breadcrumbsClasses } from '@mui/material/Breadcrumbs';
import NavigateNextRoundedIcon from '@mui/icons-material/NavigateNextRounded';
import { usePathname } from 'next/navigation';
import Link from 'next/link';

const StyledBreadcrumbs = styled(Breadcrumbs)(({ theme }) => ({
  margin: theme.spacing(1, 0),
  [`& .${breadcrumbsClasses.separator}`]: {
    color: (theme.vars || theme).palette.action.disabled,
    margin: 1,
  },
  [`& .${breadcrumbsClasses.ol}`]: {
    alignItems: 'center',
  },
}));

// Map path to a readable name
const pathMap: { [key: string]: string } = {
  '/': 'Trạm Mô phỏng',
  '/lab': 'Phòng Thí nghiệm',
  '/chat': 'Chatbot Trực quan',
  '/about': 'Thư viện Tri thức',
};

export default function NavbarBreadcrumbs() {
  const pathname = usePathname();
  const pageTitle = pathMap[pathname] || 'Home';

  return (
    <StyledBreadcrumbs
      aria-label="breadcrumb"
      separator={<NavigateNextRoundedIcon fontSize="small" />}
    >
      <Typography variant="body1">AI Labor Visualizer</Typography>
      <Typography variant="body1" sx={{ color: 'text.primary', fontWeight: 600 }}>
        {pageTitle}
      </Typography>
    </StyledBreadcrumbs>
  );
}

===== .\src\components\ProductivityAnalysisChart.tsx =====
// src/components/ProductivityAnalysisChart.tsx
"use client";
import * as React from 'react';
import Card from '@mui/material/Card';
import CardContent from '@mui/material/CardContent';
import Typography from '@mui/material/Typography';
import { BarChart } from '@mui/x-charts/BarChart';
import { Box } from '@mui/material';

export default function ProductivityAnalysisChart({ data }: { data: any[] }) {
  return (
    <Card variant="outlined" sx={{ height: '100%' }}>
      <CardContent>
        <Typography component="h2" variant="h6" gutterBottom>
          Phân tích Hiệu quả & Giá trị
        </Typography>
        <Typography variant="caption" sx={{ color: 'text.secondary', display: 'block', mb: 2 }}>
          AI giúp tăng sản lượng nhưng làm giảm giá trị của mỗi đơn vị sản phẩm.
        </Typography>
        <Box sx={{ height: 250 }}>
           <BarChart
              dataset={data}
              xAxis={[{ scaleType: 'band', dataKey: 'scenario' }]}
              series={[
                { dataKey: 'output', label: 'Sản lượng (sản phẩm/tháng)', color: '#4caf50' },
                { dataKey: 'valuePerItem', label: 'Giá trị / Sản phẩm (V+M)', color: '#ff9800' },
              ]}
              margin={{ top: 20, bottom: 30, left: 50, right: 20 }}
              grid={{ horizontal: true }}
            />
        </Box>
      </CardContent>
    </Card>
  );
}

===== .\src\components\ProductivityLeverageCard.tsx =====
"use client";
import * as React from 'react';
import Card from '@mui/material/Card';
import CardContent from '@mui/material/CardContent';
import Typography from '@mui/material/Typography';
import { Stack, Divider } from '@mui/material';
import SpeedIcon from '@mui/icons-material/Speed';
export default function ProductivityLeverageCard({ factor }: { factor: number }) {
return (
    <Card variant="outlined" sx={{ height: '100%', display: 'flex', flexDirection: 'column' }}>
    <CardContent sx={{ flexGrow: 1, display: 'flex', flexDirection: 'column', justifyContent: 'center', alignItems: 'center' }}>
    <Typography component="h2" variant="h6" gutterBottom>
    Đòn bẩy Năng suất
    </Typography>
    <Stack direction="row" spacing={2} alignItems="center" my={2}>
    <Typography variant="h3" fontWeight="bold" color="primary">
    {factor.toFixed(1)}x
    </Typography>
    <SpeedIcon color="primary" sx={{ fontSize: 40 }}/>
    </Stack>
    <Divider sx={{ width: '80%', my: 1 }}/>
    <Typography variant="caption" color="text.secondary" align="center">
    AI thực hiện công việc nhanh hơn {factor.toFixed(1)} lần so với lao động sống.
    </Typography>
    </CardContent>
    </Card>
);
}

===== .\src\components\ProfitCompositionChart.tsx =====
"use client";
import * as React from 'react';
import Card from '@mui/material/Card';
import CardContent from '@mui/material/CardContent';
import Typography from '@mui/material/Typography';
import { BarChart } from '@mui/x-charts/BarChart';

interface ProfitCompositionChartProps {
  data: any[];
  aiLevel: number;
}

export default function ProfitCompositionChart({ data, aiLevel }: ProfitCompositionChartProps) {
  // Chỉ lấy dữ liệu đến mức AI hiện tại để biểu đồ trông "động"
  const chartData = data.filter(d => d.aiLevel <= aiLevel);

  return (
    <Card variant="outlined" sx={{ width: '100%', height: '100%' }}>
      <CardContent>
        <Typography component="h2" variant="subtitle2" gutterBottom>
          Phân Rã Tỷ Suất Lợi Nhuận & Các Lực Lượng Đối Trọng
        </Typography>
        <Typography variant="caption" sx={{ color: 'text.secondary' }}>
          Tỷ suất lợi nhuận thực tế = (p' cơ bản) + (Bóc lột tăng) + (C rẻ đi).
        </Typography>
        <BarChart
          dataset={chartData}
          xAxis={[{ scaleType: 'band', dataKey: 'aiLevel', label: 'Mức độ AI (%)' }]}
          series={[
            { dataKey: 'basePRate', label: "p' Cơ bản (Xu hướng giảm)", stack: 'A', color: '#f44336' },
            { dataKey: 'exploitationBoost', label: 'Tăng cường bóc lột (m\')', stack: 'A', color: '#ff9800' },
            { dataKey: 'cheapeningCBoost', label: 'Tư bản bất biến rẻ đi', stack: 'A', color: '#4caf50' },
          ]}
          height={300}
          margin={{ left: 50, right: 20, top: 40, bottom: 40 }}
          grid={{ horizontal: true }}
        />
      </CardContent>
    </Card>
  );
}

===== .\src\components\ProfitTrendChart.tsx =====
// src/components/ProfitTrendChart.tsx

import * as React from 'react';
import Card from '@mui/material/Card';
import CardContent from '@mui/material/CardContent';
import Typography from '@mui/material/Typography';
// --- SỬA LỖI IMPORT TẠI ĐÂY ---
// ReferenceLine được export trực tiếp từ thư viện gốc '@mui/x-charts'.
import { LineChart, ChartsReferenceLine } from '@mui/x-charts';
import { red, green } from '@mui/material/colors';

// Prop `aiLevel` được thêm vào để nhận giá trị từ thanh trượt
export default function ProfitTrendChart({ data, aiLevel }: { data: any[], aiLevel: number }) {
  return (
    <Card variant="outlined" sx={{ width: '100%', height: '100%' }}>
      <CardContent>
        <Typography component="h2" variant="subtitle2" gutterBottom>
          Xu hướng Lợi nhuận & Cấu tạo Hữu cơ
        </Typography>
        <Typography variant="caption" sx={{ color: 'text.secondary' }}>
          Minh họa quy luật tỷ suất lợi nhuận có xu hướng giảm
        </Typography>
        <LineChart
          dataset={data}
          xAxis={[{ 
            dataKey: 'aiLevel', 
            label: 'Mức độ Ứng dụng AI (%)',
            valueFormatter: (value: number | null) => (value === null ? '' : `${value}%`)
          }]}
          series={[
            {
              dataKey: 'pRate',
              label: "Tỷ suất Lợi nhuận (p')",
              color: green[500],
              showMark: false,
              valueFormatter: (value: number | null) => (value === null ? '' : `${value}%`),
            },
            {
              dataKey: 'organicComp',
              label: 'Cấu tạo Hữu cơ (c/v)',
              color: red[500],
              showMark: false,
            },
          ]}
          height={300}
          margin={{ left: 70, right: 20, top: 40, bottom: 40 }}
          grid={{ horizontal: true }}
        >
          {/* Component này giờ sẽ hoạt động bình thường với import đúng */}
          <ChartsReferenceLine 
            x={aiLevel} 
            lineStyle={{ stroke: '#0288d1', strokeDasharray: '4 4' }} 
            labelStyle={{ fill: '#0288d1', fontSize: 12 }}
            label={`Hiện tại: ${aiLevel}%`}
            labelAlign="end"
          />
        </LineChart>
      </CardContent>
    </Card>
  );
}

===== .\src\components\SideMenu.tsx =====
// src/components/SideMenu.tsx
'use client'
import * as React from 'react';
import { styled } from '@mui/material/styles';
import MuiDrawer, { drawerClasses } from '@mui/material/Drawer';
import Box from '@mui/material/Box';
import Divider from '@mui/material/Divider';
import MenuContent from './MenuContent';
import Image from 'next/image';
import { Stack } from '@mui/material';

const drawerWidth = 240;

const Drawer = styled(MuiDrawer)({
  width: drawerWidth,
  flexShrink: 0,
  boxSizing: 'border-box',
  [`& .${drawerClasses.paper}`]: {
    width: drawerWidth,
    boxSizing: 'border-box',
  },
});

export default function SideMenu() {
  return (
    <Drawer
      variant="permanent"
      sx={{
        display: { xs: 'none', md: 'block' },
        [`& .${drawerClasses.paper}`]: {
          backgroundColor: 'background.paper',
        },
      }}
    >
      {/* --- BẮT ĐẦU THAY ĐỔI --- */}
      <Stack 
        alignItems="center" 
        justifyContent="center"
        // Điều chỉnh chiều cao của khu vực logo cho phù hợp
        sx={{ p: 2, height: '84px' }}
      >
        <Image 
          src="/FPT_logo.png" // Đường dẫn tới logo FPT trong thư mục /public
          alt="FPT Corporation Logo"
          // Các props width/height này dùng để tối ưu hóa và xác định tỷ lệ
          // Kích thước thực tế sẽ được điều khiển bởi 'style' bên dưới
          width={160} 
          height={64}
          // Dùng style để logo hiển thị với chiều rộng mong muốn và chiều cao tự động
          style={{
            width: '100px', // Chiếm phần lớn chiều rộng sidebar
            height: 'auto',   // Chiều cao tự động điều chỉnh để không méo ảnh
          }}
        />
      </Stack>
      {/* --- KẾT THÚC THAY ĐỔI --- */}

      <Divider />
      <Box
        sx={{
          overflow: 'auto',
          height: '100%',
          display: 'flex',
          flexDirection: 'column',
        }}
      >
        <MenuContent />
      </Box>
    </Drawer>
  );
}

===== .\src\components\SideMenuMobile.tsx =====
// src/components/SideMenuMobile.tsx
import * as React from 'react';
import Avatar from '@mui/material/Avatar';
import Button from '@mui/material/Button';
import Divider from '@mui/material/Divider';
import Drawer, { drawerClasses } from '@mui/material/Drawer';
import Stack from '@mui/material/Stack';
import Typography from '@mui/material/Typography';
import LogoutRoundedIcon from '@mui/icons-material/LogoutRounded';
import NotificationsRoundedIcon from '@mui/icons-material/NotificationsRounded';
import MenuButton from './MenuButton';
import MenuContent from './MenuContent';

interface SideMenuMobileProps {
  open: boolean | undefined;
  toggleDrawer: (newOpen: boolean) => () => void;
}

export default function SideMenuMobile({ open, toggleDrawer }: SideMenuMobileProps) {
  return (
    <Drawer
      anchor="right"
      open={open}
      onClose={toggleDrawer(false)}
      sx={{
        zIndex: (theme) => theme.zIndex.drawer + 1,
        [`& .${drawerClasses.paper}`]: {
          backgroundImage: 'none',
          backgroundColor: 'background.paper',
        },
      }}
    >
      <Stack
        sx={{
          maxWidth: '70dvw',
          height: '100%',
        }}
      >
        <Stack sx={{ flexGrow: 1, mt: 1 }}>
          <MenuContent />
          <Divider />
        </Stack>
        <Stack sx={{ p: 2 }}>
          <Button variant="outlined" fullWidth startIcon={<LogoutRoundedIcon />}>
            Đăng xuất
          </Button>
        </Stack>
      </Stack>
    </Drawer>
  );
}

===== .\src\components\SocialImpactChart.tsx =====
// src/components/SocialImpactChart.tsx
"use client";
import * as React from 'react';
import Card from '@mui/material/Card';
import CardContent from '@mui/material/CardContent';
import Typography from '@mui/material/Typography';
import { BarChart } from '@mui/x-charts/BarChart';

interface SocialImpactChartProps {
  unemploymentRate: number;
  gini: number;
}

export default function SocialImpactChart({ unemploymentRate, gini }: SocialImpactChartProps) {
  const dataset = [
    { value: unemploymentRate, label: 'Tỷ lệ Thất nghiệp (%)' },
    { value: gini * 100, label: 'Bất bình đẳng (Gini*100)' }, // Nhân 100 để cùng thang đo
  ];

  return (
    <Card variant="outlined" sx={{ width: '100%', height: '100%' }}>
      <CardContent>
        <Typography component="h2" variant="subtitle2" gutterBottom>
          Phân tích Tác động Xã hội
        </Typography>
        <Typography variant="caption" sx={{ color: 'text.secondary' }}>
          Hệ quả của việc thay thế lao động sống bằng lao động máy hóa.
        </Typography>
        <BarChart
          dataset={dataset}
          yAxis={[{ scaleType: 'band', dataKey: 'label' }]}
          series={[{ dataKey: 'value', label: 'Chỉ số' }]}
          layout="horizontal"
          height={200}
          margin={{ left: 160, right: 20, top: 40, bottom: 20 }}
          grid={{ vertical: true }}
          colors={['#ef5350']}
        />
      </CardContent>
    </Card>
  );
}

===== .\src\components\SocialImpactComparisonChart.tsx =====
// src/components/SocialImpactComparisonChart.tsx
"use client";
import * as React from 'react';
import Card from '@mui/material/Card';
import CardContent from '@mui/material/CardContent';
import Typography from '@mui/material/Typography';
import { BarChart } from '@mui/x-charts/BarChart';
import { Box } from '@mui/material';

export default function SocialImpactComparisonChart({ chartData }: { chartData: any }) {
  if (!chartData || !chartData.data) return null;

  return (
    <Card variant="outlined" sx={{ width: '100%', height: '100%' }}>
      <CardContent>
        <Typography component="h2" variant="h6" align="center" gutterBottom>
          {chartData.title}
        </Typography>
        <Box sx={{ height: 200, mt: 2 }}>
          <BarChart
            dataset={chartData.data}
            yAxis={[{ scaleType: 'band', dataKey: 'metric' }]}
            series={[
              { dataKey: 'Hiện tại', label: 'Hiện tại (Sau AI)' },
              { dataKey: 'Tương lai', label: 'Tương lai (Đề xuất)' },
            ]}
            layout="horizontal"
            margin={{ left: 180, right: 20, top: 40, bottom: 30 }}
            grid={{ vertical: true }}
          />
        </Box>
      </CardContent>
    </Card>
  );
}

===== .\src\components\StatCard.tsx =====
import * as React from 'react';
import { useTheme } from '@mui/material/styles';
import Box from '@mui/material/Box';
import Card from '@mui/material/Card';
import CardContent from '@mui/material/CardContent';
import Chip from '@mui/material/Chip';
import Stack from '@mui/material/Stack';
import Typography from '@mui/material/Typography';
import { SparkLineChart } from '@mui/x-charts/SparkLineChart';
import { areaElementClasses } from '@mui/x-charts/LineChart';

export type StatCardProps = {
  title: string;
  value: string;
  interval: string;
  trend: 'up' | 'down' | 'neutral';
  data: number[];
};

function getDaysInMonth(month: number, year: number) {
  const date = new Date(year, month, 0);
  const monthName = date.toLocaleDateString('en-US', {
    month: 'short',
  });
  const daysInMonth = date.getDate();
  const days = [];
  let i = 1;
  while (days.length < daysInMonth) {
    days.push(`${monthName} ${i}`);
    i += 1;
  }
  return days;
}

function AreaGradient({ color, id }: { color: string; id: string }) {
  return (
    <defs>
      <linearGradient id={id} x1="50%" y1="0%" x2="50%" y2="100%">
        <stop offset="0%" stopColor={color} stopOpacity={0.3} />
        <stop offset="100%" stopColor={color} stopOpacity={0} />
      </linearGradient>
    </defs>
  );
}

export default function StatCard({
  title,
  value,
  interval,
  trend,
  data,
}: StatCardProps) {
  const theme = useTheme();
  const daysInWeek = getDaysInMonth(4, 2024);

  const trendColors = {
    up:
      theme.palette.mode === 'light'
        ? theme.palette.success.main
        : theme.palette.success.dark,
    down:
      theme.palette.mode === 'light'
        ? theme.palette.error.main
        : theme.palette.error.dark,
    neutral:
      theme.palette.mode === 'light'
        ? theme.palette.grey[400]
        : theme.palette.grey[700],
  };

  const labelColors = {
    up: 'success' as const,
    down: 'error' as const,
    neutral: 'default' as const,
  };

  const color = labelColors[trend];
  const chartColor = trendColors[trend];
  const trendValues = { up: '+25%', down: '-25%', neutral: '+5%' };

  return (
    <Card variant="outlined" sx={{ height: '100%', flexGrow: 1 }}>
      <CardContent>
        <Typography component="h2" variant="subtitle2" gutterBottom>
          {title}
        </Typography>
        <Stack
          direction="column"
          sx={{ justifyContent: 'space-between', flexGrow: '1', gap: 1 }}
        >
          <Stack sx={{ justifyContent: 'space-between' }}>
            <Stack
              direction="row"
              sx={{ justifyContent: 'space-between', alignItems: 'center' }}
            >
              <Typography variant="h4" component="p">
                {value}
              </Typography>
              <Chip size="small" color={color} label={trendValues[trend]} />
            </Stack>
            <Typography variant="caption" sx={{ color: 'text.secondary' }}>
              {interval}
            </Typography>
          </Stack>
          <Box sx={{ width: '100%', height: 50 }}>
            <SparkLineChart
              color={chartColor}
              data={data}
              area
              showHighlight
              showTooltip
              xAxis={{
                scaleType: 'band',
                data: daysInWeek, // Use the correct property 'data' for xAxis
              }}
              sx={{
                [`& .${areaElementClasses.root}`]: {
                  fill: `url(#area-gradient-${value})`,
                },
              }}
            >
              <AreaGradient color={chartColor} id={`area-gradient-${value}`} />
            </SparkLineChart>
          </Box>
        </Stack>
      </CardContent>
    </Card>
  );
}


===== .\src\components\ValueDistributionChart.tsx =====
// src/components/ValueDistributionChart.tsx
"use client";
import * as React from 'react';
import Card from '@mui/material/Card';
import CardContent from '@mui/material/CardContent';
import Typography from '@mui/material/Typography';
import { BarChart } from '@mui/x-charts/BarChart';
import { Box } from '@mui/material';

export default function ValueDistributionChart({ chartData }: { chartData: any }) {
  if (!chartData || !chartData.data) return null;
  
  // Lấy danh sách các key series tự động, trừ 'scenario'
  const seriesKeys = Object.keys(chartData.data[0]).filter(key => key !== 'scenario');

  return (
    <Card variant="outlined" sx={{ width: '100%', height: '100%' }}>
      <CardContent>
        <Typography component="h2" variant="h6" align="center" gutterBottom>
          {chartData.title}
        </Typography>
        <Box sx={{ height: 200, mt: 2 }}>
          <BarChart
            dataset={chartData.data}
            xAxis={[{ scaleType: 'band', dataKey: 'scenario' }]}
            series={seriesKeys.map(key => ({
                dataKey: key,
                stack: 'total',
                label: key
            }))}
            margin={{ left: 50, right: 20, top: 40, bottom: 30 }}
            grid={{ horizontal: true }}
          />
        </Box>
      </CardContent>
    </Card>
  );
}

===== .\src\components\ValueStructurePieChart.tsx =====
'use client'
import * as React from 'react';
import { PieChart } from '@mui/x-charts/PieChart';
import { useDrawingArea } from '@mui/x-charts/hooks';
import { styled } from '@mui/material/styles';
import Typography from '@mui/material/Typography';
import Card from '@mui/material/Card';
import CardContent from '@mui/material/CardContent';
import Box from '@mui/material/Box';
import Stack from '@mui/material/Stack';

// Giữ StyledText đơn giản, không định nghĩa màu sắc
const StyledText = styled('text')({
  textAnchor: 'middle',
  dominantBaseline: 'central',
});

function PieCenterLabel({ primaryText, secondaryText }: { primaryText: string, secondaryText: string }) {
  const { width, height, left, top } = useDrawingArea();

  return (
    <React.Fragment>
      {/* --- GIẢI PHÁP TRIỆT ĐỂ: SỬ DỤNG TRỰC TIẾP BIẾN CSS TỪ THEME --- */}
      <StyledText
        x={left + width / 2}
        y={top + height / 2 - 12}
        sx={{
          fontSize: '1.8rem',
          fontWeight: 'bold',
          // Sử dụng biến CSS cho màu văn bản chính.
          // Đây là cách đáng tin cậy nhất để lấy đúng màu.
          fill: 'var(--template-palette-text-primary)',
        }}
      >
        {primaryText}
      </StyledText>
      <StyledText
        x={left + width / 2}
        y={top + height / 2 + 18}
        sx={{
          // Sử dụng biến CSS cho màu văn bản phụ.
          fill: 'var(--template-palette-text-secondary)',
        }}
      >
        {secondaryText}
      </StyledText>
    </React.Fragment>
  );
}

// Component Chú thích (Legend) Tự tạo
function CustomLegend({ data }: { data: Array<{ label: string, color: string }> }) {
  return (
    <Stack 
      direction="row" 
      justifyContent="center" 
      spacing={2} 
      mt={2}
      flexWrap="wrap" // Cho phép xuống dòng trên màn hình nhỏ
    >
      {data.map((item) => (
        <Stack direction="row" key={item.label} spacing={1} alignItems="center">
          <Box sx={{ width: 12, height: 12, borderRadius: '50%', bgcolor: item.color }} />
          <Typography variant="body2">{item.label}</Typography>
        </Stack>
      ))}
    </Stack>
  );
}


export default function ValueStructurePieChart({ data, mRate }: { data: any[], mRate: number }) {
  return (
    <Card variant="outlined">
      <CardContent>
        <Typography component="h2" variant="subtitle2" gutterBottom>
          Cơ cấu Giá trị & Tỷ suất Bóc lột
        </Typography>
        
        <Box sx={{ height: 350, width: '100%' }}>
          <PieChart
            series={[
              {
                data,
                innerRadius: '40%',
                outerRadius: '90%',
                paddingAngle: 2,
                highlightScope: { fade: 'global', highlight: 'item' },
              },
            ]}
            hideLegend={true} 
            margin={{ top: 20, bottom: 20, left: 10, right: 10 }}
          >
            <PieCenterLabel primaryText={`${mRate.toFixed(0)}%`} secondaryText="Tỷ suất m'" />
          </PieChart>
        </Box>

        <CustomLegend data={data} />
      </CardContent>
    </Card>
  );
}

===== .\src\components\WagePressureChart.tsx =====
"use client";
import * as React from 'react';
import Card from '@mui/material/Card';
import CardContent from '@mui/material/CardContent';
import Typography from '@mui/material/Typography';
import { ChartContainer } from '@mui/x-charts/ChartContainer';
import { BarPlot } from '@mui/x-charts/BarChart';
import { LinePlot } from '@mui/x-charts/LineChart';
import { ChartsXAxis } from '@mui/x-charts/ChartsXAxis';
import { ChartsYAxis } from '@mui/x-charts/ChartsYAxis';
import { ChartsGrid } from '@mui/x-charts/ChartsGrid';
import { axisClasses } from '@mui/x-charts/ChartsAxis';
import { ChartsLegend } from '@mui/x-charts/ChartsLegend';

interface WagePressureChartProps {
  data: any[];
}

export default function WagePressureChart({ data }: WagePressureChartProps) {
  return (
    <Card variant="outlined" sx={{ width: '100%', height: '100%' }}>
      <CardContent>
        <Typography component="h2" variant="subtitle2" gutterBottom>
          Đội Quân Lao Động Dự Bị & Sức Ép Tiền Lương
        </Typography>
        <Typography variant="caption" sx={{ color: 'text.secondary' }}>
          Tỷ lệ thất nghiệp tăng làm giảm sức thương lượng và tiền lương trung bình.
        </Typography>
        
        <ChartContainer
        dataset={data}
        series={[
            { type: 'bar', dataKey: 'unemployment', label: 'Tỷ lệ thất nghiệp (%)', yAxisId: 'barAxis' },
            { type: 'line', dataKey: 'avgWage', label: 'Mức lương trung bình ($)', color: '#d32f2f', yAxisId: 'lineAxis' },
        ]}
        xAxis={[{ dataKey: 'aiLevel', scaleType: 'band', label: 'Mức độ AI (%)' }]}
        yAxis={[
            { id: 'barAxis', scaleType: 'linear', max: 100, label: 'Tỷ lệ thất nghiệp (%)', position: 'left' },
            { id: 'lineAxis', scaleType: 'linear', min: 0, label: 'Mức lương TB ($)', position: 'right' },
        ]}
        height={300}
        margin={{ left: 60, right: 60, top: 40, bottom: 40 }}
        sx={{
            [`.${axisClasses.left} .${axisClasses.label}`]: { transform: 'translateX(-20px)' },
            [`.${axisClasses.right} .${axisClasses.label}`]: { transform: 'translateX(20px)' },
        }}
        >
        <ChartsGrid horizontal />
        <BarPlot />
        <LinePlot />
        <ChartsLegend />
        <ChartsXAxis />
        <ChartsYAxis axisId="barAxis" />
        <ChartsYAxis axisId="lineAxis" />
        </ChartContainer>
      </CardContent>
    </Card>
  );
}

===== .\src\components\WorkforceCompositionChart.tsx =====
// src/components/WorkforceCompositionChart.tsx
"use client";
import * as React from 'react';
import { PieChart } from '@mui/x-charts/PieChart';
import Typography from '@mui/material/Typography';
import Card from '@mui/material/Card';
import CardContent from '@mui/material/CardContent';
import { Stack, Box } from '@mui/material';

const colors = ['#1976d2', '#ef5350']; // Xanh cho Người, Đỏ cho AI

const CustomLegend = ({ data }: { data: Array<{ label: string, color: string }> }) => (
  <Stack direction="row" spacing={2} mt={2} justifyContent="center">
    {data.map((item) => (
      <Stack direction="row" key={item.label} spacing={1} alignItems="center">
        <Box sx={{ width: 12, height: 12, borderRadius: '50%', bgcolor: item.color }} />
        <Typography variant="body2">{item.label}</Typography>
      </Stack>
    ))}
  </Stack>
);

export default function WorkforceCompositionChart({ data }: { data: any[] }) {
  return (
    <Card variant="outlined" sx={{ height: '100%' }}>
      <CardContent>
        <Typography component="h2" variant="h6" gutterBottom align="center">
          Sự Chuyển dịch Lực lượng Lao động
        </Typography>
        <Box sx={{ height: 250 }}>
          <PieChart
            colors={colors}
            series={[{ data, innerRadius: 80 }]}
            margin={{ top: 10, bottom: 10, left: 10, right: 10 }}
            // --- SỬA LỖI TẠI ĐÂY ---
            // Thay thế slotProps.legend.hidden bằng hideLegend
            hideLegend 
          />
        </Box>
        <CustomLegend data={data.map((d, i) => ({ label: d.label, color: colors[i] }))} />
      </CardContent>
    </Card>
  );
}

===== .\src\internals\components\CustomIcons.tsx =====
import * as React from 'react';
import SvgIcon from '@mui/material/SvgIcon';

export function SitemarkIcon() {
  return (
    <SvgIcon sx={{ height: 21, width: 100 }}>
      <svg
        width={86}
        height={19}
        viewBox="0 0 86 19"
        fill="none"
        xmlns="http://www.w3.org/2000/svg"
      >
        <path
          fill="#B4C0D3"
          d="m.787 12.567 6.055-2.675 3.485 2.006.704 6.583-4.295-.035.634-4.577-.74-.422-3.625 2.817-2.218-3.697Z"
        />
        <path
          fill="#00D3AB"
          d="m10.714 11.616 5.352 3.908 2.112-3.767-4.295-1.725v-.845l4.295-1.76-2.112-3.732-5.352 3.908v4.013Z"
        />
        <path
          fill="#4876EF"
          d="m10.327 7.286.704-6.583-4.295.07.634 4.577-.74.422-3.66-2.816L.786 6.617l6.055 2.676 3.485-2.007Z"
        />
        <path
          fill="#4876EE"
          d="M32.507 8.804v6.167h2.312v-7.86h-3.366v1.693h1.054ZM32.435 6.006c.212.22.535.33.968.33.434 0 .751-.11.953-.33.213-.23.318-.516.318-.86 0-.354-.105-.641-.318-.86-.202-.23-.52-.345-.953-.345-.433 0-.756.115-.968.344-.202.22-.303.507-.303.86 0 .345.101.632.303.861ZM24.46 14.799c.655.296 1.46.444 2.413.444.896 0 1.667-.139 2.312-.416.645-.277 1.141-.664 1.488-1.162.357-.506.535-1.094.535-1.764 0-.65-.169-1.2-.506-1.649-.328-.459-.785-.818-1.373-1.076-.587-.267-1.266-.435-2.037-.502l-.809-.071c-.481-.039-.828-.168-1.04-.388a1.08 1.08 0 0 1-.318-.774c0-.23.058-.44.173-.631.116-.201.29-.359.52-.474.241-.114.535-.172.882-.172.366 0 .67.067.91.201.053.029.104.059.15.09l.012.009.052.037c.146.111.263.243.35.395.125.21.188.444.188.703h2.311c0-.689-.159-1.286-.476-1.793-.318-.516-.776-.913-1.373-1.19-.588-.287-1.296-.43-2.124-.43-.79 0-1.474.133-2.052.4a3.131 3.131 0 0 0-1.358 1.12c-.318.487-.477 1.066-.477 1.735 0 .927.314 1.673.94 2.237.626.564 1.464.89 2.514.976l.794.071c.645.058 1.113.187 1.401.388a.899.899 0 0 1 .434.788 1.181 1.181 0 0 1-.231.717c-.154.201-.38.36-.68.474-.298.115-.669.172-1.112.172-.49 0-.89-.067-1.199-.2-.308-.144-.539-.33-.694-.56a1.375 1.375 0 0 1-.216-.746h-2.297c0 .679.168 1.281.505 1.807.337.517.834.928 1.489 1.234ZM39.977 15.07c-.8 0-1.445-.095-1.936-.286a2.03 2.03 0 0 1-1.084-.99c-.221-.469-.332-1.1-.332-1.893V8.789h-1.2V7.11h1.2V4.988h2.153V7.11h2.312V8.79h-2.312v3.198c0 .373.096.66.289.86.202.192.486.287.852.287h1.17v1.937h-1.112Z"
        />
        <path
          fill="#4876EE"
          fillRule="evenodd"
          d="M43.873 14.899c.52.23 1.117.344 1.791.344.665 0 1.252-.115 1.763-.344.51-.23.934-.55 1.271-.96.337-.412.564-.88.679-1.407h-2.124c-.096.24-.279.44-.549.603-.27.162-.616.244-1.04.244-.262 0-.497-.031-.704-.093a1.572 1.572 0 0 1-.423-.194 1.662 1.662 0 0 1-.636-.803 3.159 3.159 0 0 1-.163-.645h5.784v-.775a4.28 4.28 0 0 0-.463-1.98 3.686 3.686 0 0 0-1.343-1.477c-.578-.382-1.291-.574-2.139-.574-.645 0-1.223.115-1.733.345-.501.22-.92.52-1.257.903a4.178 4.178 0 0 0-.78 1.305c-.174.478-.26.98-.26 1.506v.287c0 .507.086 1.004.26 1.492.183.478.443.913.78 1.305.347.382.775.688 1.286.918Zm-.094-4.674.02-.09a2.507 2.507 0 0 1 .117-.356c.145-.354.356-.622.636-.804.104-.067.217-.123.339-.165.204-.071.433-.107.686-.107.395 0 .723.09.983.272.27.173.472.426.607.76a2.487 2.487 0 0 1 .16.603h-3.57c.006-.038.013-.076.022-.113Z"
          clipRule="evenodd"
        />
        <path
          fill="#4876EE"
          d="M50.476 14.97V7.112h1.835v1.98a4.54 4.54 0 0 1 .173-.603c.202-.536.506-.937.91-1.205.405-.277.9-.416 1.488-.416h.101c.598 0 1.094.139 1.489.416.404.268.707.67.91 1.205l.016.04.013.037.028-.077c.212-.536.52-.937.925-1.205.405-.277.901-.416 1.489-.416h.1c.598 0 1.098.139 1.503.416.414.268.727.67.94 1.205.211.535.317 1.205.317 2.008v4.475h-2.312v-4.604c0-.43-.115-.78-.346-1.047-.222-.268-.54-.402-.954-.402-.414 0-.742.139-.982.416-.241.268-.362.626-.362 1.076v4.56h-2.326v-4.603c0-.43-.115-.78-.346-1.047-.222-.268-.535-.402-.94-.402-.423 0-.756.139-.996.416-.241.268-.362.626-.362 1.076v4.56h-2.311Z"
        />
        <path
          fill="#4876EE"
          fillRule="evenodd"
          d="M68.888 13.456v1.515h1.834v-4.82c0-.726-.144-1.319-.433-1.778-.289-.468-.712-.817-1.271-1.047-.549-.23-1.228-.344-2.037-.344a27.76 27.76 0 0 0-.896.014c-.318.01-.626.024-.924.043l-.229.016a36.79 36.79 0 0 0-.552.042v1.936a81.998 81.998 0 0 1 1.733-.09 37.806 37.806 0 0 1 1.171-.025c.424 0 .732.1.925.301.193.201.289.502.289.904v.029h-1.43c-.704 0-1.325.09-1.864.272-.54.172-.959.445-1.257.818-.299.363-.448.832-.448 1.405 0 .526.12.98.361 1.363.24.373.573.66.997.86.433.201.934.302 1.502.302.55 0 1.012-.1 1.388-.302.385-.2.683-.487.895-.86a2.443 2.443 0 0 0 .228-.498l.018-.056Zm-.39-1.397v-.63h-1.445c-.405 0-.718.1-.939.3-.212.192-.318.455-.318.79 0 .157.026.3.08.429a.99.99 0 0 0 .238.345c.221.191.534.287.939.287a2.125 2.125 0 0 0 .394-.038c.106-.021.206-.052.3-.092.212-.095.385-.253.52-.473.135-.22.212-.526.23-.918Z"
          clipRule="evenodd"
        />
        <path
          fill="#4876EE"
          d="M72.106 14.97V7.11h1.835v2.595c.088-.74.31-1.338.665-1.791.481-.603 1.174-.904 2.08-.904h.303v1.98h-.578c-.635 0-1.127.172-1.473.516-.347.334-.52.822-.52 1.463v4.001h-2.312ZM79.92 11.298h.767l2.499 3.672h2.6l-3.169-4.51 2.606-3.35h-2.427l-2.875 3.737V4.5h-2.312v10.47h2.312v-3.672Z"
        />
      </svg>
    </SvgIcon>
  );
}

export function IndiaFlag() {
  return (
    <SvgIcon>
      <svg xmlns="http://www.w3.org/2000/svg" width="24" height="24" fill="none">
        <g clipPath="url(#a)">
          <mask
            id="b"
            maskUnits="userSpaceOnUse"
            x="-4"
            y="0"
            width="32"
            height="24"
          >
            <path d="M-4 0h32v24H-4V0Z" fill="#fff" />
          </mask>
          <g mask="url(#b)">
            <path
              fillRule="evenodd"
              clipRule="evenodd"
              d="M-4 0v24h32V0H-4Z"
              fill="#F7FCFF"
            />
            <mask
              id="c"
              maskUnits="userSpaceOnUse"
              x="-4"
              y="0"
              width="32"
              height="24"
            >
              <path
                fillRule="evenodd"
                clipRule="evenodd"
                d="M-4 0v24h32V0H-4Z"
                fill="#fff"
              />
            </mask>
            <g mask="url(#c)" fillRule="evenodd" clipRule="evenodd">
              <path d="M-4 0v8h32V0H-4Z" fill="#FF8C1A" />
              <path d="M-4 16v8h32v-8H-4Z" fill="#5EAA22" />
              <path
                d="M8 12a4 4 0 1 0 8 0 4 4 0 0 0-8 0Zm7 0a3 3 0 1 1-6 0 3 3 0 0 1 6 0Z"
                fill="#3D58DB"
              />
              <path
                d="m12 12.9-.6 3 .4-3-1.5 2.8 1.2-3L9.4 15l2-2.4-2.8 1.6 2.6-1.8-3 .7 3-1H8l3.2-.2-3-1 3 .8-2.6-1.9 2.8 1.7-2-2.5 2.1 2.3-1.2-3 1.5 2.9-.4-3.2.6 3.2.6-3.2-.4 3.2 1.5-2.8-1.2 2.9L14.6 9l-2 2.5 2.8-1.7-2.6 1.9 3-.8-3 1 3.2.1-3.2.1 3 1-3-.7 2.6 1.8-2.8-1.6 2 2.4-2.1-2.3 1.2 3-1.5-2.9.4 3.2-.6-3.1Z"
                fill="#3D58DB"
              />
            </g>
          </g>
        </g>
        <defs>
          <clipPath id="a">
            <rect width="24" height="24" rx="12" fill="#fff" />
          </clipPath>
        </defs>
      </svg>
    </SvgIcon>
  );
}

export function UsaFlag() {
  return (
    <SvgIcon>
      <svg
        width="24"
        height="24"
        viewBox="0 0 24 24"
        fill="none"
        xmlns="http://www.w3.org/2000/svg"
      >
        <g clipPath="url(#clip0_983_1725)">
          <path
            fillRule="evenodd"
            clipRule="evenodd"
            d="M-4 0H28V24H-4V0Z"
            fill="#F7FCFF"
          />
          <path
            fillRule="evenodd"
            clipRule="evenodd"
            d="M-4 14.6667V16.6667H28V14.6667H-4Z"
            fill="#E31D1C"
          />
          <path
            fillRule="evenodd"
            clipRule="evenodd"
            d="M-4 18.3333V20.3333H28V18.3333H-4Z"
            fill="#E31D1C"
          />
          <path
            fillRule="evenodd"
            clipRule="evenodd"
            d="M-4 7.33325V9.33325H28V7.33325H-4Z"
            fill="#E31D1C"
          />
          <path
            fillRule="evenodd"
            clipRule="evenodd"
            d="M-4 22V24H28V22H-4Z"
            fill="#E31D1C"
          />
          <path
            fillRule="evenodd"
            clipRule="evenodd"
            d="M-4 11V13H28V11H-4Z"
            fill="#E31D1C"
          />
          <path
            fillRule="evenodd"
            clipRule="evenodd"
            d="M-4 0V2H28V0H-4Z"
            fill="#E31D1C"
          />
          <path
            fillRule="evenodd"
            clipRule="evenodd"
            d="M-4 3.66675V5.66675H28V3.66675H-4Z"
            fill="#E31D1C"
          />
          <path d="M-4 0H16V13H-4V0Z" fill="#2E42A5" />
          <path
            fillRule="evenodd"
            clipRule="evenodd"
            d="M-2.27876 2.93871L-3.00465 3.44759L-2.75958 2.54198L-3.4043 1.96807H-2.56221L-2.27978 1.229L-1.94861 1.96807H-1.23075L-1.79479 2.54198L-1.57643 3.44759L-2.27876 2.93871ZM1.72124 2.93871L0.995357 3.44759L1.24042 2.54198L0.595707 1.96807H1.43779L1.72022 1.229L2.05139 1.96807H2.76925L2.20521 2.54198L2.42357 3.44759L1.72124 2.93871ZM4.99536 3.44759L5.72124 2.93871L6.42357 3.44759L6.20517 2.54198L6.76927 1.96807H6.05137L5.72022 1.229L5.43779 1.96807H4.59571L5.24042 2.54198L4.99536 3.44759ZM9.72127 2.93871L8.99537 3.44759L9.24047 2.54198L8.59567 1.96807H9.43777L9.72027 1.229L10.0514 1.96807H10.7693L10.2052 2.54198L10.4236 3.44759L9.72127 2.93871ZM-3.00465 7.44759L-2.27876 6.93871L-1.57643 7.44759L-1.79479 6.54198L-1.23075 5.96807H-1.94861L-2.27978 5.229L-2.56221 5.96807H-3.4043L-2.75958 6.54198L-3.00465 7.44759ZM1.72124 6.93871L0.995357 7.44759L1.24042 6.54198L0.595707 5.96807H1.43779L1.72022 5.229L2.05139 5.96807H2.76925L2.20521 6.54198L2.42357 7.44759L1.72124 6.93871ZM4.99536 7.44759L5.72124 6.93871L6.42357 7.44759L6.20517 6.54198L6.76927 5.96807H6.05137L5.72022 5.229L5.43779 5.96807H4.59571L5.24042 6.54198L4.99536 7.44759ZM9.72127 6.93871L8.99537 7.44759L9.24047 6.54198L8.59567 5.96807H9.43777L9.72027 5.229L10.0514 5.96807H10.7693L10.2052 6.54198L10.4236 7.44759L9.72127 6.93871ZM-3.00465 11.4476L-2.27876 10.9387L-1.57643 11.4476L-1.79479 10.542L-1.23075 9.96807H-1.94861L-2.27978 9.229L-2.56221 9.96807H-3.4043L-2.75958 10.542L-3.00465 11.4476ZM1.72124 10.9387L0.995357 11.4476L1.24042 10.542L0.595707 9.96807H1.43779L1.72022 9.229L2.05139 9.96807H2.76925L2.20521 10.542L2.42357 11.4476L1.72124 10.9387ZM4.99536 11.4476L5.72124 10.9387L6.42357 11.4476L6.20517 10.542L6.76927 9.96807H6.05137L5.72022 9.229L5.43779 9.96807H4.59571L5.24042 10.542L4.99536 11.4476ZM9.72127 10.9387L8.99537 11.4476L9.24047 10.542L8.59567 9.96807H9.43777L9.72027 9.229L10.0514 9.96807H10.7693L10.2052 10.542L10.4236 11.4476L9.72127 10.9387ZM12.9954 3.44759L13.7213 2.93871L14.4236 3.44759L14.2052 2.54198L14.7693 1.96807H14.0514L13.7203 1.229L13.4378 1.96807H12.5957L13.2405 2.54198L12.9954 3.44759ZM13.7213 6.93871L12.9954 7.44759L13.2405 6.54198L12.5957 5.96807H13.4378L13.7203 5.229L14.0514 5.96807H14.7693L14.2052 6.54198L14.4236 7.44759L13.7213 6.93871ZM12.9954 11.4476L13.7213 10.9387L14.4236 11.4476L14.2052 10.542L14.7693 9.96807H14.0514L13.7203 9.229L13.4378 9.96807H12.5957L13.2405 10.542L12.9954 11.4476ZM-0.278763 4.93871L-1.00464 5.44759L-0.759583 4.54198L-1.40429 3.96807H-0.562213L-0.279783 3.229L0.0513873 3.96807H0.769247L0.205207 4.54198L0.423567 5.44759L-0.278763 4.93871ZM2.99536 5.44759L3.72124 4.93871L4.42357 5.44759L4.20521 4.54198L4.76925 3.96807H4.05139L3.72022 3.229L3.43779 3.96807H2.59571L3.24042 4.54198L2.99536 5.44759ZM7.72127 4.93871L6.99537 5.44759L7.24047 4.54198L6.59567 3.96807H7.43777L7.72027 3.229L8.05137 3.96807H8.76927L8.20517 4.54198L8.42357 5.44759L7.72127 4.93871ZM-1.00464 9.44759L-0.278763 8.93871L0.423567 9.44759L0.205207 8.54198L0.769247 7.96807H0.0513873L-0.279783 7.229L-0.562213 7.96807H-1.40429L-0.759583 8.54198L-1.00464 9.44759ZM3.72124 8.93871L2.99536 9.44759L3.24042 8.54198L2.59571 7.96807H3.43779L3.72022 7.229L4.05139 7.96807H4.76925L4.20521 8.54198L4.42357 9.44759L3.72124 8.93871ZM6.99537 9.44759L7.72127 8.93871L8.42357 9.44759L8.20517 8.54198L8.76927 7.96807H8.05137L7.72027 7.229L7.43777 7.96807H6.59567L7.24047 8.54198L6.99537 9.44759ZM11.7213 4.93871L10.9954 5.44759L11.2405 4.54198L10.5957 3.96807H11.4378L11.7203 3.229L12.0514 3.96807H12.7693L12.2052 4.54198L12.4236 5.44759L11.7213 4.93871ZM10.9954 9.44759L11.7213 8.93871L12.4236 9.44759L12.2052 8.54198L12.7693 7.96807H12.0514L11.7203 7.229L11.4378 7.96807H10.5957L11.2405 8.54198L10.9954 9.44759Z"
            fill="#F7FCFF"
          />
        </g>
        <defs>
          <clipPath id="clip0_983_1725">
            <rect width="24" height="24" rx="12" fill="white" />
          </clipPath>
        </defs>
      </svg>
    </SvgIcon>
  );
}
export function BrazilFlag() {
  return (
    <SvgIcon>
      <svg
        width="24"
        height="25"
        viewBox="0 0 24 25"
        fill="none"
        xmlns="http://www.w3.org/2000/svg"
      >
        <g clipPath="url(#clip0_983_1741)">
          <path
            fillRule="evenodd"
            clipRule="evenodd"
            d="M-4 0.5V24.5H28V0.5H-4Z"
            fill="#009933"
          />
          <path
            fillRule="evenodd"
            clipRule="evenodd"
            d="M11.9265 4.20404L24.1283 12.7075L11.7605 20.6713L-0.191406 12.5427L11.9265 4.20404Z"
            fill="#FFD221"
          />
          <path
            fillRule="evenodd"
            clipRule="evenodd"
            d="M11.9265 4.20404L24.1283 12.7075L11.7605 20.6713L-0.191406 12.5427L11.9265 4.20404Z"
            fill="url(#paint0_linear_983_1741)"
          />
          <path
            fillRule="evenodd"
            clipRule="evenodd"
            d="M12 17.7C14.7614 17.7 17 15.4614 17 12.7C17 9.93853 14.7614 7.69995 12 7.69995C9.2386 7.69995 7 9.93853 7 12.7C7 15.4614 9.2386 17.7 12 17.7Z"
            fill="#2E42A5"
          />
          <path
            fillRule="evenodd"
            clipRule="evenodd"
            d="M10.379 15.07L10.1556 15.1874L10.1983 14.9387L10.0176 14.7626L10.2673 14.7263L10.379 14.5L10.4907 14.7263L10.7404 14.7626L10.5597 14.9387L10.6024 15.1874L10.379 15.07Z"
            fill="#F7FCFF"
          />
          <path
            fillRule="evenodd"
            clipRule="evenodd"
            d="M12.379 15.07L12.1556 15.1874L12.1983 14.9387L12.0176 14.7626L12.2673 14.7263L12.379 14.5L12.4907 14.7263L12.7404 14.7626L12.5597 14.9387L12.6024 15.1874L12.379 15.07Z"
            fill="#F7FCFF"
          />
          <path
            fillRule="evenodd"
            clipRule="evenodd"
            d="M12.379 16.27L12.1556 16.3874L12.1983 16.1387L12.0176 15.9625L12.2673 15.9262L12.379 15.7L12.4907 15.9262L12.7404 15.9625L12.5597 16.1387L12.6024 16.3874L12.379 16.27Z"
            fill="#F7FCFF"
          />
          <path
            fillRule="evenodd"
            clipRule="evenodd"
            d="M11.379 12.07L11.1556 12.1874L11.1983 11.9387L11.0176 11.7626L11.2673 11.7263L11.379 11.5L11.4907 11.7263L11.7404 11.7626L11.5597 11.9387L11.6024 12.1874L11.379 12.07Z"
            fill="#F7FCFF"
          />
          <path
            fillRule="evenodd"
            clipRule="evenodd"
            d="M11.379 14.07L11.1556 14.1874L11.1983 13.9387L11.0176 13.7626L11.2673 13.7263L11.379 13.5L11.4907 13.7263L11.7404 13.7626L11.5597 13.9387L11.6024 14.1874L11.379 14.07Z"
            fill="#F7FCFF"
          />
          <path
            fillRule="evenodd"
            clipRule="evenodd"
            d="M9.97859 13.07L9.75519 13.1874L9.79789 12.9387L9.61719 12.7626L9.86689 12.7263L9.97859 12.5L10.0903 12.7263L10.34 12.7626L10.1593 12.9387L10.2019 13.1874L9.97859 13.07Z"
            fill="#F7FCFF"
          />
          <path
            fillRule="evenodd"
            clipRule="evenodd"
            d="M8.5783 13.87L8.3549 13.9875L8.3976 13.7388L8.2168 13.5626L8.4666 13.5263L8.5783 13.3L8.6899 13.5263L8.9397 13.5626L8.759 13.7388L8.8016 13.9875L8.5783 13.87Z"
            fill="#F7FCFF"
          />
          <path
            fillRule="evenodd"
            clipRule="evenodd"
            d="M13.1798 10.47L12.9565 10.5875L12.9991 10.3387L12.8184 10.1626L13.0682 10.1263L13.1798 9.90002L13.2915 10.1263L13.5413 10.1626L13.3605 10.3387L13.4032 10.5875L13.1798 10.47Z"
            fill="#F7FCFF"
          />
          <path
            d="M7 12L7.5 10C11.6854 10.2946 14.6201 11.2147 17 13.5L16.5 15C14.4373 13.0193 10.7839 12.2664 7 12Z"
            fill="#F7FCFF"
          />
        </g>
        <defs>
          <linearGradient
            id="paint0_linear_983_1741"
            x1="27.9997"
            y1="24.5"
            x2="27.9997"
            y2="0.5"
            gradientUnits="userSpaceOnUse"
          >
            <stop stopColor="#FFC600" />
            <stop offset="1" stopColor="#FFDE42" />
          </linearGradient>
          <clipPath id="clip0_983_1741">
            <rect y="0.5" width="24" height="24" rx="12" fill="white" />
          </clipPath>
        </defs>
      </svg>
    </SvgIcon>
  );
}

export function GlobeFlag() {
  return (
    <SvgIcon>
      <svg
        width="24"
        height="25"
        viewBox="0 0 24 25"
        fill="none"
        xmlns="http://www.w3.org/2000/svg"
      >
        <g clipPath="url(#clip0_986_1789)">
          <circle cx="12" cy="12.5" r="12" fill="#007FFF" />
          <path
            d="M12 0.5C5.376 0.5 0 5.876 0 12.5C0 19.124 5.376 24.5 12 24.5C18.624 24.5 24 19.124 24 12.5C24 5.876 18.624 0.5 12 0.5ZM10.8 22.016C6.06 21.428 2.4 17.396 2.4 12.5C2.4 11.756 2.496 11.048 2.652 10.352L8.4 16.1V17.3C8.4 18.62 9.48 19.7 10.8 19.7V22.016ZM19.08 18.968C18.768 17.996 17.88 17.3 16.8 17.3H15.6V13.7C15.6 13.04 15.06 12.5 14.4 12.5H7.2V10.1H9.6C10.26 10.1 10.8 9.56 10.8 8.9V6.5H13.2C14.52 6.5 15.6 5.42 15.6 4.1V3.608C19.116 5.036 21.6 8.48 21.6 12.5C21.6 14.996 20.64 17.264 19.08 18.968Z"
            fill="#3EE07F"
          />
        </g>
        <defs>
          <clipPath id="clip0_986_1789">
            <rect width="24" height="24" fill="white" transform="translate(0 0.5)" />
          </clipPath>
        </defs>
      </svg>
    </SvgIcon>
  );
}


===== .\src\internals\data\gridData.tsx =====
import * as React from 'react';
import Avatar from '@mui/material/Avatar';
import Chip from '@mui/material/Chip';
import { GridCellParams, GridRowsProp, GridColDef } from '@mui/x-data-grid';
import { SparkLineChart } from '@mui/x-charts/SparkLineChart';

type SparkLineData = number[];

function getDaysInMonth(month: number, year: number) {
  const date = new Date(year, month, 0);
  const monthName = date.toLocaleDateString('en-US', {
    month: 'short',
  });
  const daysInMonth = date.getDate();
  const days = [];
  let i = 1;
  while (days.length < daysInMonth) {
    days.push(`${monthName} ${i}`);
    i += 1;
  }
  return days;
}

function renderSparklineCell(params: GridCellParams<SparkLineData, any>) {
  const data = getDaysInMonth(4, 2024);
  const { value, colDef } = params;

  if (!value || value.length === 0) {
    return null;
  }

  return (
    <div style={{ display: 'flex', alignItems: 'center', height: '100%' }}>
      <SparkLineChart
        data={value}
        width={colDef.computedWidth || 100}
        height={32}
        plotType="bar"
        showHighlight
        showTooltip
        color="hsl(210, 98%, 42%)"
        xAxis={{
          scaleType: 'band',
          data,
        }}
      />
    </div>
  );
}

function renderStatus(status: 'Online' | 'Offline') {
  const colors: { [index: string]: 'success' | 'default' } = {
    Online: 'success',
    Offline: 'default',
  };

  return <Chip label={status} color={colors[status]} size="small" />;
}

export function renderAvatar(
  params: GridCellParams<{ name: string; color: string }, any, any>,
) {
  if (params.value == null) {
    return '';
  }

  return (
    <Avatar
      sx={{
        backgroundColor: params.value.color,
        width: '24px',
        height: '24px',
        fontSize: '0.85rem',
      }}
    >
      {params.value.name.toUpperCase().substring(0, 1)}
    </Avatar>
  );
}

export const columns: GridColDef[] = [
  { field: 'pageTitle', headerName: 'Page Title', flex: 1.5, minWidth: 200 },
  {
    field: 'status',
    headerName: 'Status',
    flex: 0.5,
    minWidth: 80,
    renderCell: (params) => renderStatus(params.value as any),
  },
  {
    field: 'users',
    headerName: 'Users',
    headerAlign: 'right',
    align: 'right',
    flex: 1,
    minWidth: 80,
  },
  {
    field: 'eventCount',
    headerName: 'Event Count',
    headerAlign: 'right',
    align: 'right',
    flex: 1,
    minWidth: 100,
  },
  {
    field: 'viewsPerUser',
    headerName: 'Views per User',
    headerAlign: 'right',
    align: 'right',
    flex: 1,
    minWidth: 120,
  },
  {
    field: 'averageTime',
    headerName: 'Average Time',
    headerAlign: 'right',
    align: 'right',
    flex: 1,
    minWidth: 100,
  },
  {
    field: 'conversions',
    headerName: 'Daily Conversions',
    flex: 1,
    minWidth: 150,
    renderCell: renderSparklineCell,
  },
];

export const rows: GridRowsProp = [
  {
    id: 1,
    pageTitle: 'Homepage Overview',
    status: 'Online',
    eventCount: 8345,
    users: 212423,
    viewsPerUser: 18.5,
    averageTime: '2m 15s',
    conversions: [
      469172, 488506, 592287, 617401, 640374, 632751, 668638, 807246, 749198, 944863,
      911787, 844815, 992022, 1143838, 1446926, 1267886, 1362511, 1348746, 1560533,
      1670690, 1695142, 1916613, 1823306, 1683646, 2025965, 2529989, 3263473,
      3296541, 3041524, 2599497,
    ],
  },
  {
    id: 2,
    pageTitle: 'Product Details - Gadgets',
    status: 'Online',
    eventCount: 5653,
    users: 172240,
    viewsPerUser: 9.7,
    averageTime: '2m 30s',
    conversions: [
      0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
      557488, 1341471, 2044561, 2206438,
    ],
  },
  {
    id: 3,
    pageTitle: 'Checkout Process - Step 1',
    status: 'Offline',
    eventCount: 3455,
    users: 58240,
    viewsPerUser: 15.2,
    averageTime: '2m 10s',
    conversions: [
      166896, 190041, 248686, 226746, 261744, 271890, 332176, 381123, 396435, 495620,
      520278, 460839, 704158, 559134, 681089, 712384, 765381, 771374, 851314, 907947,
      903675, 1049642, 1003160, 881573, 1072283, 1139115, 1382701, 1395655, 1355040,
      1381571,
    ],
  },
  {
    id: 4,
    pageTitle: 'User Profile Dashboard',
    status: 'Online',
    eventCount: 112543,
    users: 96240,
    viewsPerUser: 4.5,
    averageTime: '2m 40s',
    conversions: [
      264651, 311845, 436558, 439385, 520413, 533380, 562363, 533793, 558029, 791126,
      649082, 566792, 723451, 737827, 890859, 935554, 1044397, 1022973, 1129827,
      1145309, 1195630, 1358925, 1373160, 1172679, 1340106, 1396974, 1623641,
      1687545, 1581634, 1550291,
    ],
  },
  {
    id: 5,
    pageTitle: 'Article Listing - Tech News',
    status: 'Offline',
    eventCount: 3653,
    users: 142240,
    viewsPerUser: 3.1,
    averageTime: '2m 55s',
    conversions: [
      251871, 262216, 402383, 396459, 378793, 406720, 447538, 451451, 457111, 589821,
      640744, 504879, 626099, 662007, 754576, 768231, 833019, 851537, 972306,
      1014831, 1027570, 1189068, 1119099, 987244, 1197954, 1310721, 1480816, 1577547,
      1854053, 1791831,
    ],
  },
  {
    id: 6,
    pageTitle: 'FAQs - Customer Support',
    status: 'Online',
    eventCount: 106543,
    users: 15240,
    viewsPerUser: 7.2,
    averageTime: '2m 20s',
    conversions: [
      13671, 16918, 27272, 34315, 42212, 56369, 64241, 77857, 70680, 91093, 108306,
      94734, 132289, 133860, 147706, 158504, 192578, 207173, 220052, 233496, 250091,
      285557, 268555, 259482, 274019, 321648, 359801, 399502, 447249, 497403,
    ],
  },
  {
    id: 7,
    pageTitle: 'Product Comparison - Laptops',
    status: 'Offline',
    eventCount: 7853,
    users: 32240,
    viewsPerUser: 6.5,
    averageTime: '2m 50s',
    conversions: [
      93682, 107901, 144919, 151769, 170804, 183736, 201752, 219792, 227887, 295382,
      309600, 278050, 331964, 356826, 404896, 428090, 470245, 485582, 539056, 582112,
      594289, 671915, 649510, 574911, 713843, 754965, 853020, 916793, 960158, 984265,
    ],
  },
  {
    id: 8,
    pageTitle: 'Shopping Cart - Electronics',
    status: 'Online',
    eventCount: 8563,
    users: 48240,
    viewsPerUser: 4.3,
    averageTime: '3m 10s',
    conversions: [
      52394, 63357, 82800, 105466, 128729, 144472, 172148, 197919, 212302, 278153,
      290499, 249824, 317499, 333024, 388925, 410576, 462099, 488477, 533956, 572307,
      591019, 681506, 653332, 581234, 719038, 783496, 911609, 973328, 1056071,
      1112940,
    ],
  },
  {
    id: 9,
    pageTitle: 'Payment Confirmation - Bank Transfer',
    status: 'Offline',
    eventCount: 4563,
    users: 18240,
    viewsPerUser: 2.7,
    averageTime: '3m 25s',
    conversions: [
      15372, 16901, 25489, 30148, 40857, 51136, 64627, 75804, 89633, 100407, 114908,
      129957, 143568, 158509, 174822, 192488, 211512, 234702, 258812, 284328, 310431,
      338186, 366582, 396749, 428788, 462880, 499125, 537723, 578884, 622825,
    ],
  },
  {
    id: 10,
    pageTitle: 'Product Reviews - Smartphones',
    status: 'Online',
    eventCount: 9863,
    users: 28240,
    viewsPerUser: 5.1,
    averageTime: '3m 05s',
    conversions: [
      70211, 89234, 115676, 136021, 158744, 174682, 192890, 218073, 240926, 308190,
      317552, 279834, 334072, 354955, 422153, 443911, 501486, 538091, 593724, 642882,
      686539, 788615, 754813, 687955, 883645, 978347, 1142551, 1233074, 1278155,
      1356724,
    ],
  },
  {
    id: 11,
    pageTitle: 'Subscription Management - Services',
    status: 'Offline',
    eventCount: 6563,
    users: 24240,
    viewsPerUser: 4.8,
    averageTime: '3m 15s',
    conversions: [
      49662, 58971, 78547, 93486, 108722, 124901, 146422, 167883, 189295, 230090,
      249837, 217828, 266494, 287537, 339586, 363299, 412855, 440900, 490111, 536729,
      580591, 671635, 655812, 576431, 741632, 819296, 971762, 1052605, 1099234,
      1173591,
    ],
  },
  {
    id: 12,
    pageTitle: 'Order Tracking - Shipments',
    status: 'Online',
    eventCount: 12353,
    users: 38240,
    viewsPerUser: 3.5,
    averageTime: '3m 20s',
    conversions: [
      29589, 37965, 55800, 64672, 77995, 91126, 108203, 128900, 148232, 177159,
      193489, 164471, 210765, 229977, 273802, 299381, 341092, 371567, 413812, 457693,
      495920, 564785, 541022, 491680, 618096, 704926, 833365, 904313, 974622,
      1036567,
    ],
  },
  {
    id: 13,
    pageTitle: 'Customer Feedback - Surveys',
    status: 'Offline',
    eventCount: 5863,
    users: 13240,
    viewsPerUser: 2.3,
    averageTime: '3m 30s',
    conversions: [
      8472, 9637, 14892, 19276, 23489, 28510, 33845, 39602, 45867, 52605, 59189,
      65731, 76021, 85579, 96876, 108515, 119572, 131826, 145328, 160192, 176528,
      196662, 217929, 239731, 262920, 289258, 315691, 342199, 370752, 402319,
    ],
  },
  {
    id: 14,
    pageTitle: 'Account Settings - Preferences',
    status: 'Online',
    eventCount: 7853,
    users: 18240,
    viewsPerUser: 3.2,
    averageTime: '3m 15s',
    conversions: [
      15792, 16948, 22728, 25491, 28412, 31268, 34241, 37857, 42068, 46893, 51098,
      55734, 60780, 66421, 72680, 79584, 87233, 95711, 105285, 115814, 127509,
      140260, 154086, 169495, 186445, 205109, 225580, 247983, 272484, 299280,
    ],
  },
  {
    id: 15,
    pageTitle: 'Login Page - Authentication',
    status: 'Offline',
    eventCount: 9563,
    users: 24240,
    viewsPerUser: 2.5,
    averageTime: '3m 35s',
    conversions: [
      25638, 28355, 42089, 53021, 66074, 80620, 97989, 118202, 142103, 166890,
      193869, 225467, 264089, 307721, 358059, 417835, 488732, 573924, 674878, 794657,
      938542, 1111291, 1313329, 1543835, 1812156, 2123349, 2484926, 2907023, 3399566,
      3973545,
    ],
  },
  {
    id: 16,
    pageTitle: 'Promotions - Seasonal Sales',
    status: 'Online',
    eventCount: 13423,
    users: 54230,
    viewsPerUser: 7.8,
    averageTime: '2m 45s',
    conversions: [
      241732, 256384, 289465, 321423, 345672, 378294, 398472, 420364, 436278, 460192,
      495374, 510283, 532489, 559672, 587312, 610982, 629385, 654732, 678925, 704362,
      725182, 749384, 772361, 798234, 819472, 846291, 872183, 894673, 919283, 945672,
    ],
  },
  {
    id: 17,
    pageTitle: 'Tutorials - How to Guides',
    status: 'Offline',
    eventCount: 4234,
    users: 19342,
    viewsPerUser: 5.2,
    averageTime: '3m 05s',
    conversions: [
      12345, 14567, 16789, 18901, 21023, 23145, 25267, 27389, 29501, 31623, 33745,
      35867, 37989, 40101, 42223, 44345, 46467, 48589, 50701, 52823, 54945, 57067,
      59189, 61301, 63423, 65545, 67667, 69789, 71901, 74023,
    ],
  },
  {
    id: 18,
    pageTitle: 'Blog Posts - Tech Insights',
    status: 'Online',
    eventCount: 8567,
    users: 34234,
    viewsPerUser: 6.3,
    averageTime: '2m 50s',
    conversions: [
      23456, 25678, 27890, 30102, 32324, 34546, 36768, 38980, 41202, 43424, 45646,
      47868, 50080, 52302, 54524, 56746, 58968, 61180, 63402, 65624, 67846, 70068,
      72290, 74502, 76724, 78946, 81168, 83380, 85602, 87824,
    ],
  },
  {
    id: 19,
    pageTitle: 'Events - Webinars',
    status: 'Offline',
    eventCount: 3456,
    users: 19234,
    viewsPerUser: 4.5,
    averageTime: '3m 20s',
    conversions: [
      123456, 145678, 167890, 190012, 212324, 234546, 256768, 278980, 301202, 323424,
      345646, 367868, 390080, 412302, 434524, 456746, 478968, 501180, 523402, 545624,
      567846, 590068, 612290, 634502, 656724, 678946, 701168, 723380, 745602, 767824,
    ],
  },
  {
    id: 20,
    pageTitle: 'Support - Contact Us',
    status: 'Online',
    eventCount: 6734,
    users: 27645,
    viewsPerUser: 3.9,
    averageTime: '2m 55s',
    conversions: [
      234567, 256789, 278901, 301023, 323245, 345467, 367689, 389801, 412023, 434245,
      456467, 478689, 500801, 523023, 545245, 567467, 589689, 611801, 634023, 656245,
      678467, 700689, 722801, 745023, 767245, 789467, 811689, 833801, 856023, 878245,
    ],
  },
  {
    id: 21,
    pageTitle: 'Case Studies - Success Stories',
    status: 'Offline',
    eventCount: 4567,
    users: 19345,
    viewsPerUser: 6.1,
    averageTime: '3m 10s',
    conversions: [
      34567, 36789, 38901, 41023, 43145, 45267, 47389, 49501, 51623, 53745, 55867,
      57989, 60101, 62223, 64345, 66467, 68589, 70701, 72823, 74945, 77067, 79189,
      81301, 83423, 85545, 87667, 89789, 91901, 94023, 96145,
    ],
  },
  {
    id: 22,
    pageTitle: 'News - Industry Updates',
    status: 'Online',
    eventCount: 7856,
    users: 34567,
    viewsPerUser: 5.7,
    averageTime: '3m 05s',
    conversions: [
      45678, 47890, 50102, 52324, 54546, 56768, 58980, 61202, 63424, 65646, 67868,
      70080, 72302, 74524, 76746, 78968, 81180, 83402, 85624, 87846, 90068, 92290,
      94502, 96724, 98946, 101168, 103380, 105602, 107824, 110046,
    ],
  },
  {
    id: 23,
    pageTitle: 'Forum - User Discussions',
    status: 'Offline',
    eventCount: 5678,
    users: 23456,
    viewsPerUser: 4.2,
    averageTime: '2m 40s',
    conversions: [
      56789, 58901, 61023, 63145, 65267, 67389, 69501, 71623, 73745, 75867, 77989,
      80101, 82223, 84345, 86467, 88589, 90701, 92823, 94945, 97067, 99189, 101301,
      103423, 105545, 107667, 109789, 111901, 114023, 116145, 118267,
    ],
  },
  {
    id: 24,
    pageTitle: 'Documentation - API Reference',
    status: 'Online',
    eventCount: 6789,
    users: 27689,
    viewsPerUser: 5.0,
    averageTime: '3m 00s',
    conversions: [
      67890, 70102, 72324, 74546, 76768, 78980, 81202, 83424, 85646, 87868, 90080,
      92302, 94524, 96746, 98968, 101180, 103402, 105624, 107846, 110068, 112290,
      114502, 116724, 118946, 121168, 123380, 125602, 127824, 130046, 132268,
    ],
  },
  {
    id: 25,
    pageTitle: 'Services - Consulting',
    status: 'Offline',
    eventCount: 4563,
    users: 19240,
    viewsPerUser: 6.4,
    averageTime: '3m 25s',
    conversions: [
      345678, 367890, 390012, 412324, 434546, 456768, 478980, 501202, 523424, 545646,
      567868, 590080, 612302, 634524, 656746, 678968, 701180, 723402, 745624, 767846,
      790068, 812290, 834502, 856724, 878946, 901168, 923380, 945602, 967824, 990046,
    ],
  },
  {
    id: 26,
    pageTitle: 'Feedback - User Reviews',
    status: 'Online',
    eventCount: 8564,
    users: 34240,
    viewsPerUser: 6.2,
    averageTime: '3m 15s',
    conversions: [
      123478, 145690, 167912, 190134, 212356, 234578, 256790, 279012, 301234, 323456,
      345678, 367890, 390012, 412234, 434456, 456678, 478890, 501012, 523234, 545456,
      567678, 589890, 612012, 634234, 656456, 678678, 700890, 723012, 745234, 767456,
    ],
  },
  {
    id: 27,
    pageTitle: 'Profiles - Team Members',
    status: 'Offline',
    eventCount: 5634,
    users: 23423,
    viewsPerUser: 5.5,
    averageTime: '2m 45s',
    conversions: [
      345123, 367345, 389567, 411789, 434012, 456234, 478456, 500678, 522901, 545123,
      567345, 589567, 611789, 634012, 656234, 678456, 700678, 722901, 745123, 767345,
      789567, 811789, 834012, 856234, 878456, 900678, 922901, 945123, 967345, 989567,
    ],
  },
  {
    id: 28,
    pageTitle: 'Notifications - Alerts',
    status: 'Online',
    eventCount: 6745,
    users: 27654,
    viewsPerUser: 4.9,
    averageTime: '3m 10s',
    conversions: [
      456123, 478345, 500567, 522789, 545012, 567234, 589456, 611678, 633901, 656123,
      678345, 700567, 722789, 745012, 767234, 789456, 811678, 833901, 856123, 878345,
      900567, 922789, 945012, 967234, 989456, 1011678, 1033901, 1056123, 1078345,
      1100567,
    ],
  },
  {
    id: 29,
    pageTitle: 'Dashboard - Metrics',
    status: 'Offline',
    eventCount: 5678,
    users: 23456,
    viewsPerUser: 6.3,
    averageTime: '2m 50s',
    conversions: [
      567890, 590112, 612334, 634556, 656778, 678990, 701212, 723434, 745656, 767878,
      790100, 812322, 834544, 856766, 878988, 901210, 923432, 945654, 967876, 990098,
      1012320, 1034542, 1056764, 1078986, 1101208, 1123430, 1145652, 1167874,
      1190096, 1212318,
    ],
  },
  {
    id: 30,
    pageTitle: 'Reports - Monthly Analysis',
    status: 'Online',
    eventCount: 7890,
    users: 34567,
    viewsPerUser: 5.9,
    averageTime: '3m 20s',
    conversions: [
      678901, 701123, 723345, 745567, 767789, 790011, 812233, 834455, 856677, 878899,
      901121, 923343, 945565, 967787, 990009, 1012231, 1034453, 1056675, 1078897,
      1101119, 1123341, 1145563, 1167785, 1190007, 1212229, 1234451, 1256673,
      1278895, 1301117, 1323339,
    ],
  },
  {
    id: 31,
    pageTitle: 'Training - Employee Onboarding',
    status: 'Offline',
    eventCount: 3456,
    users: 19234,
    viewsPerUser: 6.1,
    averageTime: '3m 10s',
    conversions: [
      789012, 811234, 833456, 855678, 877890, 900112, 922334, 944556, 966778, 989000,
      1011222, 1033444, 1055666, 1077888, 1100110, 1122332, 1144554, 1166776,
      1188998, 1211220, 1233442, 1255664, 1277886, 1300108, 1322330, 1344552,
      1366774, 1388996, 1411218, 1433440,
    ],
  },
  {
    id: 32,
    pageTitle: 'Resources - Knowledge Base',
    status: 'Online',
    eventCount: 5678,
    users: 23456,
    viewsPerUser: 4.7,
    averageTime: '3m 25s',
    conversions: [
      890123, 912345, 934567, 956789, 979012, 1001234, 1023456, 1045678, 1067890,
      1090123, 1112345, 1134567, 1156789, 1179012, 1201234, 1223456, 1245678,
      1267890, 1290123, 1312345, 1334567, 1356789, 1379012, 1401234, 1423456,
      1445678, 1467890, 1490123, 1512345, 1534567,
    ],
  },
  {
    id: 33,
    pageTitle: 'Settings - Privacy Controls',
    status: 'Offline',
    eventCount: 6789,
    users: 27689,
    viewsPerUser: 5.8,
    averageTime: '3m 05s',
    conversions: [
      901234, 923456, 945678, 967890, 990112, 1012334, 1034556, 1056778, 1079000,
      1101222, 1123444, 1145666, 1167888, 1190110, 1212332, 1234554, 1256776,
      1278998, 1301220, 1323442, 1345664, 1367886, 1390108, 1412330, 1434552,
      1456774, 1478996, 1501218, 1523440, 1545662,
    ],
  },
  {
    id: 34,
    pageTitle: 'Integrations - Third-Party Services',
    status: 'Online',
    eventCount: 4567,
    users: 19345,
    viewsPerUser: 4.4,
    averageTime: '2m 50s',
    conversions: [
      123457, 145679, 167891, 190113, 212335, 234557, 256779, 279001, 301223, 323445,
      345667, 367889, 390011, 412233, 434455, 456677, 478899, 501121, 523343, 545565,
      567787, 590009, 612231, 634453, 656675, 678897, 701119, 723341, 745563, 767785,
    ],
  },
  {
    id: 35,
    pageTitle: 'Account - Billing Information',
    status: 'Offline',
    eventCount: 7890,
    users: 34567,
    viewsPerUser: 5.4,
    averageTime: '3m 00s',
    conversions: [
      234568, 256790, 278912, 301134, 323356, 345578, 367790, 390012, 412234, 434456,
      456678, 478890, 501112, 523334, 545556, 567778, 590000, 612222, 634444, 656666,
      678888, 701110, 723332, 745554, 767776, 789998, 812220, 834442, 856664, 878886,
    ],
  },
];


===== .\src\lib\ai.ts =====


===== .\src\theme\AppTheme.tsx =====
// src/theme/AppTheme.tsx
import * as React from 'react';
import { ThemeProvider, createTheme } from '@mui/material/styles';
import type { ThemeOptions } from '@mui/material/styles';
import { inputsCustomizations } from './customizations/inputs';
import { dataDisplayCustomizations } from './customizations/dataDisplay';
import { feedbackCustomizations } from './customizations/feedback';
import { navigationCustomizations } from './customizations/navigation';
import { surfacesCustomizations } from './customizations/surfaces';
import { colorSchemes, typography, shadows, shape } from './themePrimitives';

interface AppThemeProps {
  children: React.ReactNode;
  /**
   * This is for the docs site. You can ignore it or remove it.
   */
  disableCustomTheme?: boolean;
  themeComponents?: ThemeOptions['components'];
}

export default function AppTheme(props: AppThemeProps) {
  const { children, disableCustomTheme, themeComponents } = props;
  const theme = React.useMemo(() => {
    return disableCustomTheme
      ? {}
      : createTheme({
          // --- FIX: Đồng bộ hóa cấu hình với theme gốc ---
          cssVariables: {
            colorSchemeSelector: 'class', // Thay đổi từ 'data-mui-color-scheme'
            cssVarPrefix: 'template',
          },
          colorSchemes,
          typography,
          shadows,
          shape,
          components: {
            ...inputsCustomizations,
            ...dataDisplayCustomizations,
            ...feedbackCustomizations,
            ...navigationCustomizations,
            ...surfacesCustomizations,
            ...themeComponents,
          },
        });
  }, [disableCustomTheme, themeComponents]);
  if (disableCustomTheme) {
    return <React.Fragment>{children}</React.Fragment>;
  }
  return (
    <ThemeProvider theme={theme} disableTransitionOnChange>
      {children}
    </ThemeProvider>
  );
}

===== .\src\theme\ColorModeIconDropdown.tsx =====
import * as React from 'react';
import DarkModeIcon from '@mui/icons-material/DarkModeRounded';
import LightModeIcon from '@mui/icons-material/LightModeRounded';
import Box from '@mui/material/Box';
import IconButton, { IconButtonOwnProps } from '@mui/material/IconButton';
import Menu from '@mui/material/Menu';
import MenuItem from '@mui/material/MenuItem';
import { useColorScheme } from '@mui/material/styles';

export default function ColorModeIconDropdown(props: IconButtonOwnProps) {
  const { mode, systemMode, setMode } = useColorScheme();
  const [anchorEl, setAnchorEl] = React.useState<null | HTMLElement>(null);
  const open = Boolean(anchorEl);
  const handleClick = (event: React.MouseEvent<HTMLElement>) => {
    setAnchorEl(event.currentTarget);
  };
  const handleClose = () => {
    setAnchorEl(null);
  };
  const handleMode = (targetMode: 'system' | 'light' | 'dark') => () => {
    setMode(targetMode);
    handleClose();
  };
  if (!mode) {
    return (
      <Box
        data-screenshot="toggle-mode"
        sx={(theme) => ({
          verticalAlign: 'bottom',
          display: 'inline-flex',
          width: '2.25rem',
          height: '2.25rem',
          borderRadius: (theme.vars || theme).shape.borderRadius,
          border: '1px solid',
          borderColor: (theme.vars || theme).palette.divider,
        })}
      />
    );
  }
  const resolvedMode = (systemMode || mode) as 'light' | 'dark';
  const icon = {
    light: <LightModeIcon />,
    dark: <DarkModeIcon />,
  }[resolvedMode];
  return (
    <React.Fragment>
      <IconButton
        data-screenshot="toggle-mode"
        onClick={handleClick}
        disableRipple
        size="small"
        aria-controls={open ? 'color-scheme-menu' : undefined}
        aria-haspopup="true"
        aria-expanded={open ? 'true' : undefined}
        {...props}
      >
        {icon}
      </IconButton>
      <Menu
        anchorEl={anchorEl}
        id="account-menu"
        open={open}
        onClose={handleClose}
        onClick={handleClose}
        slotProps={{
          paper: {
            variant: 'outlined',
            elevation: 0,
            sx: {
              my: '4px',
            },
          },
        }}
        transformOrigin={{ horizontal: 'right', vertical: 'top' }}
        anchorOrigin={{ horizontal: 'right', vertical: 'bottom' }}
      >
        <MenuItem selected={mode === 'system'} onClick={handleMode('system')}>
          System
        </MenuItem>
        <MenuItem selected={mode === 'light'} onClick={handleMode('light')}>
          Light
        </MenuItem>
        <MenuItem selected={mode === 'dark'} onClick={handleMode('dark')}>
          Dark
        </MenuItem>
      </Menu>
    </React.Fragment>
  );
}


===== .\src\theme\ColorModeSelect.tsx =====
import * as React from 'react';
import { useColorScheme } from '@mui/material/styles';
import MenuItem from '@mui/material/MenuItem';
import Select, { SelectProps } from '@mui/material/Select';

export default function ColorModeSelect(props: SelectProps) {
  const { mode, setMode } = useColorScheme();
  if (!mode) {
    return null;
  }
  return (
    <Select
      value={mode}
      onChange={(event) =>
        setMode(event.target.value as 'system' | 'light' | 'dark')
      }
      SelectDisplayProps={{
        // @ts-ignore
        'data-screenshot': 'toggle-mode',
      }}
      {...props}
    >
      <MenuItem value="system">System</MenuItem>
      <MenuItem value="light">Light</MenuItem>
      <MenuItem value="dark">Dark</MenuItem>
    </Select>
  );
}


===== .\src\theme\themePrimitives.ts =====
import { createTheme, alpha, PaletteMode, Shadows } from '@mui/material/styles';

declare module '@mui/material/Paper' {
  interface PaperPropsVariantOverrides {
    highlighted: true;
  }
}
declare module '@mui/material/styles' {
  interface ColorRange {
    50: string;
    100: string;
    200: string;
    300: string;
    400: string;
    500: string;
    600: string;
    700: string;
    800: string;
    900: string;
  }

  interface PaletteColor extends ColorRange {}

  interface Palette {
    baseShadow: string;
  }
}

const defaultTheme = createTheme();

const customShadows: Shadows = [...defaultTheme.shadows];

export const brand = {
  50: 'hsl(210, 100%, 95%)',
  100: 'hsl(210, 100%, 92%)',
  200: 'hsl(210, 100%, 80%)',
  300: 'hsl(210, 100%, 65%)',
  400: 'hsl(210, 98%, 48%)',
  500: 'hsl(210, 98%, 42%)',
  600: 'hsl(210, 98%, 55%)',
  700: 'hsl(210, 100%, 35%)',
  800: 'hsl(210, 100%, 16%)',
  900: 'hsl(210, 100%, 21%)',
};

export const gray = {
  50: 'hsl(220, 35%, 97%)',
  100: 'hsl(220, 30%, 94%)',
  200: 'hsl(220, 20%, 88%)',
  300: 'hsl(220, 20%, 80%)',
  400: 'hsl(220, 20%, 65%)',
  500: 'hsl(220, 20%, 42%)',
  600: 'hsl(220, 20%, 35%)',
  700: 'hsl(220, 20%, 25%)',
  800: 'hsl(220, 30%, 6%)',
  900: 'hsl(220, 35%, 3%)',
};

export const green = {
  50: 'hsl(120, 80%, 98%)',
  100: 'hsl(120, 75%, 94%)',
  200: 'hsl(120, 75%, 87%)',
  300: 'hsl(120, 61%, 77%)',
  400: 'hsl(120, 44%, 53%)',
  500: 'hsl(120, 59%, 30%)',
  600: 'hsl(120, 70%, 25%)',
  700: 'hsl(120, 75%, 16%)',
  800: 'hsl(120, 84%, 10%)',
  900: 'hsl(120, 87%, 6%)',
};

export const orange = {
  50: 'hsl(45, 100%, 97%)',
  100: 'hsl(45, 92%, 90%)',
  200: 'hsl(45, 94%, 80%)',
  300: 'hsl(45, 90%, 65%)',
  400: 'hsl(45, 90%, 40%)',
  500: 'hsl(45, 90%, 35%)',
  600: 'hsl(45, 91%, 25%)',
  700: 'hsl(45, 94%, 20%)',
  800: 'hsl(45, 95%, 16%)',
  900: 'hsl(45, 93%, 12%)',
};

export const red = {
  50: 'hsl(0, 100%, 97%)',
  100: 'hsl(0, 92%, 90%)',
  200: 'hsl(0, 94%, 80%)',
  300: 'hsl(0, 90%, 65%)',
  400: 'hsl(0, 90%, 40%)',
  500: 'hsl(0, 90%, 30%)',
  600: 'hsl(0, 91%, 25%)',
  700: 'hsl(0, 94%, 18%)',
  800: 'hsl(0, 95%, 12%)',
  900: 'hsl(0, 93%, 6%)',
};

export const getDesignTokens = (mode: PaletteMode) => {
  customShadows[1] =
    mode === 'dark'
      ? 'hsla(220, 30%, 5%, 0.7) 0px 4px 16px 0px, hsla(220, 25%, 10%, 0.8) 0px 8px 16px -5px'
      : 'hsla(220, 30%, 5%, 0.07) 0px 4px 16px 0px, hsla(220, 25%, 10%, 0.07) 0px 8px 16px -5px';

  return {
    palette: {
      mode,
      primary: {
        light: brand[200],
        main: brand[400],
        dark: brand[700],
        contrastText: brand[50],
        ...(mode === 'dark' && {
          contrastText: brand[50],
          light: brand[300],
          main: brand[400],
          dark: brand[700],
        }),
      },
      info: {
        light: brand[100],
        main: brand[300],
        dark: brand[600],
        contrastText: gray[50],
        ...(mode === 'dark' && {
          contrastText: brand[300],
          light: brand[500],
          main: brand[700],
          dark: brand[900],
        }),
      },
      warning: {
        light: orange[300],
        main: orange[400],
        dark: orange[800],
        ...(mode === 'dark' && {
          light: orange[400],
          main: orange[500],
          dark: orange[700],
        }),
      },
      error: {
        light: red[300],
        main: red[400],
        dark: red[800],
        ...(mode === 'dark' && {
          light: red[400],
          main: red[500],
          dark: red[700],
        }),
      },
      success: {
        light: green[300],
        main: green[400],
        dark: green[800],
        ...(mode === 'dark' && {
          light: green[400],
          main: green[500],
          dark: green[700],
        }),
      },
      grey: {
        ...gray,
      },
      divider: mode === 'dark' ? alpha(gray[700], 0.6) : alpha(gray[300], 0.4),
      background: {
        default: 'hsl(0, 0%, 99%)',
        paper: 'hsl(220, 35%, 97%)',
        ...(mode === 'dark' && { default: gray[900], paper: 'hsl(220, 30%, 7%)' }),
      },
      text: {
        primary: gray[800],
        secondary: gray[600],
        warning: orange[400],
        ...(mode === 'dark' && { primary: 'hsl(0, 0%, 100%)', secondary: gray[400] }),
      },
      action: {
        hover: alpha(gray[200], 0.2),
        selected: `${alpha(gray[200], 0.3)}`,
        ...(mode === 'dark' && {
          hover: alpha(gray[600], 0.2),
          selected: alpha(gray[600], 0.3),
        }),
      },
    },
    typography: {
      fontFamily: 'Inter, sans-serif',
      h1: {
        fontSize: defaultTheme.typography.pxToRem(48),
        fontWeight: 600,
        lineHeight: 1.2,
        letterSpacing: -0.5,
      },
      h2: {
        fontSize: defaultTheme.typography.pxToRem(36),
        fontWeight: 600,
        lineHeight: 1.2,
      },
      h3: {
        fontSize: defaultTheme.typography.pxToRem(30),
        lineHeight: 1.2,
      },
      h4: {
        fontSize: defaultTheme.typography.pxToRem(24),
        fontWeight: 600,
        lineHeight: 1.5,
      },
      h5: {
        fontSize: defaultTheme.typography.pxToRem(20),
        fontWeight: 600,
      },
      h6: {
        fontSize: defaultTheme.typography.pxToRem(18),
        fontWeight: 600,
      },
      subtitle1: {
        fontSize: defaultTheme.typography.pxToRem(18),
      },
      subtitle2: {
        fontSize: defaultTheme.typography.pxToRem(14),
        fontWeight: 500,
      },
      body1: {
        fontSize: defaultTheme.typography.pxToRem(14),
      },
      body2: {
        fontSize: defaultTheme.typography.pxToRem(14),
        fontWeight: 400,
      },
      caption: {
        fontSize: defaultTheme.typography.pxToRem(12),
        fontWeight: 400,
      },
    },
    shape: {
      borderRadius: 8,
    },
    shadows: customShadows,
  };
};

export const colorSchemes = {
  light: {
    palette: {
      primary: {
        light: brand[200],
        main: brand[400],
        dark: brand[700],
        contrastText: brand[50],
      },
      info: {
        light: brand[100],
        main: brand[300],
        dark: brand[600],
        contrastText: gray[50],
      },
      warning: {
        light: orange[300],
        main: orange[400],
        dark: orange[800],
      },
      error: {
        light: red[300],
        main: red[400],
        dark: red[800],
      },
      success: {
        light: green[300],
        main: green[400],
        dark: green[800],
      },
      grey: {
        ...gray,
      },
      divider: alpha(gray[300], 0.4),
      background: {
        default: 'hsl(0, 0%, 99%)',
        paper: 'hsl(220, 35%, 97%)',
      },
      text: {
        primary: gray[800],
        secondary: gray[600],
        warning: orange[400],
      },
      action: {
        hover: alpha(gray[200], 0.2),
        selected: `${alpha(gray[200], 0.3)}`,
      },
      baseShadow:
        'hsla(220, 30%, 5%, 0.07) 0px 4px 16px 0px, hsla(220, 25%, 10%, 0.07) 0px 8px 16px -5px',
    },
  },
  dark: {
    palette: {
      primary: {
        contrastText: brand[50],
        light: brand[300],
        main: brand[400],
        dark: brand[700],
      },
      info: {
        contrastText: brand[300],
        light: brand[500],
        main: brand[700],
        dark: brand[900],
      },
      warning: {
        light: orange[400],
        main: orange[500],
        dark: orange[700],
      },
      error: {
        light: red[400],
        main: red[500],
        dark: red[700],
      },
      success: {
        light: green[400],
        main: green[500],
        dark: green[700],
      },
      grey: {
        ...gray,
      },
      divider: alpha(gray[700], 0.6),
      background: {
        default: gray[900],
        paper: 'hsl(220, 30%, 7%)',
      },
      text: {
        primary: 'hsl(0, 0%, 100%)',
        secondary: gray[400],
      },
      action: {
        hover: alpha(gray[600], 0.2),
        selected: alpha(gray[600], 0.3),
      },
      baseShadow:
        'hsla(220, 30%, 5%, 0.7) 0px 4px 16px 0px, hsla(220, 25%, 10%, 0.8) 0px 8px 16px -5px',
    },
  },
};

export const typography = {
  fontFamily: 'Inter, sans-serif',
  h1: {
    fontSize: defaultTheme.typography.pxToRem(48),
    fontWeight: 600,
    lineHeight: 1.2,
    letterSpacing: -0.5,
  },
  h2: {
    fontSize: defaultTheme.typography.pxToRem(36),
    fontWeight: 600,
    lineHeight: 1.2,
  },
  h3: {
    fontSize: defaultTheme.typography.pxToRem(30),
    lineHeight: 1.2,
  },
  h4: {
    fontSize: defaultTheme.typography.pxToRem(24),
    fontWeight: 600,
    lineHeight: 1.5,
  },
  h5: {
    fontSize: defaultTheme.typography.pxToRem(20),
    fontWeight: 600,
  },
  h6: {
    fontSize: defaultTheme.typography.pxToRem(18),
    fontWeight: 600,
  },
  subtitle1: {
    fontSize: defaultTheme.typography.pxToRem(18),
  },
  subtitle2: {
    fontSize: defaultTheme.typography.pxToRem(14),
    fontWeight: 500,
  },
  body1: {
    fontSize: defaultTheme.typography.pxToRem(14),
  },
  body2: {
    fontSize: defaultTheme.typography.pxToRem(14),
    fontWeight: 400,
  },
  caption: {
    fontSize: defaultTheme.typography.pxToRem(12),
    fontWeight: 400,
  },
};

export const shape = {
  borderRadius: 8,
};

// @ts-ignore
const defaultShadows: Shadows = [
  'none',
  'var(--template-palette-baseShadow)',
  ...defaultTheme.shadows.slice(2),
];
export const shadows = defaultShadows;


===== .\src\theme\customizations\charts.ts =====
import { Theme } from '@mui/material/styles';
import { axisClasses, legendClasses, chartsGridClasses } from '@mui/x-charts';
import type { ChartsComponents } from '@mui/x-charts/themeAugmentation';
import { gray } from '../.././theme/themePrimitives';

/* eslint-disable import/prefer-default-export */
export const chartsCustomizations: ChartsComponents<Theme> = {
  MuiChartsAxis: {
    styleOverrides: {
      root: ({ theme }) => ({
        [`& .${axisClasses.line}`]: {
          stroke: gray[300],
        },
        [`& .${axisClasses.tick}`]: { stroke: gray[300] },
        [`& .${axisClasses.tickLabel}`]: {
          fill: gray[500],
          fontWeight: 500,
        },
        ...theme.applyStyles('dark', {
          [`& .${axisClasses.line}`]: {
            stroke: gray[700],
          },
          [`& .${axisClasses.tick}`]: { stroke: gray[700] },
          [`& .${axisClasses.tickLabel}`]: {
            fill: gray[300],
            fontWeight: 500,
          },
        }),
      }),
    },
  },
  MuiChartsTooltip: {
    styleOverrides: {
      mark: ({ theme }) => ({
        ry: 6,
        boxShadow: 'none',
        border: `1px solid ${(theme.vars || theme).palette.divider}`,
      }),
      table: ({ theme }) => ({
        border: `1px solid ${(theme.vars || theme).palette.divider}`,
        borderRadius: theme.shape.borderRadius,
        background: 'hsl(0, 0%, 100%)',
        ...theme.applyStyles('dark', {
          background: gray[900],
        }),
      }),
    },
  },
  MuiChartsLegend: {
    styleOverrides: {
      root: {
        [`& .${legendClasses.mark}`]: {
          ry: 6,
        },
      },
    },
  },
  MuiChartsGrid: {
    styleOverrides: {
      root: ({ theme }) => ({
        [`& .${chartsGridClasses.line}`]: {
          stroke: gray[200],
          strokeDasharray: '4 2',
          strokeWidth: 0.8,
        },
        ...theme.applyStyles('dark', {
          [`& .${chartsGridClasses.line}`]: {
            stroke: gray[700],
            strokeDasharray: '4 2',
            strokeWidth: 0.8,
          },
        }),
      }),
    },
  },
};


===== .\src\theme\customizations\dataDisplay.tsx =====
import { Theme, alpha, Components } from '@mui/material/styles';
import { svgIconClasses } from '@mui/material/SvgIcon';
import { typographyClasses } from '@mui/material/Typography';
import { buttonBaseClasses } from '@mui/material/ButtonBase';
import { chipClasses } from '@mui/material/Chip';
import { iconButtonClasses } from '@mui/material/IconButton';
import { gray, red, green } from '../themePrimitives';

/* eslint-disable import/prefer-default-export */
export const dataDisplayCustomizations: Components<Theme> = {
  MuiList: {
    styleOverrides: {
      root: {
        padding: '8px',
        display: 'flex',
        flexDirection: 'column',
        gap: 0,
      },
    },
  },
  MuiListItem: {
    styleOverrides: {
      root: ({ theme }) => ({
        [`& .${svgIconClasses.root}`]: {
          width: '1rem',
          height: '1rem',
          color: (theme.vars || theme).palette.text.secondary,
        },
        [`& .${typographyClasses.root}`]: {
          fontWeight: 500,
        },
        [`& .${buttonBaseClasses.root}`]: {
          display: 'flex',
          gap: 8,
          padding: '2px 8px',
          borderRadius: (theme.vars || theme).shape.borderRadius,
          opacity: 0.7,
          '&.Mui-selected': {
            opacity: 1,
            backgroundColor: alpha(theme.palette.action.selected, 0.3),
            [`& .${svgIconClasses.root}`]: {
              color: (theme.vars || theme).palette.text.primary,
            },
            '&:focus-visible': {
              backgroundColor: alpha(theme.palette.action.selected, 0.3),
            },
            '&:hover': {
              backgroundColor: alpha(theme.palette.action.selected, 0.5),
            },
          },
          '&:focus-visible': {
            backgroundColor: 'transparent',
          },
        },
      }),
    },
  },
  MuiListItemText: {
    styleOverrides: {
      primary: ({ theme }) => ({
        fontSize: theme.typography.body2.fontSize,
        fontWeight: 500,
        lineHeight: theme.typography.body2.lineHeight,
      }),
      secondary: ({ theme }) => ({
        fontSize: theme.typography.caption.fontSize,
        lineHeight: theme.typography.caption.lineHeight,
      }),
    },
  },
  MuiListSubheader: {
    styleOverrides: {
      root: ({ theme }) => ({
        backgroundColor: 'transparent',
        padding: '4px 8px',
        fontSize: theme.typography.caption.fontSize,
        fontWeight: 500,
        lineHeight: theme.typography.caption.lineHeight,
      }),
    },
  },
  MuiListItemIcon: {
    styleOverrides: {
      root: {
        minWidth: 0,
      },
    },
  },
  MuiChip: {
    defaultProps: {
      size: 'small',
    },
    styleOverrides: {
      root: ({ theme }) => ({
        border: '1px solid',
        borderRadius: '999px',
        [`& .${chipClasses.label}`]: {
          fontWeight: 600,
        },
        variants: [
          {
            props: {
              color: 'default',
            },
            style: {
              borderColor: gray[200],
              backgroundColor: gray[100],
              [`& .${chipClasses.label}`]: {
                color: gray[500],
              },
              [`& .${chipClasses.icon}`]: {
                color: gray[500],
              },
              ...theme.applyStyles('dark', {
                borderColor: gray[700],
                backgroundColor: gray[800],
                [`& .${chipClasses.label}`]: {
                  color: gray[300],
                },
                [`& .${chipClasses.icon}`]: {
                  color: gray[300],
                },
              }),
            },
          },
          {
            props: {
              color: 'success',
            },
            style: {
              borderColor: green[200],
              backgroundColor: green[50],
              [`& .${chipClasses.label}`]: {
                color: green[500],
              },
              [`& .${chipClasses.icon}`]: {
                color: green[500],
              },
              ...theme.applyStyles('dark', {
                borderColor: green[800],
                backgroundColor: green[900],
                [`& .${chipClasses.label}`]: {
                  color: green[300],
                },
                [`& .${chipClasses.icon}`]: {
                  color: green[300],
                },
              }),
            },
          },
          {
            props: {
              color: 'error',
            },
            style: {
              borderColor: red[100],
              backgroundColor: red[50],
              [`& .${chipClasses.label}`]: {
                color: red[500],
              },
              [`& .${chipClasses.icon}`]: {
                color: red[500],
              },
              ...theme.applyStyles('dark', {
                borderColor: red[800],
                backgroundColor: red[900],
                [`& .${chipClasses.label}`]: {
                  color: red[200],
                },
                [`& .${chipClasses.icon}`]: {
                  color: red[300],
                },
              }),
            },
          },
          {
            props: { size: 'small' },
            style: {
              maxHeight: 20,
              [`& .${chipClasses.label}`]: {
                fontSize: theme.typography.caption.fontSize,
              },
              [`& .${svgIconClasses.root}`]: {
                fontSize: theme.typography.caption.fontSize,
              },
            },
          },
          {
            props: { size: 'medium' },
            style: {
              [`& .${chipClasses.label}`]: {
                fontSize: theme.typography.caption.fontSize,
              },
            },
          },
        ],
      }),
    },
  },
  MuiTablePagination: {
    styleOverrides: {
      actions: {
        display: 'flex',
        gap: 8,
        marginRight: 6,
        [`& .${iconButtonClasses.root}`]: {
          minWidth: 0,
          width: 36,
          height: 36,
        },
      },
    },
  },
  MuiIcon: {
    defaultProps: {
      fontSize: 'small',
    },
    styleOverrides: {
      root: {
        variants: [
          {
            props: {
              fontSize: 'small',
            },
            style: {
              fontSize: '1rem',
            },
          },
        ],
      },
    },
  },
};


===== .\src\theme\customizations\dataGrid.js =====
import { paperClasses } from '@mui/material/Paper';
import { alpha } from '@mui/material/styles';

import { menuItemClasses } from '@mui/material/MenuItem';
import { listItemIconClasses } from '@mui/material/ListItemIcon';
import { iconButtonClasses } from '@mui/material/IconButton';
import { checkboxClasses } from '@mui/material/Checkbox';
import { listClasses } from '@mui/material/List';
import { gridClasses } from '@mui/x-data-grid';
import { tablePaginationClasses } from '@mui/material/TablePagination';
import { gray } from '../themePrimitives';

export const dataGridCustomizations = {
  MuiDataGrid: {
    styleOverrides: {
      root: ({ theme }) => ({
        '--DataGrid-overlayHeight': '300px',
        overflow: 'clip',
        borderColor: (theme.vars || theme).palette.divider,
        backgroundColor: (theme.vars || theme).palette.background.default,
        [`& .${gridClasses.columnHeader}`]: {
          backgroundColor: (theme.vars || theme).palette.background.paper,
        },
        [`& .${gridClasses.footerContainer}`]: {
          backgroundColor: (theme.vars || theme).palette.background.paper,
        },
        [`& .${checkboxClasses.root}`]: {
          padding: theme.spacing(0.5),
          '& > svg': {
            fontSize: '1rem',
          },
        },
        [`& .${tablePaginationClasses.root}`]: {
          marginRight: theme.spacing(1),
          '& .MuiIconButton-root': {
            maxHeight: 32,
            maxWidth: 32,
            '& > svg': {
              fontSize: '1rem',
            },
          },
        },
      }),
      cell: ({ theme }) => ({
        borderTopColor: (theme.vars || theme).palette.divider,
      }),
      menu: ({ theme }) => ({
        borderRadius: theme.shape.borderRadius,
        backgroundImage: 'none',
        [`& .${paperClasses.root}`]: {
          border: `1px solid ${(theme.vars || theme).palette.divider}`,
        },
        [`& .${menuItemClasses.root}`]: {
          margin: '0 4px',
        },
        [`& .${listItemIconClasses.root}`]: {
          marginRight: 0,
        },
        [`& .${listClasses.root}`]: {
          paddingLeft: 0,
          paddingRight: 0,
        },
      }),
      row: ({ theme }) => ({
        '&:last-of-type': {
          borderBottom: `1px solid ${(theme.vars || theme).palette.divider}`,
        },
        '&:hover': {
          backgroundColor: (theme.vars || theme).palette.action.hover,
        },
        '&.Mui-selected': {
          background: (theme.vars || theme).palette.action.selected,
          '&:hover': {
            backgroundColor: (theme.vars || theme).palette.action.hover,
          },
        },
      }),
      iconButtonContainer: ({ theme }) => ({
        [`& .${iconButtonClasses.root}`]: {
          border: 'none',
          backgroundColor: 'transparent',
          '&:hover': {
            backgroundColor: alpha(theme.palette.action.selected, 0.3),
          },
          '&:active': {
            backgroundColor: gray[200],
          },
          ...theme.applyStyles('dark', {
            color: gray[50],
            '&:hover': {
              backgroundColor: gray[800],
            },
            '&:active': {
              backgroundColor: gray[900],
            },
          }),
        },
      }),
      menuIconButton: ({ theme }) => ({
        border: 'none',
        backgroundColor: 'transparent',
        '&:hover': {
          backgroundColor: gray[100],
        },
        '&:active': {
          backgroundColor: gray[200],
        },
        ...theme.applyStyles('dark', {
          color: gray[50],
          '&:hover': {
            backgroundColor: gray[800],
          },
          '&:active': {
            backgroundColor: gray[900],
          },
        }),
      }),
      filterForm: ({ theme }) => ({
        gap: theme.spacing(1),
        alignItems: 'flex-end',
      }),
      columnsManagementHeader: ({ theme }) => ({
        paddingRight: theme.spacing(3),
        paddingLeft: theme.spacing(3),
      }),
      columnHeaderTitleContainer: {
        flexGrow: 1,
        justifyContent: 'space-between',
      },
      columnHeaderDraggableContainer: { paddingRight: 2 },
    },
  },
};


===== .\src\theme\customizations\datePickers.ts =====
import { alpha, Theme } from '@mui/material/styles';
import type { PickersProComponents } from '@mui/x-date-pickers-pro/themeAugmentation';
import type { PickerComponents } from '@mui/x-date-pickers/themeAugmentation';
import { menuItemClasses } from '@mui/material/MenuItem';
import { pickersDayClasses, yearCalendarClasses } from '@mui/x-date-pickers';
import { gray, brand } from '../.././theme/themePrimitives';

/* eslint-disable import/prefer-default-export */
export const datePickersCustomizations: PickersProComponents<Theme> & PickerComponents<Theme> = {
  MuiPickerPopper: {
    styleOverrides: {
      paper: ({ theme }) => ({
        marginTop: 4,
        borderRadius: theme.shape.borderRadius,
        border: `1px solid ${(theme.vars || theme).palette.divider}`,
        backgroundImage: 'none',
        background: 'hsl(0, 0%, 100%)',
        boxShadow:
          'hsla(220, 30%, 5%, 0.07) 0px 4px 16px 0px, hsla(220, 25%, 10%, 0.07) 0px 8px 16px -5px',
        [`& .${menuItemClasses.root}`]: {
          borderRadius: 6,
          margin: '0 6px',
        },
        ...theme.applyStyles('dark', {
          background: gray[900],
          boxShadow:
            'hsla(220, 30%, 5%, 0.7) 0px 4px 16px 0px, hsla(220, 25%, 10%, 0.8) 0px 8px 16px -5px',
        }),
      }),
    },
  },
  MuiPickersArrowSwitcher: {
    styleOverrides: {
      spacer: { width: 16 },
      button: ({ theme }) => ({
        backgroundColor: 'transparent',
        color: (theme.vars || theme).palette.grey[500],
        ...theme.applyStyles('dark', {
          color: (theme.vars || theme).palette.grey[400],
        }),
      }),
    },
  },
  MuiPickersCalendarHeader: {
    styleOverrides: {
      switchViewButton: {
        padding: 0,
        border: 'none',
      },
    },
  },
  MuiMonthCalendar: {
    styleOverrides: {
      button: ({ theme }) => ({
        fontSize: theme.typography.body1.fontSize,
        color: (theme.vars || theme).palette.grey[600],
        padding: theme.spacing(0.5),
        borderRadius: theme.shape.borderRadius,
        '&:hover': {
          backgroundColor: (theme.vars || theme).palette.action.hover,
        },
        [`&.${yearCalendarClasses.selected}`]: {
          backgroundColor: gray[700],
          fontWeight: theme.typography.fontWeightMedium,
        },
        '&:focus': {
          outline: `3px solid ${alpha(brand[500], 0.5)}`,
          outlineOffset: '2px',
          backgroundColor: 'transparent',
          [`&.${yearCalendarClasses.selected}`]: { backgroundColor: gray[700] },
        },
        ...theme.applyStyles('dark', {
          color: (theme.vars || theme).palette.grey[300],
          '&:hover': {
            backgroundColor: (theme.vars || theme).palette.action.hover,
          },
          [`&.${yearCalendarClasses.selected}`]: {
            color: (theme.vars || theme).palette.common.black,
            fontWeight: theme.typography.fontWeightMedium,
            backgroundColor: gray[300],
          },
          '&:focus': {
            outline: `3px solid ${alpha(brand[500], 0.5)}`,
            outlineOffset: '2px',
            backgroundColor: 'transparent',
            [`&.${yearCalendarClasses.selected}`]: { backgroundColor: gray[300] },
          },
        }),
      }),
    },
  },
  MuiYearCalendar: {
    styleOverrides: {
      button: ({ theme }) => ({
        fontSize: theme.typography.body1.fontSize,
        color: (theme.vars || theme).palette.grey[600],
        padding: theme.spacing(0.5),
        borderRadius: theme.shape.borderRadius,
        height: 'fit-content',
        '&:hover': {
          backgroundColor: (theme.vars || theme).palette.action.hover,
        },
        [`&.${yearCalendarClasses.selected}`]: {
          backgroundColor: gray[700],
          fontWeight: theme.typography.fontWeightMedium,
        },
        '&:focus': {
          outline: `3px solid ${alpha(brand[500], 0.5)}`,
          outlineOffset: '2px',
          backgroundColor: 'transparent',
          [`&.${yearCalendarClasses.selected}`]: { backgroundColor: gray[700] },
        },
        ...theme.applyStyles('dark', {
          color: (theme.vars || theme).palette.grey[300],
          '&:hover': {
            backgroundColor: (theme.vars || theme).palette.action.hover,
          },
          [`&.${yearCalendarClasses.selected}`]: {
            color: (theme.vars || theme).palette.common.black,
            fontWeight: theme.typography.fontWeightMedium,
            backgroundColor: gray[300],
          },
          '&:focus': {
            outline: `3px solid ${alpha(brand[500], 0.5)}`,
            outlineOffset: '2px',
            backgroundColor: 'transparent',
            [`&.${yearCalendarClasses.selected}`]: { backgroundColor: gray[300] },
          },
        }),
      }),
    },
  },
  MuiPickersDay: {
    styleOverrides: {
      root: ({ theme }) => ({
        fontSize: theme.typography.body1.fontSize,
        color: (theme.vars || theme).palette.grey[600],
        padding: theme.spacing(0.5),
        borderRadius: theme.shape.borderRadius,
        '&:hover': {
          backgroundColor: (theme.vars || theme).palette.action.hover,
        },
        [`&.${pickersDayClasses.selected}`]: {
          backgroundColor: gray[700],
          fontWeight: theme.typography.fontWeightMedium,
        },
        '&:focus': {
          outline: `3px solid ${alpha(brand[500], 0.5)}`,
          outlineOffset: '2px',
          backgroundColor: 'transparent',
          [`&.${pickersDayClasses.selected}`]: { backgroundColor: gray[700] },
        },
        ...theme.applyStyles('dark', {
          color: (theme.vars || theme).palette.grey[300],
          '&:hover': {
            backgroundColor: (theme.vars || theme).palette.action.hover,
          },
          [`&.${pickersDayClasses.selected}`]: {
            color: (theme.vars || theme).palette.common.black,
            fontWeight: theme.typography.fontWeightMedium,
            backgroundColor: gray[300],
          },
          '&:focus': {
            outline: `3px solid ${alpha(brand[500], 0.5)}`,
            outlineOffset: '2px',
            backgroundColor: 'transparent',
            [`&.${pickersDayClasses.selected}`]: { backgroundColor: gray[300] },
          },
        }),
      }),
    },
  },
};


===== .\src\theme\customizations\feedback.tsx =====
import { Theme, alpha, Components } from '@mui/material/styles';
import { gray, orange } from '../themePrimitives';

/* eslint-disable import/prefer-default-export */
export const feedbackCustomizations: Components<Theme> = {
  MuiAlert: {
    styleOverrides: {
      root: ({ theme }) => ({
        borderRadius: 10,
        backgroundColor: orange[100],
        color: (theme.vars || theme).palette.text.primary,
        border: `1px solid ${alpha(orange[300], 0.5)}`,
        '& .MuiAlert-icon': {
          color: orange[500],
        },
        ...theme.applyStyles('dark', {
          backgroundColor: `${alpha(orange[900], 0.5)}`,
          border: `1px solid ${alpha(orange[800], 0.5)}`,
        }),
      }),
    },
  },
  MuiDialog: {
    styleOverrides: {
      root: ({ theme }) => ({
        '& .MuiDialog-paper': {
          borderRadius: '10px',
          border: '1px solid',
          borderColor: (theme.vars || theme).palette.divider,
        },
      }),
    },
  },
  MuiLinearProgress: {
    styleOverrides: {
      root: ({ theme }) => ({
        height: 8,
        borderRadius: 8,
        backgroundColor: gray[200],
        ...theme.applyStyles('dark', {
          backgroundColor: gray[800],
        }),
      }),
    },
  },
};


===== .\src\theme\customizations\index.ts =====
export { chartsCustomizations } from './charts';
export { dataGridCustomizations } from './dataGrid';
export { datePickersCustomizations } from './datePickers';
export { treeViewCustomizations } from './treeView';


===== .\src\theme\customizations\inputs.tsx =====
// src/theme/customizations/inputs.tsx

import * as React from 'react';
import { alpha, Theme, Components } from '@mui/material/styles';
// Thêm outlinedInputClasses để có thể nhắm vào class của multiline
import { outlinedInputClasses } from '@mui/material/OutlinedInput';
import { svgIconClasses } from '@mui/material/SvgIcon';
import { toggleButtonGroupClasses } from '@mui/material/ToggleButtonGroup';
import { toggleButtonClasses } from '@mui/material/ToggleButton';
import CheckBoxOutlineBlankRoundedIcon from '@mui/icons-material/CheckBoxOutlineBlankRounded';
import CheckRoundedIcon from '@mui/icons-material/CheckRounded';
import RemoveRoundedIcon from '@mui/icons-material/RemoveRounded';
import { gray, brand } from '../themePrimitives';

/* eslint-disable import/prefer-default-export */
export const inputsCustomizations: Components<Theme> = {
  MuiButtonBase: {
    defaultProps: {
      disableTouchRipple: true,
      disableRipple: true,
    },
    styleOverrides: {
      root: ({ theme }) => ({
        boxSizing: 'border-box',
        transition: 'all 100ms ease-in',
        '&:focus-visible': {
          outline: `3px solid ${alpha(theme.palette.primary.main, 0.5)}`,
          outlineOffset: '2px',
        },
      }),
    },
  },
  MuiButton: {
    styleOverrides: {
      root: ({ theme }) => ({
        boxShadow: 'none',
        borderRadius: (theme.vars || theme).shape.borderRadius,
        textTransform: 'none',
        variants: [
          {
            props: {
              size: 'small',
            },
            style: {
              height: '2.25rem',
              padding: '8px 12px',
            },
          },
          {
            props: {
              size: 'medium',
            },
            style: {
              height: '2.5rem', // 40px
            },
          },
          {
            props: {
              color: 'primary',
              variant: 'contained',
            },
            style: {
              color: 'white',
              backgroundColor: gray[900],
              backgroundImage: `linear-gradient(to bottom, ${gray[700]}, ${gray[800]})`,
              boxShadow: `inset 0 1px 0 ${gray[600]}, inset 0 -1px 0 1px hsl(220, 0%, 0%)`,
              border: `1px solid ${gray[700]}`,
              '&:hover': {
                backgroundImage: 'none',
                backgroundColor: gray[700],
                boxShadow: 'none',
              },
              '&:active': {
                backgroundColor: gray[800],
              },
              ...theme.applyStyles('dark', {
                color: 'black',
                backgroundColor: gray[50],
                backgroundImage: `linear-gradient(to bottom, ${gray[100]}, ${gray[50]})`,
                boxShadow: 'inset 0 -1px 0  hsl(220, 30%, 80%)',
                border: `1px solid ${gray[50]}`,
                '&:hover': {
                  backgroundImage: 'none',
                  backgroundColor: gray[300],
                  boxShadow: 'none',
                },
                '&:active': {
                  backgroundColor: gray[400],
                },
              }),
            },
          },
          {
            props: {
              color: 'secondary',
              variant: 'contained',
            },
            style: {
              color: 'white',
              backgroundColor: brand[300],
              backgroundImage: `linear-gradient(to bottom, ${alpha(brand[400], 0.8)}, ${brand[500]})`,
              boxShadow: `inset 0 2px 0 ${alpha(brand[200], 0.2)}, inset 0 -2px 0 ${alpha(brand[700], 0.4)}`,
              border: `1px solid ${brand[500]}`,
              '&:hover': {
                backgroundColor: brand[700],
                boxShadow: 'none',
              },
              '&:active': {
                backgroundColor: brand[700],
                backgroundImage: 'none',
              },
            },
          },
          {
            props: {
              variant: 'outlined',
            },
            style: {
              color: (theme.vars || theme).palette.text.primary,
              border: '1px solid',
              borderColor: gray[200],
              backgroundColor: alpha(gray[50], 0.3),
              '&:hover': {
                backgroundColor: gray[100],
                borderColor: gray[300],
              },
              '&:active': {
                backgroundColor: gray[200],
              },
              ...theme.applyStyles('dark', {
                backgroundColor: gray[800],
                borderColor: gray[700],

                '&:hover': {
                  backgroundColor: gray[900],
                  borderColor: gray[600],
                },
                '&:active': {
                  backgroundColor: gray[900],
                },
              }),
            },
          },
          {
            props: {
              color: 'secondary',
              variant: 'outlined',
            },
            style: {
              color: brand[700],
              border: '1px solid',
              borderColor: brand[200],
              backgroundColor: brand[50],
              '&:hover': {
                backgroundColor: brand[100],
                borderColor: brand[400],
              },
              '&:active': {
                backgroundColor: alpha(brand[200], 0.7),
              },
              ...theme.applyStyles('dark', {
                color: brand[50],
                border: '1px solid',
                borderColor: brand[900],
                backgroundColor: alpha(brand[900], 0.3),
                '&:hover': {
                  borderColor: brand[700],
                  backgroundColor: alpha(brand[900], 0.6),
                },
                '&:active': {
                  backgroundColor: alpha(brand[900], 0.5),
                },
              }),
            },
          },
          {
            props: {
              variant: 'text',
            },
            style: {
              color: gray[600],
              '&:hover': {
                backgroundColor: gray[100],
              },
              '&:active': {
                backgroundColor: gray[200],
              },
              ...theme.applyStyles('dark', {
                color: gray[50],
                '&:hover': {
                  backgroundColor: gray[700],
                },
                '&:active': {
                  backgroundColor: alpha(gray[700], 0.7),
                },
              }),
            },
          },
          {
            props: {
              color: 'secondary',
              variant: 'text',
            },
            style: {
              color: brand[700],
              '&:hover': {
                backgroundColor: alpha(brand[100], 0.5),
              },
              '&:active': {
                backgroundColor: alpha(brand[200], 0.7),
              },
              ...theme.applyStyles('dark', {
                color: brand[100],
                '&:hover': {
                  backgroundColor: alpha(brand[900], 0.5),
                },
                '&:active': {
                  backgroundColor: alpha(brand[900], 0.3),
                },
              }),
            },
          },
        ],
      }),
    },
  },
  MuiIconButton: {
    styleOverrides: {
      root: ({ theme }) => ({
        boxShadow: 'none',
        borderRadius: (theme.vars || theme).shape.borderRadius,
        textTransform: 'none',
        fontWeight: theme.typography.fontWeightMedium,
        letterSpacing: 0,
        color: (theme.vars || theme).palette.text.primary,
        border: '1px solid ',
        borderColor: gray[200],
        backgroundColor: alpha(gray[50], 0.3),
        '&:hover': {
          backgroundColor: gray[100],
          borderColor: gray[300],
        },
        '&:active': {
          backgroundColor: gray[200],
        },
        ...theme.applyStyles('dark', {
          backgroundColor: gray[800],
          borderColor: gray[700],
          '&:hover': {
            backgroundColor: gray[900],
            borderColor: gray[600],
          },
          '&:active': {
            backgroundColor: gray[900],
          },
        }),
        variants: [
          {
            props: {
              size: 'small',
            },
            style: {
              width: '2.25rem',
              height: '2.25rem',
              padding: '0.25rem',
              [`& .${svgIconClasses.root}`]: { fontSize: '1rem' },
            },
          },
          {
            props: {
              size: 'medium',
            },
            style: {
              width: '2.5rem',
              height: '2.5rem',
            },
          },
        ],
      }),
    },
  },
  MuiToggleButtonGroup: {
    styleOverrides: {
      root: ({ theme }) => ({
        borderRadius: '10px',
        boxShadow: `0 4px 16px ${alpha(gray[400], 0.2)}`,
        [`& .${toggleButtonGroupClasses.selected}`]: {
          color: brand[500],
        },
        ...theme.applyStyles('dark', {
          [`& .${toggleButtonGroupClasses.selected}`]: {
            color: '#fff',
          },
          boxShadow: `0 4px 16px ${alpha(brand[700], 0.5)}`,
        }),
      }),
    },
  },
  MuiToggleButton: {
    styleOverrides: {
      root: ({ theme }) => ({
        padding: '12px 16px',
        textTransform: 'none',
        borderRadius: '10px',
        fontWeight: 500,
        ...theme.applyStyles('dark', {
          color: gray[400],
          boxShadow: '0 4px 16px rgba(0, 0, 0, 0.5)',
          [`&.${toggleButtonClasses.selected}`]: {
            color: brand[300],
          },
        }),
      }),
    },
  },
  MuiCheckbox: {
    defaultProps: {
      disableRipple: true,
      icon: (
        <CheckBoxOutlineBlankRoundedIcon sx={{ color: 'hsla(210, 0%, 0%, 0.0)' }} />
      ),
      checkedIcon: <CheckRoundedIcon sx={{ height: 14, width: 14 }} />,
      indeterminateIcon: <RemoveRoundedIcon sx={{ height: 14, width: 14 }} />,
    },
    styleOverrides: {
      root: ({ theme }) => ({
        margin: 10,
        height: 16,
        width: 16,
        borderRadius: 5,
        border: '1px solid ',
        borderColor: alpha(gray[300], 0.8),
        boxShadow: '0 0 0 1.5px hsla(210, 0%, 0%, 0.04) inset',
        backgroundColor: alpha(gray[100], 0.4),
        transition: 'border-color, background-color, 120ms ease-in',
        '&:hover': {
          borderColor: brand[300],
        },
        '&.Mui-focusVisible': {
          outline: `3px solid ${alpha(brand[500], 0.5)}`,
          outlineOffset: '2px',
          borderColor: brand[400],
        },
        '&.Mui-checked': {
          color: 'white',
          backgroundColor: brand[500],
          borderColor: brand[500],
          boxShadow: `none`,
          '&:hover': {
            backgroundColor: brand[600],
          },
        },
        ...theme.applyStyles('dark', {
          borderColor: alpha(gray[700], 0.8),
          boxShadow: '0 0 0 1.5px hsl(210, 0%, 0%) inset',
          backgroundColor: alpha(gray[900], 0.8),
          '&:hover': {
            borderColor: brand[300],
          },
          '&.Mui-focusVisible': {
            borderColor: brand[400],
            outline: `3px solid ${alpha(brand[500], 0.5)}`,
            outlineOffset: '2px',
          },
        }),
      }),
    },
  },
  MuiInputBase: {
    styleOverrides: {
      root: {
        border: 'none',
      },
      input: {
        '&::placeholder': {
          opacity: 0.7,
          color: gray[500],
        },
      },
    },
  },
  MuiOutlinedInput: {
    styleOverrides: {
      input: {
        padding: 0,
      },
      root: ({ theme }) => ({
        padding: '8px 12px',
        color: (theme.vars || theme).palette.text.primary,
        borderRadius: (theme.vars || theme).shape.borderRadius,
        border: `1px solid ${(theme.vars || theme).palette.divider}`,
        backgroundColor: (theme.vars || theme).palette.background.default,
        transition: 'border 120ms ease-in',
        '&:hover': {
          borderColor: gray[400],
        },
        [`&.${outlinedInputClasses.focused}`]: {
          outline: `3px solid ${alpha(brand[500], 0.5)}`,
          borderColor: brand[400],
        },
        // --- SỬA LỖI TẠI ĐÂY ---
        // Khi input là multiline, chúng ta cần chiều cao tự động để nó có thể giãn nở.
        [`&.${outlinedInputClasses.multiline}`]: {
          height: 'auto',
          minHeight: '2.5rem', // Giữ chiều cao tối thiểu cho đẹp
          padding: '9px 12px', // Điều chỉnh padding cho multiline để cân đối
        },
        ...theme.applyStyles('dark', {
          '&:hover': {
            borderColor: gray[500],
          },
        }),
        variants: [
          {
            props: {
              size: 'small',
            },
            style: {
              // Bỏ height cố định khỏi đây nếu nó là multiline
              '&:not(.Mui-multiline)': {
                height: '2.25rem',
              },
              [`&.${outlinedInputClasses.multiline}`]: {
                  height: 'auto',
                  minHeight: '2.25rem',
              },
            },
          },
          {
            props: {
              size: 'medium',
            },
            style: {
              // Bỏ height cố định khỏi đây nếu nó là multiline
              '&:not(.Mui-multiline)': {
                height: '2.5rem',
              },
              [`&.${outlinedInputClasses.multiline}`]: {
                  height: 'auto',
                  minHeight: '2.5rem',
              },
            },
          },
        ],
      }),
      notchedOutline: {
        border: 'none',
      },
    },
  },
  MuiInputAdornment: {
    styleOverrides: {
      root: ({ theme }) => ({
        color: (theme.vars || theme).palette.grey[500],
        ...theme.applyStyles('dark', {
          color: (theme.vars || theme).palette.grey[400],
        }),
      }),
    },
  },
  MuiFormLabel: {
    styleOverrides: {
      root: ({ theme }) => ({
        typography: theme.typography.caption,
        marginBottom: 8,
      }),
    },
  },
};

===== .\src\theme\customizations\navigation.tsx =====
import * as React from 'react';
import { Theme, alpha, Components } from '@mui/material/styles';
import { SvgIconProps } from '@mui/material/SvgIcon';
import { buttonBaseClasses } from '@mui/material/ButtonBase';
import { dividerClasses } from '@mui/material/Divider';
import { menuItemClasses } from '@mui/material/MenuItem';
import { selectClasses } from '@mui/material/Select';
import { tabClasses } from '@mui/material/Tab';
import UnfoldMoreRoundedIcon from '@mui/icons-material/UnfoldMoreRounded';
import { gray, brand } from '../themePrimitives';

/* eslint-disable import/prefer-default-export */
export const navigationCustomizations: Components<Theme> = {
  MuiMenuItem: {
    styleOverrides: {
      root: ({ theme }) => ({
        borderRadius: (theme.vars || theme).shape.borderRadius,
        padding: '6px 8px',
        [`&.${menuItemClasses.focusVisible}`]: {
          backgroundColor: 'transparent',
        },
        [`&.${menuItemClasses.selected}`]: {
          [`&.${menuItemClasses.focusVisible}`]: {
            backgroundColor: alpha(theme.palette.action.selected, 0.3),
          },
        },
      }),
    },
  },
  MuiMenu: {
    styleOverrides: {
      list: {
        gap: '0px',
        [`&.${dividerClasses.root}`]: {
          margin: '0 -8px',
        },
      },
      paper: ({ theme }) => ({
        marginTop: '4px',
        borderRadius: (theme.vars || theme).shape.borderRadius,
        border: `1px solid ${(theme.vars || theme).palette.divider}`,
        backgroundImage: 'none',
        background: 'hsl(0, 0%, 100%)',
        boxShadow:
          'hsla(220, 30%, 5%, 0.07) 0px 4px 16px 0px, hsla(220, 25%, 10%, 0.07) 0px 8px 16px -5px',
        [`& .${buttonBaseClasses.root}`]: {
          '&.Mui-selected': {
            backgroundColor: alpha(theme.palette.action.selected, 0.3),
          },
        },
        ...theme.applyStyles('dark', {
          background: gray[900],
          boxShadow:
            'hsla(220, 30%, 5%, 0.7) 0px 4px 16px 0px, hsla(220, 25%, 10%, 0.8) 0px 8px 16px -5px',
        }),
      }),
    },
  },
  MuiSelect: {
    defaultProps: {
      IconComponent: React.forwardRef<SVGSVGElement, SvgIconProps>((props, ref) => (
        <UnfoldMoreRoundedIcon fontSize="small" {...props} ref={ref} />
      )),
    },
    styleOverrides: {
      root: ({ theme }) => ({
        borderRadius: (theme.vars || theme).shape.borderRadius,
        border: '1px solid',
        borderColor: gray[200],
        backgroundColor: (theme.vars || theme).palette.background.paper,
        boxShadow: `inset 0 1px 0 1px hsla(220, 0%, 100%, 0.6), inset 0 -1px 0 1px hsla(220, 35%, 90%, 0.5)`,
        '&:hover': {
          borderColor: gray[300],
          backgroundColor: (theme.vars || theme).palette.background.paper,
          boxShadow: 'none',
        },
        [`&.${selectClasses.focused}`]: {
          outlineOffset: 0,
          borderColor: gray[400],
        },
        '&:before, &:after': {
          display: 'none',
        },

        ...theme.applyStyles('dark', {
          borderRadius: (theme.vars || theme).shape.borderRadius,
          borderColor: gray[700],
          backgroundColor: (theme.vars || theme).palette.background.paper,
          boxShadow: `inset 0 1px 0 1px ${alpha(gray[700], 0.15)}, inset 0 -1px 0 1px hsla(220, 0%, 0%, 0.7)`,
          '&:hover': {
            borderColor: alpha(gray[700], 0.7),
            backgroundColor: (theme.vars || theme).palette.background.paper,
            boxShadow: 'none',
          },
          [`&.${selectClasses.focused}`]: {
            outlineOffset: 0,
            borderColor: gray[900],
          },
          '&:before, &:after': {
            display: 'none',
          },
        }),
      }),
      select: ({ theme }) => ({
        display: 'flex',
        alignItems: 'center',
        ...theme.applyStyles('dark', {
          display: 'flex',
          alignItems: 'center',
          '&:focus-visible': {
            backgroundColor: gray[900],
          },
        }),
      }),
    },
  },
  MuiLink: {
    defaultProps: {
      underline: 'none',
    },
    styleOverrides: {
      root: ({ theme }) => ({
        color: (theme.vars || theme).palette.text.primary,
        fontWeight: 500,
        position: 'relative',
        textDecoration: 'none',
        width: 'fit-content',
        '&::before': {
          content: '""',
          position: 'absolute',
          width: '100%',
          height: '1px',
          bottom: 0,
          left: 0,
          backgroundColor: (theme.vars || theme).palette.text.secondary,
          opacity: 0.3,
          transition: 'width 0.3s ease, opacity 0.3s ease',
        },
        '&:hover::before': {
          width: 0,
        },
        '&:focus-visible': {
          outline: `3px solid ${alpha(brand[500], 0.5)}`,
          outlineOffset: '4px',
          borderRadius: '2px',
        },
      }),
    },
  },
  MuiDrawer: {
    styleOverrides: {
      paper: ({ theme }) => ({
        backgroundColor: (theme.vars || theme).palette.background.default,
      }),
    },
  },
  MuiPaginationItem: {
    styleOverrides: {
      root: ({ theme }) => ({
        '&.Mui-selected': {
          color: 'white',
          backgroundColor: (theme.vars || theme).palette.grey[900],
        },
        ...theme.applyStyles('dark', {
          '&.Mui-selected': {
            color: 'black',
            backgroundColor: (theme.vars || theme).palette.grey[50],
          },
        }),
      }),
    },
  },
  MuiTabs: {
    styleOverrides: {
      root: { minHeight: 'fit-content' },
      indicator: ({ theme }) => ({
        backgroundColor: (theme.vars || theme).palette.grey[800],
        ...theme.applyStyles('dark', {
          backgroundColor: (theme.vars || theme).palette.grey[200],
        }),
      }),
    },
  },
  MuiTab: {
    styleOverrides: {
      root: ({ theme }) => ({
        padding: '6px 8px',
        marginBottom: '8px',
        textTransform: 'none',
        minWidth: 'fit-content',
        minHeight: 'fit-content',
        color: (theme.vars || theme).palette.text.secondary,
        borderRadius: (theme.vars || theme).shape.borderRadius,
        border: '1px solid',
        borderColor: 'transparent',
        ':hover': {
          color: (theme.vars || theme).palette.text.primary,
          backgroundColor: gray[100],
          borderColor: gray[200],
        },
        [`&.${tabClasses.selected}`]: {
          color: gray[900],
        },
        ...theme.applyStyles('dark', {
          ':hover': {
            color: (theme.vars || theme).palette.text.primary,
            backgroundColor: gray[800],
            borderColor: gray[700],
          },
          [`&.${tabClasses.selected}`]: {
            color: '#fff',
          },
        }),
      }),
    },
  },
  MuiStepConnector: {
    styleOverrides: {
      line: ({ theme }) => ({
        borderTop: '1px solid',
        borderColor: (theme.vars || theme).palette.divider,
        flex: 1,
        borderRadius: '99px',
      }),
    },
  },
  MuiStepIcon: {
    styleOverrides: {
      root: ({ theme }) => ({
        color: 'transparent',
        border: `1px solid ${gray[400]}`,
        width: 12,
        height: 12,
        borderRadius: '50%',
        '& text': {
          display: 'none',
        },
        '&.Mui-active': {
          border: 'none',
          color: (theme.vars || theme).palette.primary.main,
        },
        '&.Mui-completed': {
          border: 'none',
          color: (theme.vars || theme).palette.success.main,
        },
        ...theme.applyStyles('dark', {
          border: `1px solid ${gray[700]}`,
          '&.Mui-active': {
            border: 'none',
            color: (theme.vars || theme).palette.primary.light,
          },
          '&.Mui-completed': {
            border: 'none',
            color: (theme.vars || theme).palette.success.light,
          },
        }),
        variants: [
          {
            props: { completed: true },
            style: {
              width: 12,
              height: 12,
            },
          },
        ],
      }),
    },
  },
  MuiStepLabel: {
    styleOverrides: {
      label: ({ theme }) => ({
        '&.Mui-completed': {
          opacity: 0.6,
          ...theme.applyStyles('dark', { opacity: 0.5 }),
        },
      }),
    },
  },
};


===== .\src\theme\customizations\surfaces.ts =====
import { alpha, Theme, Components } from '@mui/material/styles';
import { gray } from '../themePrimitives';

/* eslint-disable import/prefer-default-export */
export const surfacesCustomizations: Components<Theme> = {
  MuiAccordion: {
    defaultProps: {
      elevation: 0,
      disableGutters: true,
    },
    styleOverrides: {
      root: ({ theme }) => ({
        padding: 4,
        overflow: 'clip',
        backgroundColor: (theme.vars || theme).palette.background.default,
        border: '1px solid',
        borderColor: (theme.vars || theme).palette.divider,
        ':before': {
          backgroundColor: 'transparent',
        },
        '&:not(:last-of-type)': {
          borderBottom: 'none',
        },
        '&:first-of-type': {
          borderTopLeftRadius: (theme.vars || theme).shape.borderRadius,
          borderTopRightRadius: (theme.vars || theme).shape.borderRadius,
        },
        '&:last-of-type': {
          borderBottomLeftRadius: (theme.vars || theme).shape.borderRadius,
          borderBottomRightRadius: (theme.vars || theme).shape.borderRadius,
        },
      }),
    },
  },
  MuiAccordionSummary: {
    styleOverrides: {
      root: ({ theme }) => ({
        border: 'none',
        borderRadius: 8,
        '&:hover': { backgroundColor: gray[50] },
        '&:focus-visible': { backgroundColor: 'transparent' },
        ...theme.applyStyles('dark', {
          '&:hover': { backgroundColor: gray[800] },
        }),
      }),
    },
  },
  MuiAccordionDetails: {
    styleOverrides: {
      root: { mb: 20, border: 'none' },
    },
  },
  MuiPaper: {
    defaultProps: {
      elevation: 0,
    },
  },
  MuiCard: {
    styleOverrides: {
      root: ({ theme }) => {
        return {
          padding: 16,
          gap: 16,
          transition: 'all 100ms ease',
          backgroundColor: gray[50],
          borderRadius: (theme.vars || theme).shape.borderRadius,
          border: `1px solid ${(theme.vars || theme).palette.divider}`,
          boxShadow: 'none',
          ...theme.applyStyles('dark', {
            backgroundColor: gray[800],
          }),
          variants: [
            {
              props: {
                variant: 'outlined',
              },
              style: {
                border: `1px solid ${(theme.vars || theme).palette.divider}`,
                boxShadow: 'none',
                background: 'hsl(0, 0%, 100%)',
                ...theme.applyStyles('dark', {
                  background: alpha(gray[900], 0.4),
                }),
              },
            },
          ],
        };
      },
    },
  },
  MuiCardContent: {
    styleOverrides: {
      root: {
        padding: 0,
        '&:last-child': { paddingBottom: 0 },
      },
    },
  },
  MuiCardHeader: {
    styleOverrides: {
      root: {
        padding: 0,
      },
    },
  },
  MuiCardActions: {
    styleOverrides: {
      root: {
        padding: 0,
      },
    },
  },
};


===== .\src\theme\customizations\treeView.ts =====
import { alpha, Theme } from '@mui/material/styles';
import type { TreeViewComponents } from '@mui/x-tree-view/themeAugmentation';
import { gray, brand } from '../.././theme/themePrimitives';

/* eslint-disable import/prefer-default-export */
export const treeViewCustomizations: TreeViewComponents<Theme> = {
  MuiTreeItem: {
    styleOverrides: {
      root: ({ theme }) => ({
        position: 'relative',
        boxSizing: 'border-box',
        padding: theme.spacing(0, 1),
        '& .groupTransition': {
          marginLeft: theme.spacing(2),
          padding: theme.spacing(0),
          borderLeft: '1px solid',
          borderColor: (theme.vars || theme).palette.divider,
        },
        '&:focus-visible .focused': {
          outline: `3px solid ${alpha(brand[500], 0.5)}`,
          outlineOffset: '2px',
          '&:hover': {
            backgroundColor: alpha(gray[300], 0.2),
            outline: `3px solid ${alpha(brand[500], 0.5)}`,
            outlineOffset: '2px',
          },
        },
      }),
      content: ({ theme }) => ({
        marginTop: theme.spacing(1),
        padding: theme.spacing(0.5, 1),
        overflow: 'clip',
        '&:hover': {
          backgroundColor: alpha(gray[300], 0.2),
        },

        '&.selected': {
          backgroundColor: alpha(gray[300], 0.4),
          '&:hover': {
            backgroundColor: alpha(gray[300], 0.6),
          },
        },
        ...theme.applyStyles('dark', {
          '&:hover': {
            backgroundColor: alpha(gray[500], 0.2),
          },
          '&:focus-visible': {
            '&:hover': {
              backgroundColor: alpha(gray[500], 0.2),
            },
          },
          '&.selected': {
            backgroundColor: alpha(gray[500], 0.4),
            '&:hover': {
              backgroundColor: alpha(gray[500], 0.6),
            },
          },
        }),
      }),
    },
  },
};


===== DIRECTORY TREE =====
./
    .env.example
    LICENSE
    next-env.d.ts
    next.config.mjs
    package.json
    tsconfig.json
    public/
        .gitkeep
        FPT_logo.png
    src/
        theme.ts
        app/
            layout.tsx
            loading.tsx
            page.tsx
            about/
                page.tsx
            api/
                chat/
                    route.ts
                generate-advice/
                    route.ts
                openrouter/
                    route.ts
                visualize/
                    route.ts
            chat/
                page.tsx
                [chatId]/
                    page.tsx
            lab/
                page.tsx
            simulation/
                page.tsx
            visualize/
                page.tsx
        components/
            AnalysisPanel.tsx
            AppNavbar.tsx
            CapitalConcentrationChart.tsx
            ChatInput.tsx
            ChatMessageList.tsx
            ChatWelcome.tsx
            FutureScenarioChart.tsx
            FutureScenariosChart.tsx
            Header.tsx
            KeyMetricsTrendChart.tsx
            LaborSkillChart.tsx
            MainGrid.tsx
            MenuButton.tsx
            MenuContent.tsx
            NavbarBreadcrumbs.tsx
            ProductivityAnalysisChart.tsx
            ProductivityLeverageCard.tsx
            ProfitCompositionChart.tsx
            ProfitTrendChart.tsx
            SideMenu.tsx
            SideMenuMobile.tsx
            SocialImpactChart.tsx
            SocialImpactComparisonChart.tsx
            StatCard.tsx
            ValueDistributionChart.tsx
            ValueStructurePieChart.tsx
            WagePressureChart.tsx
            WorkforceCompositionChart.tsx
        internals/
            components/
                CustomIcons.tsx
            data/
                gridData.tsx
        lib/
            ai.ts
        theme/
            AppTheme.tsx
            ColorModeIconDropdown.tsx
            ColorModeSelect.tsx
            themePrimitives.ts
            customizations/
                charts.ts
                dataDisplay.tsx
                dataGrid.js
                datePickers.ts
                feedback.tsx
                index.ts
                inputs.tsx
                navigation.tsx
                surfaces.ts
                treeView.ts
    _utils/
